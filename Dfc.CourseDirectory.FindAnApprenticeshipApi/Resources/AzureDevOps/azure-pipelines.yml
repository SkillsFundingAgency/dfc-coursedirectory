# dotnet core build

variables:
  ArmTemplateRoot: '$(Build.SourcesDirectory)\Dfc.CourseDirectory.FindAnApprenticeshipApi\Resources\ArmTemplates'
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'
  SolutionBaseName: 'Dfc.CourseDirectory.FindAnApprenticeshipApi'
  GitVersionConfigFilePath: Dfc.CourseDirectory.FindAnApprenticeshipApi/Resources/AzureDevOps/GitVersion.yml
  group: dfc-findanapprenticeship-build

resources:
  repositories:
  - repository: self
  - repository: dfc-devops
    type: github
    name: SkillsFundingAgency/dfc-devops
    endpoint: 'GitHub (ESFA)'
    ref: refs/tags/v1.11.2

trigger:
  batch: true
  branches:
    include:
    - release/*
    - main
  paths:
    include:
    - Dfc.CourseDirectory.FindAnApprenticeshipApi/*
    - src/Dfc.CourseDirectory.Core/*
    - src/Dfc.CourseDirectory.Database/*
    - src/Dfc.CourseDirectory.FindAnApprenticeshipApi/*
    - tests/Dfc.CourseDirectory.Core.Tests/*
    - tests/Dfc.CourseDirectory.FindAnApprenticeshipApi.Tests/*
    - tests/Dfc.CourseDirectory.Testing/*

pr:
  branches:
    include:
    - release/*
    - main
  paths:
    include:
    - Dfc.CourseDirectory.FindAnApprenticeshipApi/*
    - src/Dfc.CourseDirectory.Core/*
    - src/Dfc.CourseDirectory.Database/*
    - src/Dfc.CourseDirectory.FindAnApprenticeshipApi/*
    - tests/Dfc.CourseDirectory.Core.Tests/*
    - tests/Dfc.CourseDirectory.FindAnApprenticeshipApi.Tests/*
    - tests/Dfc.CourseDirectory.Testing/*

steps:

- task: UseGitVersion@5
  displayName: GitVersion
  inputs:
    useConfigFile: true
    configFilePath: ${{ variables.GitVersionConfigFilePath }}
    versionSpec: '5.3.x'

# ARM template
- template: AzureDevOpsTemplates\Build\StepTemplates\dfc-arm-build.yml@dfc-devops
  parameters:
    ArmTemplateRoot: '${{ variables.ArmTemplateRoot }}'
    SolutionBaseName: '${{ variables.SolutionBaseName }}'

# restore
- task: DotNetCoreCLI@2
  displayName: dotnet restore
  inputs:
    command: restore
    projects: '**/*.csproj'

# build
- task: DotNetCoreCLI@2
  displayName: dotnet build
  inputs:
    command: build
    projects: 'Dfc.CourseDirectory.FindAnApprenticeshipApi/$(SolutionBaseName).sln'
    configuration: ${{ variables.buildConfiguration }}

# test
- powershell: |
    $projects = (dotnet sln Dfc.CourseDirectory.FindAnApprenticeshipApi.sln list | findstr Tests.csproj)

    $success = $True
    foreach ($proj in $projects) {
      dotnet test $proj --configuration $(BuildConfiguration) --filter SkipOnCI!=true --logger trx --results-directory $(Agent.TempDirectory)

      if ($LASTEXITCODE -ne 0) {
        $success = $False
      }
    }

    if ($success -eq $False) {
      Exit 1
    }
  env:
    ConnectionStrings__DefaultConnection: $(IntegrationSQLDB)
  workingDirectory: $(SolutionBaseName)
  displayName: Test

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: "**/*.trx"
    searchFolder: "$(Agent.TempDirectory)"
  condition: succeededOrFailed()

  # publish
- task: DotNetCoreCLI@2
  displayName: Publish Dfc.CourseDirectory.FindAnApprenticeshipApi
  inputs:
    command: publish
    projects: 'src/Dfc.CourseDirectory.FindAnApprenticeshipApi/Dfc.CourseDirectory.FindAnApprenticeshipApi.csproj'
    configuration: ${{ variables.buildConfiguration }}
    arguments: '--output $(Build.ArtifactStagingDirectory)'
    publishWebProjects: false
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
    artifactName: '${{ variables.SolutionBaseName }}'
