@model Dfc.CourseDirectory.Web.ViewComponents.CostInput.CostInputModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<div class="govuk-form-group">
    <label class="govuk-label" asp-for="@Model.Cost">
        @Model.LabelText
    </label>
    @if (!string.IsNullOrWhiteSpace(Model.HintText))
    {
        <span class="govuk-hint">
            @Model.HintText
        </span>
    }
    <span asp-validation-for="@Model.Cost" class="govuk-error-message"></span>
    <span class="govuk-body">£ </span>
    <input class="govuk-input govuk-input--width-10" style="display:inline;" asp-for="@Model.Cost" type="text" aria-describedby="@Model.AriaDescribedBy">
</div>

<script>
    (function ($) {
        $(function () {
            var formGroupErrorClass = "govuk-form-group--error";
            var elementErrorClass = "govuk-input--error";
            var $elementCost = $("#@nameof(Model.Cost)");
            var $validationMessageCost = $elementCost.prev("[data-valmsg-for='@nameof(Model.Cost)']");
            $validationMessageCost.css("margin-bottom", "0");
            var $formGroupCost = $elementCost.closest('.govuk-form-group');

            var $form = $elementCost.closest("form");
            $form.addTriggersToJqueryValidate().triggerElementValidationsOnFormValidation();
            var validator = $form.validate();

            $elementCost.on("blur", function () {
                var trimmed = $elementCost.val().trim().replace(",", "");

                if (trimmed !== "") {
                    var formatted = parseFloat(Math.floor(trimmed * 100) / 100).toFixed(2);
                    $elementCost.val(formatted);
                }

                var result = validator.element($elementCost);

                if (result) {
                    $elementCost.removeClass(elementErrorClass);
                    $formGroupCost.removeClass(formGroupErrorClass);
                    $validationMessageCost.hide();
                    $validationMessageCost.css("margin-bottom", "0");
                } else {
                    $elementCost.addClass(elementErrorClass);
                    $formGroupCost.addClass(formGroupErrorClass);
                    $validationMessageCost.show();
                    $validationMessageCost.css("margin-bottom", "15px");
                }
            });

            $elementCost.elementValidation(function (element, result) {
                if (!$formGroupCost.hasClass(formGroupErrorClass)) {
                    $validationMessageCost.hide();
                }

                if (result) {
                    $elementCost.removeClass(elementErrorClass);
                    $formGroupCost.removeClass(formGroupErrorClass);
                    $validationMessageCost.css("margin-bottom", "0");
                }
            });

            $elementCost.on("keypress", function (event) {
                var charCode = event.which ? event.which : event.keyCode;

                if ((charCode >= 48 && charCode <= 57) || charCode === 46) {
                    return true;
                }

                return false;
            });
        });
    })(jQuery);
</script>