@model Dfc.CourseDirectory.Web.ViewComponents.Courses.Cost.CostModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<div class="govuk-form-group">
    <label class="govuk-label" asp-for="@Model.Cost">
        @Model.CostLabelText
    </label>
    @if (!string.IsNullOrWhiteSpace(Model.CostHintText))
    {
        <span class="govuk-hint">
            @Model.CostHintText
        </span>
    }

    <span class="govuk-error-message field-validation-error" id="invalidCost" style="display: none;margin-bottom: 15px;">
        <span id="invalidCostMessage" class="">Enter the cost in pounds and pence</span>
    </span>
    <span class="govuk-error-message field-validation-error" id="invalidCostLength" style="display: none;margin-bottom: 15px;">
        <span id="invalidCostLengthMessage" class="">Maximum value for cost is £999,999.99</span>
    </span>
    <span class="govuk-body">£</span>
    <input class="govuk-input govuk-input--width-10" style="display:inline;" asp-for="@Model.Cost" type="text" aria-describedby="@Model.CostAriaDescribedBy">
</div>

<div class="govuk-character-count" data-module="character-count" data-maxlength="255">
    <div class="govuk-form-group">
        <label class="govuk-label" for="word-count">
            @Model.CostDescriptionLabelText
        </label>
        @if (!string.IsNullOrWhiteSpace(Model.CostDescriptionHintText))
        {
            <span class="govuk-hint">
                @Model.CostDescriptionHintText
            </span>
        }
        <span asp-validation-for="@Model.CostDescription" class="govuk-error-message"></span>
        <textarea class="govuk-textarea js-character-count " asp-for="@Model.CostDescription" rows="5"></textarea>
    </div>
</div>

<script>
    (function ($) {
        $(function () {


            var formGroupErrorClass = "govuk-form-group--error";
            var elementErrorClass = "govuk-input--error";
            var $elementCostDescription = $("#@nameof(Model.CostDescription)");
            var $validationMessageCostDescription = $elementCostDescription.prev("[data-valmsg-for='@nameof(Model.CostDescription)']");
            $validationMessageCostDescription.css("margin-bottom", "0");
            var $formGroupCostDescription = $elementCostDescription.closest('.govuk-form-group');
            var $elementCost = $("#@nameof(Model.Cost)");
            var $validationMessageCost = $elementCost.prev("[data-valmsg-for='@nameof(Model.Cost)']");
            $validationMessageCost.css("margin-bottom", "0");
            var $formGroupCost = $elementCost.closest('.govuk-form-group');

            var $validationMessageForCost= $("#invalidCost");
            var $validationMessageForCostLength = $("#invalidCostLength");


            var $form = $elementCostDescription.closest("form");
            $form.addTriggersToJqueryValidate().triggerElementValidationsOnFormValidation();
            var validator = $form.validate();

            $elementCostDescription.on("blur", function () {




                var $characterCount = $elementCostDescription.data("val-maxlength-max");
                var $countMessage = $("#CostDescription-info");
                $countMessage.text("You have " + ($characterCount - $elementCostDescription.val().length) + " characters remaining");


                var result = validator.element($elementCostDescription);

                if (result) {
                    $elementCostDescription.removeClass(elementErrorClass);
                    $formGroupCostDescription.removeClass(formGroupErrorClass);
                    $validationMessageCostDescription.hide();
                    $validationMessageCostDescription.css("margin-bottom", "0");
                } else {
                    $elementCostDescription.addClass(elementErrorClass);
                    $formGroupCostDescription.addClass(formGroupErrorClass);
                    $validationMessageCostDescription.show();
                    $validationMessageCostDescription.css("margin-bottom", "15px");
                }

                if ($elementCost.val() === "") {
                    if ($elementCostDescription.val() === "") {
                        $elementCost.addClass(elementErrorClass);
                        $validationMessageForCost.show();
                        $formGroupCost.addClass(formGroupErrorClass);
                    } else {
                        $elementCost.removeClass(elementErrorClass);
                        $validationMessageForCost.hide();
                        $formGroupCost.removeClass(formGroupErrorClass);
                    }
                } else {

                    $validationMessageForCost.hide();
                    $formGroupCost.removeClass(formGroupErrorClass);

                    if ($elementCost.val().length < 1 || $elementCost.val().length > 9) {
                        $elementCost.addClass(elementErrorClass);
                        $validationMessageForCostLength.show();
                        $formGroupCost.addClass(formGroupErrorClass);
                    } else {
                        $elementCost.removeClass(elementErrorClass);
                        $validationMessageForCostLength.hide();
                        $formGroupCost.removeClass(formGroupErrorClass);
                    }
                }
            });

            $elementCostDescription.elementValidation(function (element, result) {
                if (!$formGroupCostDescription.hasClass(formGroupErrorClass)) {
                    $validationMessageCostDescription.hide();
                }

                if (result) {
                    $elementCostDescription.removeClass(elementErrorClass);
                    $formGroupCostDescription.removeClass(formGroupErrorClass);
                    $validationMessageCostDescription.css("margin-bottom", "0");
                }
            });

            $elementCost.on("blur", function () {

                $validationMessageForCost.hide();
                $validationMessageForCostLength.hide();
                $formGroupCost.removeClass(formGroupErrorClass);

                var trimmed = $elementCost.val().trim().replace(",", "");

                if (trimmed !== "") {

                    if ($.isNumeric(trimmed))
                        {
                        var formatted = parseFloat(Math.floor(trimmed * 100) / 100).toFixed(2);
                        $elementCost.val(formatted);


                            var result = validator.element($elementCost);

                            if (result) {
                                $elementCost.removeClass(elementErrorClass);
                                $formGroupCost.removeClass(formGroupErrorClass);
                                $validationMessageCost.hide();
                                $validationMessageCost.css("margin-bottom", "0");
                            } else {
                                $elementCost.addClass(elementErrorClass);
                                $formGroupCost.addClass(formGroupErrorClass);
                                $validationMessageCost.show();
                                $validationMessageCost.css("margin-bottom", "15px");
                            }

                            if ($elementCost.val() === "") {
                                if ($elementCostDescription.val() === "") {
                                    $elementCost.addClass(elementErrorClass);
                                    $validationMessageForCost.show();
                                    $formGroupCost.addClass(formGroupErrorClass);
                                } else {
                                    $elementCost.removeClass(elementErrorClass);
                                    $validationMessageForCost.hide();
                                    $formGroupCost.removeClass(formGroupErrorClass);
                                }
                            } else {

                                $validationMessageForCost.hide();
                                $formGroupCost.removeClass(formGroupErrorClass);

                                if ($elementCost.val().length < 1 || $elementCost.val().length > 9) {
                                    $elementCost.addClass(elementErrorClass);
                                    $validationMessageForCostLength.show();
                                    $formGroupCost.addClass(formGroupErrorClass);
                                } else {
                                    $elementCost.removeClass(elementErrorClass);
                                    $validationMessageForCostLength.hide();
                                    $formGroupCost.removeClass(formGroupErrorClass);
                                }
                            }


                        } else {
                        $elementCost.val("");
                    }
                }



            });

            $elementCost.elementValidation(function (element, result) {
                if (!$formGroupCost.hasClass(formGroupErrorClass)) {
                    $validationMessageCost.hide();
                }

                if (result) {
                    $elementCost.removeClass(elementErrorClass);
                    $formGroupCost.removeClass(formGroupErrorClass);
                    $validationMessageCost.css("margin-bottom", "0");
                }
            });

            $elementCost.on("keypress", function (event) {
                var charCode = event.which ? event.which : event.keyCode;

                if ((charCode >= 48 && charCode <= 57) || charCode === 46) {
                    return true;
                }

                return false;
            });
        });
    })(jQuery);
</script>