@using Dfc.CourseDirectory.Models.Models.Courses;
@using Dfc.CourseDirectory.Web.Helpers;
@using Dfc.CourseDirectory.Web.ViewComponents.Extensions
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model Dfc.CourseDirectory.Web.ViewComponents.Courses.ChooseRegion.ChooseRegionModel

<div class="govuk-form-group">
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            @if (Model.UseNationalComponent)
            {
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                        <h2 class="govuk-fieldset__heading govuk-heading-m" id="govuk-label-nationalRadioButtons">
                            Can you deliver this course anywhere in England?
                        </h2>
                        <span class="govuk-hint govuk-!-margin-top-3">Yes will show you are a national provider.</span>
                    </legend>
                    <div class="govuk-radios govuk-radios--inline" id="nationalRadioButtons" val-required-message="Choose if you can deliver this course anywhere in England">

                        <div class="govuk-radios__item">
                            @Html.RadioButtonFor(m => m.National, true, new { @class = "govuk-radios__input", id = "nationalTrue" })
                            <label class="govuk-label govuk-radios__label" for="nationalTrue">Yes</label>
                        </div>
                        <div class="govuk-radios__item">
                            @Html.RadioButtonFor(m => m.National, false, new { @class = "govuk-radios__input", id = "nationalFalse" })
                            <label class="govuk-label govuk-radios__label" for="nationalFalse">No</label>
                        </div>


                    </div>
                </fieldset>
            }

            <div id="regions-section" style="margin-top:30px">
                <label class="govuk-label--m" id="govuk-label-SelectRegionCheckBoxes" for="select-region">
                    @Model.Regions.LabelText
                </label>
                <span id="select-region-hint" class="govuk-hint govuk-!-margin-top-3">
                    @Model.Regions.HintText
                </span>

                @{
                    // Giving the accordion component a distinct ID every time ensures that its state isn't persisted across page loads (e.g. it's always closed on initial load.)
                    var accordionId = Guid.NewGuid().ToString();
                }

                <div id="SelectRegionCheckBoxes" val-required-message="Select at least one region or sub-region">
                    <div id="accordion-regions-@accordionId" class="govuk-accordion govuk-!-margin-bottom-0" data-module="accordion">
                        
                        @foreach (var region in Model.Regions.RegionItems.Select((v, i) => new { Value = v, Index = i }))
                        {
                            if (@Model.National == true)
                            {
                                @foreach (var subregion in region.Value.SubRegion)
                                {
                                    subregion.Checked = false;
                                }
                            }

                            <div class="govuk-accordion__section accordion-regions-section">
                                <div class="govuk-accordion__section-header">
                                    <h2 class="govuk-accordion__section-heading">
                                        <span class="govuk-accordion__section-button" id="accordion-regions-@accordionId-heading-@region.Index">
                                            @region.Value.RegionName
                                        </span>
                                    </h2>
                                    <div id="accordion-regions-@accordionId-summary-@region.Index" class="govuk-accordion__section-summary govuk-body accordion-regions-summary" style="display:none;">
                                    </div>
                                </div>

                                <div id="accordion-regions-@accordionId-content-@region.Index" class="govuk-accordion__section-content govuk-checkboxes--small" aria-labelledby="accordion-regions-@accordionId-heading-@region.Index">
                                    <div class="flex-container govuk-grid-row region-checkboxes accordion-regions-selectall-container" tabindex="-1" aria-hidden="true" style="display:none;">
                                        <div class="govuk-checkboxes__item govuk-!-margin-bottom-4">
                                            <input id="accordion-regions-@accordionId-selectall-@region.Index" type="checkbox" class="govuk-checkboxes__input accordion-regions-checkbox-selectall" tabindex="-1">
                                            <label for="accordion-regions-@accordionId-selectall-@region.Index" class="govuk-label govuk-checkboxes__label">Select all</label>
                                        </div>
                                    </div>

                                    <div class="flex-container govuk-grid-row region-checkboxes" tabindex="-1" aria-hidden="true">
                                        @foreach (var subregion in region.Value.SubRegion.Select((v, i) => new { Value = v, Index = i }))
                                        {
                                            <div class="govuk-checkboxes__item">
                                                <input id="RegionName-@region.Value.Id-@subregion.Index" name="SelectedRegions" type="checkbox" value="@subregion.Value.Id" class="govuk-checkboxes__input accordion-regions-checkbox-subregion" tabindex="-1" region-id="@region.Value.Id" @Html.Raw(subregion.Value.Checked.ThenNullableCheck()) />
                                                <label for="RegionName-@region.Value.Id-@subregion.Index" class="govuk-label govuk-checkboxes__label">@subregion.Value.SubRegionName</label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    (function ($) {
        $(function () {

            var $regionSection = $("#regions-section");

            //----------------------------------------
            //National code (May/May not be required)
            //----------------------------------------

            var $useNationalComponent = '@Model.UseNationalComponent';

            if ($useNationalComponent == 'True') {
                var $nationalRadios = $("#nationalRadioButtons input[type=radio]");
                var $checked = $("#nationalRadioButtons input[type=radio]:checked").val();
                switch ($checked) {
                    case "True":
                    case undefined:
                    case null:    {
                        $regionSection.hide();
                        break;
                    }
                    case "false": {
                        $regionSection.show();
                        break;
                    }
                }


                $nationalRadios.change(function () {
                    switch (this.value) {
                        case "True":
                            {
                                $regionSection.hide();
                                break;
                            }
                        case "False":
                            {
                                $regionSection.show();
                                break;
                            }
                    }
                });
            }

            //-----------------------------
            //Regions Code
            //-----------------------------

            var updateRegionsSection = function (summary, checkboxes, selectAll) {
                let itemsSelected = $(checkboxes).filter(':checked').length;

                if (itemsSelected === 0) {
                    $(summary).hide();
                    $(selectAll).prop('checked', false);
                } else if (itemsSelected === checkboxes.length) {
                    $(summary).show();
                    $(summary).text('All areas selected');
                    $(selectAll).prop('checked', true);
                } else {
                    $(summary).show();
                    $(summary).text(`${itemsSelected} area${itemsSelected > 1 ? 's' : ''} selected`);
                    $(selectAll).prop('checked', false);
                }
            };

            $('.accordion-regions-section').each(function () {
                let summary = $(this).find('.accordion-regions-summary')[0];
                let selectAll = $(this).find('.accordion-regions-checkbox-selectall')[0];
                let checkboxes = $(this).find('.accordion-regions-checkbox-subregion');

                checkboxes.each(function () {
                    $(this).change(function () {
                        updateRegionsSection(summary, checkboxes, selectAll);
                    });
                });

                $(selectAll).change(function () {
                    let checked = $(this).prop('checked');

                    if (checked) {
                        checkboxes.each(function () {
                            $(this).prop('checked', true);
                        });
                    } else {
                        checkboxes.each(function () {
                            $(this).prop('checked', false);
                        });
                    }

                    updateRegionsSection(summary, checkboxes, selectAll);
                });

                $(selectAll).closest('.accordion-regions-selectall-container').show();

                updateRegionsSection(summary, checkboxes, selectAll);
            });
        });
    })(jQuery);
</script>
