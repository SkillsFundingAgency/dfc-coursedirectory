@using Dfc.CourseDirectory.Web.ViewComponents.Extensions
@using Dfc.CourseDirectory.Web.ViewComponents.Pagination;

@model Dfc.CourseDirectory.Web.ViewComponents.LarsSearchResult.LarsSearchResultModel;

<div class="govuk-grid-row">

    @if (Model.HasErrors)
    {
        <div class="govuk-grid-column-full">
            <div class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary">
                <h2 class="govuk-error-summary__title" id="error-summary-title">
                    Sorry, there was a problem.
                </h2>
                <div class="govuk-error-summary__body">
                    <ul class="govuk-list govuk-error-summary__list">
                        @foreach (var error in Model.Errors)
                        {
                            <li>
                                @error
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
    else if (Model.Items.Any())
    {

        <div class="govuk-heading-s lars-search-results govuk-!-font-weight-regular">
            Found <span class="govuk-!-font-weight-bold">@Model.TotalCount</span> results for <span class="govuk-!-font-weight-bold">@Model.SearchTerm</span>
        </div>

        <div class="govuk-grid-column-one-quarter">
            @*<h3>filter controls here</h3>*@
            @if (Model.Filters != null)
            {
                if (Model.HasSelectedFilters)
                {
                    <div class="govuk-form-group">
                        <h3><a class="govuk-link" id="ClearAllFilters" href="">reset</a></h3>
                    </div>
                }
                int tabIndexCounter = 0;
                foreach (var filter in Model.Filters)
                {
                    string panel = "panel" + tabIndexCounter;
                    string tab = "tab" + tabIndexCounter;
                    <section class="accordian" role="tablist" aria-live="polite">
                        <article>

                            @*<div class="govuk-form-group govuk-!-font-size-14">*@
                            <span id="@tab" tabindex="0" class="section-title" aria-controls="@panel" role="tab">
                                <h3 class="govuk-heading-s">
                                    @filter.Title
                                    <span>+</span>
                                </h3>
                            </span>

                            <div class="collapsing-section" id="@panel" aria-labelledby="@tab" role="tabpanel">
                                <fieldset class="govuk-fieldset" aria-describedby="waste-hint">
                                    <div class="govuk-checkboxes">
                                        @foreach (var item in filter.Items)
                                        {
                                            <div class="govuk-checkboxes__item">
                                                <input class="govuk-checkboxes__input" id="@item.Id" name="@item.Name" type="checkbox" value="@item.Value" @item.IsSelected.ThenCheck()>
                                                <label class="govuk-label govuk-checkboxes__label govuk-!-font-size-14" for="@item.Id">
                                                    @item.Text (@item.Count)
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </fieldset>
                            </div>
                            @*</div>*@

                        </article>
                    </section>
                    tabIndexCounter++;
                }
            }
        </div>

        <div class="govuk-grid-column-three-quarters">

            @await Component.InvokeAsync(nameof(Pagination),
                     new
                     {
                         url = Model.Url,
                         pageParamName = Model.PageParamName,
                         totalNoOfItems = Model.TotalCount,
                         itemsPerPage = Model.ItemsPerPage,
                         noOfPagesToDisplay = 10,
                         isSliding = true
                     })
            <div class="govuk-table govuk-!-font-size-14">

                @foreach (var item in Model.Items)
                {
                    <div class="cd-lars-search-result__container">
                        <h3 class="govuk-heading-m">@item.LearnAimRefTitle</h3>
                        <p class="govuk-body">LARS/QAN:<span class="govuk-!-font-weight-bold"> @item.LearnAimRef</span></p>
                        <p class="govuk-body">Level: <span class="govuk-!-font-weight-bold"> @item.NotionalNVQLevelv2</span></p>
                        <p class="govuk-body">Awarding body:<span class="govuk-!-font-weight-bold"> @item.AwardOrgCode</span></p>
                        <p class="govuk-body"><a class="govuk-link" href="#">Add this qualification</a></p>
                    </div>
                }
            </div>
            @await Component.InvokeAsync(nameof(Pagination),
                     new
                     {
                         url = Model.Url,
                         pageParamName = Model.PageParamName,
                         totalNoOfItems = Model.TotalCount,
                         itemsPerPage = Model.ItemsPerPage,
                         noOfPagesToDisplay = 10,
                         isSliding = true
                     })
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(Model.SearchTerm) && !Model.Items.Any())
    {
        <div class="govuk-grid-column-full">
            <div class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary">

                <h2 class="govuk-error-summary__title" id="error-summary-title">
                    No records found
                </h2>
            </div>
        </div>
    }
</div>

<script>
    (function($) {
        $(function() {
            $(".section-title").on('focus',
                function() {
                    if (!$(this).data("mouseDown"))
                        $(this).click();
                });

            $(".section-title").on('mousedown',
                function() {
                    $(this).data("mouseDown", true);
                });

            $(".section-title").on('mouseup',
                function() {
                    $(this).removeData("mouseDown");
                });

            $(".section-title").on('click',
                function() {
                    if ($(this).hasClass('open')) {
                        //Close the current section
                        $(this).removeClass('open');
                        $('.collapsing-section').slideUp();

                    } else {
                        //close the prev section & open the newly click
                        //$('.section-title').removeClass('open');
                        //$('.collapsing-section').slideUp(); //Side up all sections that are open & remove their open class
                        $(this).addClass('open');
                        $('.collapsing-section').addClass('open');
                        var sectionToOpen = $(this).next('.collapsing-section');
                        $(sectionToOpen).slideDown();
                    }
                });


            var toggle = false;
            $('.btn').click(function() {
                toggle = !toggle;
                if (toggle) {
                    $('#A').animate({ left: 0 });
                } else {
                    $('#A').animate({ left: -400 });
                }
            });
        });
    })(jQuery);
</script>