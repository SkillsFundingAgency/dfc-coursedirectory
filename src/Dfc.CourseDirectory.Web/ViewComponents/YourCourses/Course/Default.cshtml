
@model Dfc.CourseDirectory.Web.ViewModels.YourCoursesViewModel
@using System.Linq
@using Dfc.CourseDirectory.Services.Interfaces.CourseService
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.CourseRun
@using Dfc.CourseDirectory.Web.ViewComponents.ModalPopup
@using Dfc.CourseDirectory.Models.Models.Courses
@using Microsoft.CodeAnalysis
@using CourseRun = Dfc.CourseDirectory.Models.Models.Courses.CourseRun
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<script src="https://cdn.rawgit.com/vast-engineering/jquery-popup-overlay/1.7.13/jquery.popupoverlay.js"></script>


@{ var counter = 0; }
@foreach (ICourseSearchOuterGrouping outerGroup in Model.Courses.Value)
{
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <div class="govuk-form-group">
                @{
                    var qualificationClassName = "accordion govuk-heading-l active";


                    if (Model.UpdatedCourseId.HasValue)
                    {
                        if (outerGroup.Value.Any(x => x.Value.Any(y => y.id == Model.UpdatedCourseId)))
                        {
                            qualificationClassName = "accordion govuk-heading-l";
                        }

                    }

                    <h2 class="@qualificationClassName" data-row-type="coursetitle">
                        @outerGroup.QualType
                        <span class="govuk-body count">(@outerGroup.Value.SelectMany(o => o.Value.SelectMany(i => i.CourseRuns)).Count())</span>
                    </h2>
                }
            </div>
        </div>
    </div>
    {
        var displayStyle = "display: none;";
        if (qualificationClassName == "accordion govuk-heading-l")
        {
            displayStyle = "display:block;";
        }
        <div style="@displayStyle">

            @foreach (ICourseSearchInnerGrouping innerGroup in outerGroup.Value)
            {
                foreach (Course course in innerGroup.Value.OrderBy(c => c.QualificationCourseTitle))
                {
                    <div class="govuk-grid-row">
                        <div class="govuk-grid-column-full">

                            <div class="govuk-form-group">
                                @{
                                    var expand = false;
                                    var className = "accordion govuk-heading-l active";
                                    if (Model.UpdatedCourseId.HasValue)
                                    {
                                        if (course.id == Model.UpdatedCourseId)
                                        {
                                            expand = true;
                                            className = "accordion govuk-heading-l";
                                        }
                                    }

                                    <h3 class="@className" data-row-type="courserun" style="font-size: 22px; font-weight: bold; font-family: nta, Arial, sans-serif; border-style: none">
                                        @course.QualificationCourseTitle <span class="govuk-body">(@course.CourseRuns.Count())</span>
                                    </h3>

                                }

                            </div>
                        </div>
                    </div>

                    <div class="govuk-grid-row">
                        <div class="govuk-grid-column-full">

                            <div class="govuk-form-group cd-course-text">
                                <p class="govuk-body">
                                    Level @course.NotionalNVQLevelv2, @course.AwardOrgCode, Lars: @course.LearnAimRef,
                                    <a id="@counter" class="edit-btn open-descript" href="#">View course description</a>
                                    <span class="cd-advanced-text">Advanced learner Loan Available</span>
                                </p>

                            </div>

                            <fieldset class="govuk-fieldset cd-course-checkbox" aria-describedby="course-hint">
                                <div class="govuk-checkboxes">
                                    <div class="govuk-checkboxes__item">

                                    <input class="govuk-checkboxes__input" type="checkbox" value="" checked="@course.AdvancedLearnerLoan" disabled="disabled">
                                    <label class="govuk-label govuk-checkboxes__label"></label>
                                </div>
                            </div>
                        </fieldset>
                        <hr class="govuk-section-break govuk-section-break--visible" style=margin-top:  10px">
                        @{
                            var descriptionModel = new ModalPopupModel
                            {
                                ID = counter,
                                CourseTitle = course.QualificationCourseTitle,
                                CourseDescription = course.CourseDescription,
                                EntryRequirements = course.EntryRequirements,
                                HowYoullBeAssessed = course.HowYoullBeAssessed,
                                HowYoullLearn = course.HowYoullLearn,
                                WhatYoullLearn = course.WhatYoullLearn,
                                WhatYoullNeed = course.WhatYoullNeed,
                                WhereNext = course.WhereNext
                            };
                        }
                        @await Component.InvokeAsync(nameof(ModalPopup), descriptionModel)
                        @*<hr class="govuk-section-break govuk-section-break--visible">*@
                    </div>
                    @*<hr class="govuk-section-break govuk-section-break--visible">*@
                </div>

                    var displayCourseRunStyle = "display: none;";
                    if (expand)
                    {
                        displayCourseRunStyle = "display:block;";
                    }
                    <div class="govuk-grid-row" style="@displayCourseRunStyle">
                        <div class="govuk-grid-column-full">
                            @{
                                foreach (var courseRun in course.CourseRuns.OrderBy(cr => cr.CourseName))
                                {
                                    var courseRunModel = new CourseRunModel
                                    {
                                        CourseId = course.id,
                                        attendances = Model.attendances,
                                        deliveryModes = Model.deliveryModes,
                                        durationUnits = Model.durationUnits,
                                        modes = Model.modes,
                                        venues = Model.Venues,
                                        courseRun = courseRun
                                    };

                                    @await Component.InvokeAsync(nameof(CourseRun), courseRunModel)
                                }
                                counter++;
                            }
                        </div>
                    </div>
                }
            }

        </div>
    }




    @*<div style="display: none;">
            @foreach (ICourseSearchInnerGrouping innerGroup in outerGroup.Value)
            {
                foreach (Course course in innerGroup.Value.OrderBy(c => c.QualificationCourseTitle))
                {
                    <div class="govuk-grid-row">
                        <div class="govuk-grid-column-full">

                            <div class="govuk-form-group">
                                @{
                                    var className = "active accordion govuk-heading-l";
                                    if (Model.CourseId.HasValue)
                                    {
                                        if (course.id == Model.CourseId)
                                        {
                                            className = "accordion govuk-heading-l";
                                        }
                                    }

                                    <h3 class="@className" data-row-type="courserun" style="font-size: 22px; font-weight: bold; font-family: nta, Arial, sans-serif; border-style: none">
                                        @course.QualificationCourseTitle <span class="govuk-body">(@course.CourseRuns.Count())</span>
                                    </h3>

                                }

                            </div>
                        </div>
                    </div>

                    <div class="govuk-grid-row">
                        <div class="govuk-grid-column-full">
                            <br />

                            <div class="govuk-form-group cd-course-text">
                                <p class="govuk-body">
                                    Level @course.NotionalNVQLevelv2, @course.AwardOrgCode, Lars: @course.LearnAimRef,
                                    <a id="@counter" class="edit-btn open-descript" href="#">View course description</a>
                                    <span class="cd-advanced-text">Advanced learner Loan Available</span>
                                </p>

                            </div>

                            <fieldset class="govuk-fieldset cd-course-checkbox" aria-describedby="course-hint">
                                <div class="govuk-checkboxes">
                                    <div class="govuk-checkboxes__item">

                                        <input class="govuk-checkboxes__input" type="checkbox" value="" checked="@course.AdvancedLearnerLoan" disabled="disabled">
                                        <label class="govuk-label govuk-checkboxes__label"></label>
                                    </div>
                                </div>
                            </fieldset>
                            <hr class="govuk-section-break govuk-section-break--visible" style=margin-top: 10px">
                            @{
                                var descriptionModel = new ModalPopupModel
                                {
                                    ID = counter,
                                    CourseTitle = course.QualificationCourseTitle,
                                    CourseDescription = course.CourseDescription,
                                    EntryRequirements = course.EntryRequirements,
                                    HowYoullBeAssessed = course.HowYoullBeAssessed,
                                    HowYoullLearn = course.HowYoullLearn,
                                    WhatYoullLearn = course.WhatYoullLearn,
                                    WhatYoullNeed = course.WhatYoullNeed,
                                    WhereNext = course.WhereNext
                                };
                            }
                            @await Component.InvokeAsync(nameof(ModalPopup), descriptionModel)
                        </div>
                    </div>


                    <div class="govuk-grid-row" style="display:none">
                        <div class="govuk-grid-column-full">
                            @{
                                foreach (var courseRun in course.CourseRuns.OrderBy(cr => cr.CourseName))
                                {
                                    var courseRunModel = new CourseRunModel
                                    {
                                        CourseId = course.id,
                                        attendances = Model.attendances,
                                        deliveryModes = Model.deliveryModes,
                                        durationUnits = Model.durationUnits,
                                        modes = Model.modes,
                                        venues = Model.Venues,
                                        courseRun = courseRun
                                    };

                                    @await Component.InvokeAsync(nameof(CourseRun), courseRunModel)
                                }
                                counter++;
                            }
                        </div>
                    </div>
                }
            }
            <br />
        </div>*@
}


<script>
    (function ($) {
        $(function () {

            var acc = document.getElementsByClassName("accordion");
            var i;

            for (i = 0; i < acc.length; i++) {
                acc[i].addEventListener("click", function () {
                    var $att = $(this).attr("data-row-type");

                    if ($att === "courserun") {
                        this.classList.toggle("active");
                        var panel = this.closest('.govuk-grid-row').nextElementSibling.nextElementSibling;


                        if (panel.style.display === "none") {
                            panel.style.display = "block";
                        } else {
                            panel.style.display = "none";
                        }
                    } else {
                        this.classList.toggle("active");
                        var panel = this.closest('.govuk-grid-row').nextElementSibling;
                        //var panel = this.nextElementSibling;
                        //var panel = panel1.nextElementSibling;
                        if (panel.style.display === "none") {
                            panel.style.display = "block";
                        } else {
                            panel.style.display = "none";
                        }
                    }

                });
            }

            $(".popup_content").popup({
                color: "#fff",
                transition: "all 0.3s"
            });

            $(".open-descript").each(function (i, elem) {
                $(this).on("click", function (e) {
                    e.preventDefault();

                    var $modal = $("#popup-descript-" + elem.id);

                    console.log($modal);

                    $modal.popup("show");
                });
            });
        });
    })(jQuery);

                                //$('.popup_content').popup({
                                //    color: '#fff',
                                //    transition: 'all 0.3s'
                                //});

                                //$(".open-descript").each(function (e) {
                                //    $(this).click(function (e) {
                                //        e.preventDefault();
                                //        $("html, body").css("overflow", "hidden");
                                //        //$('#popup-descript-0').popup('show');
                                //        $('#popup-descript').popup('show');
                                //    });
                                //});

                                //$(".close-descript").click(function (e) {
                                //    e.preventDefault();
                                //    $("html, body").css("overflow", "auto");
                                //    $('#popup-descript').popup('hide');
                                //});

</script>
