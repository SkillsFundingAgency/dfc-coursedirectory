
@model Dfc.CourseDirectory.Web.ViewModels.YourCoursesViewModel
@using System.Linq
@using Dfc.CourseDirectory.Services.Interfaces.CourseService
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.CourseRun
@using Dfc.CourseDirectory.Web.ViewComponents.ModalPopup
@using Dfc.CourseDirectory.Models.Models.Courses
@using CourseRun = Dfc.CourseDirectory.Models.Models.Courses.CourseRun
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<script src="https://cdn.rawgit.com/vast-engineering/jquery-popup-overlay/1.7.13/jquery.popupoverlay.js"></script>


<div class="govuk-form-group">
    @{ var counter = 0; }
    @foreach (ICourseSearchOuterGrouping outerGroup in Model.Courses.Value.OrderBy(o => o.QualType))
    {
        <br />
        <h2 class="govuk-heading-l">@outerGroup.QualType</h2>
        <span class="govuk-body">(@outerGroup.Value.SelectMany(o => o.Value.SelectMany(i => i.CourseRuns)).Count())</span>

        @foreach (ICourseSearchInnerGrouping innerGroup in outerGroup.Value)
        {
            @foreach (Course course in innerGroup.Value.OrderBy(c => c.QualificationCourseTitle))
            {
                <ul>
                    <li><hr class="govuk-section-break govuk-section-break--visible"></li>
                    <li>
                        <h3 class="govuk-heading-m">
                            @course.QualificationCourseTitle
                        </h3><span class="govuk-body">(@course.CourseRuns.Count())</span>
                        <div class="govuk-form-group">
                            <div class="govuk-form-group cd-course-text">
                                <p class="govuk-body">
                                    Level @course.NotionalNVQLevelv2, @course.AwardOrgCode, Lars: @course.LearnAimRef,
                                    <a id="@counter" class="edit-btn open-descript" href="#">View course description</a>
                                    <span class="cd-advanced-text">Advanced learner Loan Available</span>
                                </p>
                            </div>
                            <fieldset class="govuk-fieldset cd-course-checkbox" aria-describedby="course-hint">
                                <div class="govuk-checkboxes">
                                    <div class="govuk-checkboxes__item">

                                        <input class="govuk-checkboxes__input" type="checkbox" value="" checked="@course.AdvancedLearnerLoan" disabled="disabled">
                                        <label class="govuk-label govuk-checkboxes__label"></label>
                                    </div>
                                </div>
                            </fieldset>
                            @{
                                var descriptionModel = new ModalPopupModel
                                {
                                    ID = counter,
                                    CourseTitle = course.QualificationCourseTitle,
                                    CourseDescription = course.CourseDescription,
                                    EntryRequirements = course.EntryRequirments,
                                    HowYoullBeAssessed = course.HowYoullBeAssessed,
                                    HowYoullLearn = course.HowYoullLearn,
                                    WhatYoullLearn = course.WhatYoullLearn,
                                    WhatYoullNeed = course.WhatYoullNeed,
                                    WhereNext = course.WhereNext
                                };
                            }
                            @await Component.InvokeAsync(nameof(ModalPopup), descriptionModel)
                        </div>
                    </li>
                    <li><hr class="govuk-section-break govuk-section-break--visible"></li>

                    @{
                        foreach (var courseRun in course.CourseRuns.OrderBy(cr => cr.StartDate)
                                                                   .ThenBy(cr2 => cr2.FlexibleStartDate)
                                                                   .ThenBy(cr3 => Model.Venues.FirstOrDefault(v => v.Value == cr3.VenueId.ToString())?.Text) )
                        {
                            var courseRunModel = new CourseRunModel
                            {
                                attendances = Model.attendances,
                                deliveryModes = Model.deliveryModes,
                                durationUnits = Model.durationUnits,
                                modes = Model.modes,
                                attendance = courseRun.AttendancePattern,
                                deliveryMode = courseRun.DeliveryMode,
                                durationUnit = courseRun.DurationUnit,
                                mode = courseRun.StudyMode,
                                VenueId = courseRun.VenueId,
                                venues = Model.Venues,
                                courseRun = courseRun
                            };

                            @await Component.InvokeAsync(nameof(CourseRun), courseRunModel)
                        }

                        counter++;
                    }
                </ul>
            }
        }
        <br />
    }
</div>

<script>
    (function ($) {
        $(function () {
            $(".popup_content").popup({
                color: "#fff",
                transition: "all 0.3s"
            });

            $(".open-descript").each(function (i, elem) {
                $(this).on("click", function (e) {
                    e.preventDefault();

                    var $modal = $("#popup-descript-" + elem.id);

                    console.log($modal);

                    $modal.popup("show");
                });
            });
        });
    })(jQuery);

    //$('.popup_content').popup({
    //    color: '#fff',
    //    transition: 'all 0.3s'
    //});

    //$(".open-descript").each(function (e) {
    //    $(this).click(function (e) {
    //        e.preventDefault();
    //        $("html, body").css("overflow", "hidden");
    //        //$('#popup-descript-0').popup('show');
    //        $('#popup-descript').popup('show');
    //    });
    //});

    //$(".close-descript").click(function (e) {
    //    e.preventDefault();
    //    $("html, body").css("overflow", "auto");
    //    $('#popup-descript').popup('hide');
    //});

</script>