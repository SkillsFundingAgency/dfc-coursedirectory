@using Dfc.CourseDirectory.Web.ViewComponents.ProviderSearchResult;
@model Dfc.CourseDirectory.Web.ViewComponents.ProviderSearch.ProviderSearchModel;

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Add a Provider";
    ViewData["Subtext"] = "Enter UKPRN number";

    ViewData["Placeholder"] = "Search by UKPRN, provider name, address or postcode";
}

@{ var regex = @"^[1][0-9]{7}$"; }
<div class="cd-hero-grey">
    <div class="">
        <header class="cd-hero-search">
            <div class="content-container">

                <div class="grid-row" data-sf-element="Row">
                    <div class="column-two-thirds">
                        <div>

                            <p class="column-two-thirds govuk-heading-m">@ViewBag.Subtext</p>
                        </div>
                        <form class="site-search ui-front" id="header-search">


                            <div class="govuk-form-group">

                                @if (!string.IsNullOrWhiteSpace(Model.HintText))
                                {
                                    <span class="govuk-hint">
                                        @Model.HintText
                                    </span>
                                }

                                <input class="govuk-input" style="width:95%; float:left" asp-for="@Model.SearchTerm" type="text" aria-describedby="@Model.AriaDescribedBy"
                                       placeholder="@ViewBag.Placeholder"
                                       val-required-message="UKPRN required"
                                       val-regex="@regex"
                                       val-regex-message="UKPRN is 8 digit number starting with a 1 e.g. 10000364" />
                                <div class="cd-c-search__item cd-search__submit-wrapper">
                                    <button type="button" class=" submit" id="searchProvider">Search</button>
                                </div>


                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </header>
    </div>
</div>
<div id="ProviderSearchResultContainer">
    @await Component.InvokeAsync(nameof(ProviderSearchResult))
</div>



<script>
    (function($) {
        $(function() {

            var $code = $("#@nameof(Model.SearchTerm)").govUkInput();
            var validStates = [];
            var $search = $("#searchProvider");

            var $elementSearchTerm = $("#@nameof(Model.SearchTerm)");

            var $providerSearchResultContainer = $("#ProviderSearchResultContainer");

            var makeRequestWithPayload = function(payload, cb) {
                var qs = $.param(payload);
                $.get("/ProviderSearch?" + qs, cb);
            };
            var onSucess = function(data) {
                $providerSearchResultContainer.html("");
                $providerSearchResultContainer.html(data);
            };

            var doSearch = function() {

                $providerSearchResultContainer.html("");
                makeRequestWithPayload({
                        SearchTerm: $elementSearchTerm.val()
                    },
                    onSucess);
            };

            function isAllValid(currentValue) {
                return currentValue === true;
            }

            function validate() {

                if (!$.requiredValidate($code.val())) {
                    $code.govUkInput("invalidState", $code.attr("val-required-message"));
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $code.attr("val-regex") }, $code.val())) {
                    $code.govUkInput("invalidState", $code.attr("val-regex-message"));
                    validStates.push(false);
                } else {
                    $code.govUkInput("validState");
                    $code.push(true);
                }

            }

            $(document).keypress(function (e) {
                if (e.which == 13) {
                    e.preventDefault();your 
                    validate();
                    if (validStates.every(isAllValid)) {
                        doSearch();
                    }
                }
            });

            $(document).on('click',
                '#searchProvider',
                function(e) {
                    e.preventDefault();
                    $providerSearchResultContainer.html("");
                    validStates = [];
                    validate();
                    if (validStates.every(isAllValid)) {
                        doSearch();
                    }
                });

            //$(document).on('click',
            //    '#searchProvider',
            //    function(e) {
            //        e.preventDefault();
            //        $('#results').html("");
            //        validStates = [];
            //        validate();
            //        if (validStates.every(isAllValid)) {
            //            doSearch();
            //        }

            //    });
        });
    })(jQuery);
</script>