@using System.Net
@using Dfc.CourseDirectory.Web.ViewComponents.Extensions
@using Dfc.CourseDirectory.Web.ViewComponents.Pagination;
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization;
@using Dfc.CourseDirectory.Services.UnregulatedProvision
@using Dfc.CourseDirectory.Web.ViewModels
@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@using Dfc.CourseDirectory.Models.Enums
@using System.Globalization;
@using Microsoft.AspNetCore.Http.Extensions

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@model Dfc.CourseDirectory.Web.ViewModels.ProviderCourses.ProviderCoursesViewModel;

@if (!Model.ProviderCourseRuns.Any())
{
    <div class="cd-grid-coloumn-20 govuk-body" style="width: 100%; padding-left: 0.75em;">
        <span class="govuk-visually-hidden">Data Unavailable</span>
        @await Component.InvokeAsync(nameof(Notification), new NotificationModel
        {
            NotificationTitle = "",
            NotificationMessage = "No courses found that match your search criteria",
            ClassType = "error-summary"
        })
    </div>

}
else
{

    <div class="cd-grid-coloumn-20 govuk-body">


        @if (Model.HasFilters)
        {
            <div class="govuk-form-group">
                <h5><a class="govuk-link" id="ClearAllFilters" href="">Clear filters</a></h5>
            </div>
        }
        <div class="govuk-form-group govuk-!-font-size-14">
            <div class="accordion govuk-heading-s" role="button" tabindex="0">Level</div>
            <div class="panel">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-visually-hidden" style="font-weight: 100">
                        <h2 class="govuk-fieldset__heading">
                            Select Level
                        </h2>

                    </legend>

                    <div class="govuk-checkboxes govuk-checkboxes--small" id="LevelFilters">


                        @foreach (var level in Model.Levels)
                        {
                            <div class="govuk-checkboxes__item">
                                <input class="govuk-checkboxes__input" id="@level.Id" name="@level.Name" type="checkbox" value="@level.Value" @level.IsSelected.ThenCheck()>
                                <label id="levellabel_@level.Id" class="govuk-label govuk-checkboxes__label govuk-!-font-size-14" for="@level.Id">
                                    @level.Text
                                </label>
                            </div>


                        }


                    </div>
                </fieldset>
            </div>

    </div>

    @if (Model.DeliveryModes.Any())
    {
        <div class="govuk-form-group govuk-!-font-size-14">
            <div class="accordion govuk-heading-s active" role="button" tabindex="0">Delivery mode</div>
            <div class="panel" style="display: none">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-visually-hidden">
                        Select Delivery mode
                    </legend>
                    <div class="govuk-checkboxes govuk-checkboxes--small">


                        @foreach (var deliveryMode in Model.DeliveryModes)
                        {
                            <div class="govuk-checkboxes__item">
                                <input class="govuk-checkboxes__input" id="@deliveryMode.Id" name="@deliveryMode.Name" type="checkbox" value="@deliveryMode.Value" @deliveryMode.IsSelected.ThenCheck()>
                                <label class="govuk-label govuk-checkboxes__label govuk-!-font-size-14" for="@deliveryMode.Id">
                                    @deliveryMode.Text
                                </label>
                            </div>
                        }


                    </div>
                </fieldset>
            </div>
        </div>
    }

    @if (Model.Venues.Any())
    {
        <div class="govuk-form-group govuk-!-font-size-14">
            <div class="accordion govuk-heading-s active" role="button" tabindex="0">Course location</div>
            <div class="panel" style="display: none">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-visually-hidden">
                        Select Location
                    </legend>
                    <div class="govuk-checkboxes govuk-checkboxes--small">


                        @foreach (var venue in Model.Venues)
                        {
                            <div class="govuk-checkboxes__item">
                                <input class="govuk-checkboxes__input" id="@venue.Id" name="@venue.Name" type="checkbox" value="@venue.Value" @venue.IsSelected.ThenCheck()>
                                <label class="govuk-label govuk-checkboxes__label govuk-!-font-size-14" for="@venue.Id">
                                    @venue.Text
                                </label>
                            </div>
                        }


                    </div>
                </fieldset>
            </div>
        </div>
    }

    @if (Model.AttendancePattern.Any())
    {
        <div class="govuk-form-group govuk-!-font-size-14">
            <div class="accordion govuk-heading-s active" role="button" tabindex="0">Attendance pattern</div>
            <div class="panel" style="display: none">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-visually-hidden">
                        Select Attendance Mode
                    </legend>
                    <div class="govuk-checkboxes govuk-checkboxes--small">


                        @foreach (var attendancePattern in Model.AttendancePattern)
                        {
                            <div class="govuk-checkboxes__item">
                                <input class="govuk-checkboxes__input" id="@attendancePattern.Id" name="@attendancePattern.Name" type="checkbox" value="@attendancePattern.Value" @attendancePattern.IsSelected.ThenCheck()>
                                <label class="govuk-label govuk-checkboxes__label govuk-!-font-size-14" for="@attendancePattern.Id">
                                    @attendancePattern.Text
                                </label>
                            </div>
                        }


                    </div>
                </fieldset>
            </div>
        </div>
    }
    @if (Model.Regions.Any())
    {
        <div class="govuk-form-group govuk-!-font-size-14">
            <div class="accordion govuk-heading-s active" role="button" tabindex="0">Region</div>
            <div class="panel" style="display: none">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-visually-hidden">
                        Select Region
                    </legend>
                    <div class="govuk-checkboxes govuk-checkboxes--small">
                        @foreach (var region in Model.Regions)
                        {
                            <div class="govuk-checkboxes__item">
                                <input class="govuk-checkboxes__input" id="@region.Id" name="@region.Name" type="checkbox" value="@region.Value" @region.IsSelected.ThenCheck()>
                                <label class="govuk-label govuk-checkboxes__label govuk-!-font-size-14" for="@region.Id">
                                    @region.Text
                                </label>
                            </div>
                        }
                    </div>
                </fieldset>
            </div>
        </div>


    }

    <div class="govuk-form-group govuk-!-font-size-14">
        <a class="govuk-button" id="ApplyFilter">Apply</a>
    </div>

    </div>
    <div class="cd-grid-coloumn-80 ">

        @foreach (var courseRun in Model.ProviderCourseRuns.OrderBy(x => x.CourseName))
        {
            <div class="courserun border">
                <div class="courserun__row1" id="@courseRun.CourseRunId">
                    @if (!string.IsNullOrEmpty(courseRun.CourseName))
                    {
                        <h2 class="coursename">
                            @WebUtility.HtmlDecode(@courseRun.CourseName)

                        </h2>
                    }
                    <h3 class="coursename smaller ">

                        @if (!string.IsNullOrEmpty(courseRun.QualificationCourseTitle))
                        {
                            <small>
                                @WebUtility.HtmlDecode(@courseRun.QualificationCourseTitle)
                            </small>
                        }
                        @if (!string.IsNullOrEmpty(courseRun.LearnAimRef))
                        {
                            <small>
                                <span>LARS/QAN:@courseRun.LearnAimRef</span>
                            </small>
                        }

                    </h3>
                </div>

                @if (courseRun.DeliveryMode == "Classroom based")
                {
                    if (!string.IsNullOrEmpty(courseRun.Venue))
                    {
                        <div class="courserun__row2">
                            <span class="">
                                @WebUtility.HtmlDecode(@courseRun.Venue)
                            </span>
                        </div>
                    }
                }
                @if (courseRun.DeliveryMode == "Work based")
                {
                    if (courseRun.National)
                    {
                        <div class="courserun__row2">
                            <span class="">National</span>
                        </div>
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(courseRun.Region))
                        {
                            <div class="courserun__row2">
                                <span class="">@courseRun.Region</span>
                            </div>
                        }
                    }
                }


                <div class="courserun__row3">
                    @if (!string.IsNullOrEmpty(courseRun.CourseTextId))
                    {
                        <span>
                            @WebUtility.HtmlDecode(@courseRun.CourseTextId)
                        </span>
                    }

                    @if (courseRun.DeliveryMode == "Classroom based")
                    {
                        if (!string.IsNullOrEmpty(courseRun.AttendancePattern))
                        {
                            <span>@courseRun.AttendancePattern</span>
                        }
                    }
                    @if (!string.IsNullOrEmpty(courseRun.NotionalNVQLevelv2))
                    {
                        <span>Level @courseRun.NotionalNVQLevelv2</span>
                    }


                    @if (!string.IsNullOrEmpty(courseRun.DeliveryMode))
                    {
                        <span>@courseRun.DeliveryMode</span>
                    }
                    @if (courseRun.DeliveryMode == "Classroom based")
                    {
                        @if (!string.IsNullOrEmpty(courseRun.StudyMode))
                        {
                            <span>@courseRun.StudyMode</span>
                        }
                    }
                    @if (!string.IsNullOrEmpty(courseRun.StartDate))
                    {
                        <span>

                            @courseRun.StartDate


                        </span>
                    }
                </div>

                <div class="courserun__row4">
                    <a class="govuk-link" href="@Url.Action("Index", "CourseSummary",new { courseRun.CourseId, courseRun.CourseRunId})">View or edit course <span class="govuk-visually-hidden">@courseRun.CourseName</span></a>
                    <a class="govuk-link"
                       asp-controller="CopyCourseRun"
                       asp-action="Index"
                       asp-route-learnAimRef="@courseRun.LearnAimRef"
                       asp-route-notionalNVQLevelv2="@courseRun.NotionalNVQLevelv2"
                       asp-route-awardOrgCode="@courseRun.AwardOrgCode"
                       asp-route-learnAimRefTitle="@courseRun.QualificationCourseTitle"
                       asp-route-learnAimRefTypeDesc="@courseRun.QualificationType"
                       asp-route-courseId="@courseRun.CourseId"
                       asp-route-courseRunId="@courseRun.CourseRunId"
                       asp-route-publishMode="@PublishMode.Summary">Copy course</a>


                    <a id="course-delete" class="govuk-link" asp-controller="Courses" asp-action="DeleteCourseRun"
                       asp-route-courseId="@courseRun.CourseId"
                       asp-route-courseRunId="@courseRun.CourseRunId"
                       asp-route-returnUrl="@Url.Action("Index", "ProviderCourses")">Delete course</a>


                </div>
            </div>
        }

    </div>
}

<script>
    (function ($) {
        $(function () {

            var acc = document.getElementsByClassName("accordion");
            var i;

            for (i = 0; i < acc.length; i++) {
                acc[i].addEventListener("click", function () {
                    this.classList.toggle("active");
                    var panel = this.nextElementSibling;
                    if (panel.style.display === "none") {
                        panel.style.display = "block";
                    } else {
                        panel.style.display = "none";
                    }
                });
            }
        });
    })(jQuery);
</script>







































