
@using Dfc.CourseDirectory.Web.ViewComponents.CourseName
@using Dfc.CourseDirectory.Web.ViewComponents.CourseProviderReference
@using Dfc.CourseDirectory.Web.ViewComponents.UrlInput
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Attendance
@using Dfc.CourseDirectory.Models.Models.Courses
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.DeliveryType
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.SelectVenue
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.StudyMode
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.AddStartDate
@using Dfc.CourseDirectory.Web.ViewComponents.AdvancedLearnerLoan
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Duration
@using Duration = Dfc.CourseDirectory.Web.ViewComponents.Courses.Duration.Duration
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Cost

@model Dfc.CourseDirectory.Web.ViewModels.AddCourseDetailsViewModel

<h1 class="govuk-heading-l" style="padding-top: 20px;">
    Add course details
</h1>

<p style="padding: 15px 20px; border: 3px solid #009900;background-color:#fff;" id="qual--">Qualification added:<br> @Model.LearnAimRefTitle<br> Level: @Model.NotionalNVQLevelv2<br> Awarding organisation: @Model.AwardOrgCode<br> LARS/QAN: @Model.LearnAimRef</p>

<form asp-controller="Courses" asp-action="AddCourse" id="addCourseSection2">

    @await Component.InvokeAsync(nameof(CourseName), new CourseNameModel
    {
        CourseName = Model.CourseName,
        LabelText = "Course name",
        HintText = "This is the name people will see when they search for your course.",
        AriaDescribedBy = "Please enter the course name."
    })

    @await Component.InvokeAsync(nameof(CourseProviderReference), new CourseProviderReferenceModel
    {
        LabelText = "ID",
        HintText = "This is how you identify a course in your internal system.",
        AriaDescribedBy = "Please enter the ID for this course"
    })

    @await Component.InvokeAsync(nameof(DeliveryType), new DeliveryTypeModel
    {
       DeliveryMode = DeliveryMode.ClassroomBased,
       LabelText = "Delivery Mode",
       HintText = "Select how this course will be delivered",
       AriaDescribedBy = "How the course will be delivered"
    })

    @await Component.InvokeAsync(nameof(AddStartDate), new AddStartDateModel()
    {
        StartDateType = StartDateType.SpecifiedStartDate,
        DayAriaDescribedBy = "",
        DayLabelText = "Day",
        MonthAriaDescribedBy = "",
        MonthLabelText = "Month",
        YearAriaDescribedBy = "",
        YearLabelText = "Year",
        AriaDescribedBy = "",
        SpecifiedDateHintText = "e.g. 'For example, 30 9 2019",
        FlexibleDateHintText = "Or select a flexible start date:",
        LabelText = "Start date"
    })
    
    @*No view component here in order to get checkbox list validation to work without it's own form*@
    <div class="govuk-form-group" id="VenueItemsCheckboxList">
        <label class="govuk-label" for="select-venue">
            @Model.SelectVenue.LabelText
        </label>
        <span id="select-venue-hint" class="govuk-hint">
            @Model.SelectVenue.HintText
        </span>
        <span class="govuk-error-message field-validation-error" id="invalidVenuesChecked" style="display: none;margin-bottom: 15px;">
            <span id="invalidVenuesCheckedMessage" class="">Select a venue.</span>
        </span>

        <div class="govuk-grid-row">
            <div class="govuk-grid-column-full">
                <div class="govuk-checkboxes" id="SelectVenueCheckBoxes">
                    @{ var i = 0; }
                    @if (Model.SelectVenue.VenueItems.Count() == 1)
                    {
                        <div class="govuk-checkboxes__item">
                            <input class="govuk-checkboxes__input" id="VenueName-@i" name="SelectedVenues" type="checkbox" value="@Model.SelectVenue.VenueItems.First().Id" checked="checked" onclick="return false;" />
                            <label class="govuk-label govuk-checkboxes__label" for="SelectedVenues">@Model.SelectVenue.VenueItems.First().VenueName</label>
                        </div>
                    }
                    else
                    {
                         foreach (var item in Model.SelectVenue.VenueItems)
                         {
                             i++;
                             <div class="govuk-checkboxes__item">
                                 <input class="govuk-checkboxes__input" id="VenueName-@i" name="SelectedVenues" type="checkbox" value="@item.Id"/>
                                 <label class="govuk-label govuk-checkboxes__label" for="SelectedVenues">@item.VenueName</label>
                             </div>
                         }
                    }
                </div>
            </div>
        </div>
    </div>

    @await Component.InvokeAsync(nameof(UrlInput), new UrlInputModel
    {
        LabelText = "URL",
        HintText = "Enter the URL for this course",
        AriaDescribedBy = "Enter the URL for this course"
    })

    @await Component.InvokeAsync(nameof(Cost), new CostModel
    {
        CostLabelText = "Cost",
        CostHintText = "Enter the cost for the course in pounds and pence e.g. 125.00",
        CostAriaDescribedBy = "Enter the cost in pounds and pence",
        CostDescriptionLabelText = "Cost description",
        CostDescriptionHintText = "Enter details related to the cost of this course",
        CostDescriptionAriaDescribedBy = "Enter details of related to the cost of this course"
    })


    @await Component.InvokeAsync(nameof(AdvancedLearnerLoan), new AdvancedLearnerLoanModel
    {
        LabelText = "Advanced learner loan",
        HintText = "Select the checkbox below if Advanced Learner Loans are available for this course",
        AriaDescribedBy = "Select whether Advanced Learner Loan is available for this course"
    })

    @await Component.InvokeAsync(nameof(Duration), new DurationModel
    {

        DurationUnits = new List<DurationUnitModel>()
        {

            new DurationUnitModel()
            {
                Id = 1,
                DurationUnit = "Days"
            },
            new DurationUnitModel()
            {
                Id = 2,
                DurationUnit = "Weeks"
            },
            new DurationUnitModel()
            {
                Id = 3,
                DurationUnit = "Months"
            },
            new DurationUnitModel()
            {
                Id = 4,
                DurationUnit = "Years"
            }
        },
        Id = 3,
        LabelText = "Duration",
        HintText = "Select the duration of the course",
        AriaDescribedBy = "Select course duration"
    })

    <div id="FullPartTimeRadioButtons">
        @await Component.InvokeAsync(nameof(Dfc.CourseDirectory.Web.ViewComponents.Courses.StudyMode.StudyMode), new StudyModeModel
        {
            StudyMode = Dfc.CourseDirectory.Models.Models.Courses.StudyMode.FullTime,
            LabelText = "Full time or part time",
            HintText = "Select the attendance pattern"
        })
    </div>
    <div id="AttendancePatternRadioButtons">
        @await Component.InvokeAsync(nameof(Attendance), new AttendanceModel
        {
            AttendanceMode = AttendancePattern.Daytime,
            LabelText = "Attendance",
            HintText = "Select the time of day the course takes place"
        })
    </div>
    <div class="govuk-form-group">
        <button type="submit" class="govuk-button" id="publish">
            Publish
        </button>
    </div>

</form>

<script>
    (function ($) {
        $(function () {

            var $formGroupErrorClass = "govuk-form-group--error";
            var $elementErrorClass = "govuk-input--error";

            var $dayElementUrl = $("#@nameof(Model.Day)");

            var $monthElementUrl = $("#@nameof(Model.Month)");

            var $yearElementUrl = $("#@nameof(Model.Year)");

            var $validationMessageUrlForDay = $("#invalidDay");

            var $validationMessageUrlForMonth = $("#invalidMonth");

            var $validationMessageUrlForYear = $("#invalidYear");

            var $validationMessageForPast = $("#past");
            var $validationMessageForFuture = $("#future");

            var $validationMessageForRequired= $("#required");

            var $formGroupUrl = $dayElementUrl.closest('.govuk-form-group');



            var $elementCostDescription = $("#@nameof(Model.CostDescription)");

            var $elementCost = $("#@nameof(Model.Cost)");
            var $formGroupCost = $elementCost.closest('.govuk-form-group');

            var $validationMessageForCost= $("#invalidCost");
            var $validationMessageForCostLength = $("#invalidCostLength");

            var $checkboxes = $("#SelectVenueCheckBoxes input[type=checkbox]");
            var $formVenuesIsValid = false;
            var $formStartDateIsValid = false;
            var $formCostIsValid = false;

            var $deliveryRadios = $("#DeliveryModeRadioButtons input[type=radio]");

            $deliveryRadios.change(function () {
                var $venueItemsCheckboxList = $("#VenueItemsCheckboxList");
                var $fullPartTimeRadioButtons = $("#FullPartTimeRadioButtons");
                var $attendancePatternRadioButtons = $("#AttendancePatternRadioButtons");
                var $specifiedStartDate = $("#SpecifiedStartDate");
                var $flexibleStartDate = $("#FlexibleStartDate");

                $venueItemsCheckboxList.toggle();
                $fullPartTimeRadioButtons.toggle();
                $attendancePatternRadioButtons.toggle();

                switch (this.id) {
                    case "ClassroomBased":
                        {
                            $specifiedStartDate.prop("checked", true);
                            $flexibleStartDate.prop("checked", false);
                            break;
                        }
                    case "Online":
                        {
                            $flexibleStartDate.prop("checked", true);
                            $specifiedStartDate.prop("checked", false);
                            break;
                        }
                }

           
            });
            $checkboxes.change(function () {
                var $validationMessageForVenues = $("#invalidVenuesChecked");
                var $venueItemsCheckboxList = $("#VenueItemsCheckboxList");
                var $formGroupVenues = $venueItemsCheckboxList.closest('.govuk-form-group');
                var countedCheckedCheckboxes = $checkboxes.filter(':checked').length;
                if (countedCheckedCheckboxes === 0) {
                    $formGroupVenues.addClass("govuk-form-group--error");
                    $validationMessageForVenues.show();
                    $formVenuesIsValid = false;
                } else {
                    $formGroupVenues.removeClass("govuk-form-group--error");
                    $validationMessageForVenues.hide();
                    $formVenuesIsValid = true;
                }
            });

            var $publish = $("#publish");
            $publish.on("click",
                function(e) {
                    e.preventDefault();
                    $checkboxes.trigger("change");

                    var $courseName = $("#@nameof(Model.CourseName)");
                    $courseName.trigger("blur");

                    if ($elementCost.val() === "") {
                        if ($elementCostDescription.val() === "") {
                            $elementCost.addClass($elementErrorClass);
                            $validationMessageForCost.show();
                            $formGroupCost.addClass($formGroupErrorClass);
                            $formCostIsValid = false;
                        } else {
                            $elementCost.removeClass($elementErrorClass);
                            $validationMessageForCost.hide();
                            $formGroupCost.removeClass($formGroupErrorClass);
                            $formCostIsValid = true;
                        }
                    } else {

                        $validationMessageForCost.hide();
                        $formGroupCost.removeClass($formGroupErrorClass);

                        if ($elementCost.val().length < 1 || $elementCost.val().length > 9) {
                            $elementCost.addClass($elementErrorClass);
                            $validationMessageForCostLength.show();
                            $formGroupCost.addClass($formGroupErrorClass);
                            $formCostIsValid = false;
                        } else {
                            $elementCost.removeClass($elementErrorClass);
                            $validationMessageForCostLength.hide();
                            $formGroupCost.removeClass($formGroupErrorClass);
                            $formCostIsValid = true;
                        }
                    }

                    var $durationLength =  $("#@nameof(Model.DurationLength)");
                    $durationLength.trigger("blur");

                    var radioValue = $("input[name='StartDateType']:checked").val();
                    if (radioValue.toUpperCase() === "SPECIFIEDSTARTDATE") {
                        $validationMessageForRequired.hide();

                        if ($dayElementUrl.val() !== "" &&
                            $monthElementUrl.val() !== "" &&
                            $yearElementUrl.val() !== "") {

                            $formStartDateIsValid = true;
                        }

                        if ($dayElementUrl.val() === "" &&
                            $monthElementUrl.val() === "" &&
                            $yearElementUrl.val() === "") {

                            $formGroupUrl.addClass($formGroupErrorClass);
                            $validationMessageForRequired.show();
                            $formStartDateIsValid = false;
                        }

                        if ($dayElementUrl.val() === "" ||
                            parseInt($dayElementUrl.val()) < 1 ||
                            parseInt($dayElementUrl.val()) > 31) {
                            $dayElementUrl.addClass($elementErrorClass);
                            $formGroupUrl.addClass($formGroupErrorClass);
                            $validationMessageUrlForDay.show();
                            $formStartDateIsValid = false;
                        }


                        if ($monthElementUrl.val() === "" ||
                            parseInt($monthElementUrl.val()) < 1 ||
                            parseInt($monthElementUrl.val()) > 12) {
                            $monthElementUrl.addClass($elementErrorClass);
                            $formGroupUrl.addClass($formGroupErrorClass);
                            $validationMessageUrlForMonth.show();
                            $formStartDateIsValid = false;
                        }


                        if (($yearElementUrl.val().length) < 4 || ($yearElementUrl.val().length) > 4) {
                            $yearElementUrl.addClass($elementErrorClass);
                            $formGroupUrl.addClass($formGroupErrorClass);
                            $validationMessageUrlForYear.show();
                            $formStartDateIsValid = false;
                        }


                        if ($dayElementUrl.val() !== "" &&
                            $monthElementUrl.val() !== "" &&
                            $yearElementUrl.val() !== "") {
                            var enteredDate = $dayElementUrl.val() +
                                "/" +
                                $monthElementUrl.val() +
                                "/" +
                                $yearElementUrl.val();
                            $validationMessageForFuture.hide();
                            $validationMessageForPast.hide();
                            var d = new Date();
                            var currentDate =
                                d.getDate() +
                                    "/" +
                                    (d.getMonth() + 1) +
                                    "/" +
                                    (d.getFullYear());

                            var futureDate =
                                d.getDate() +
                                    "/" +
                                    (d.getMonth() + 1) +
                                    "/" +
                                    (d.getFullYear() + 2);

                            if (Date.parse(enteredDate) - Date.parse(currentDate) < 0) {
                                $formGroupUrl.addClass($formGroupErrorClass);
                                $validationMessageForPast.show();
                                $formStartDateIsValid = false;
                            } else {
                                if (Date.parse(enteredDate) > Date.parse(futureDate)) {
                                    $formGroupUrl.addClass($formGroupErrorClass);
                                    $validationMessageForFuture.show();
                                    $formStartDateIsValid = false;

                                } else {
                                    $validationMessageForFuture.hide();
                                    $validationMessageForPast.hide();
                                }
                            }
                        }


                    } else {
                        $dayElementUrl.removeClass($elementErrorClass);
                        $monthElementUrl.removeClass($elementErrorClass);
                        $yearElementUrl.removeClass($elementErrorClass);
                        $formGroupUrl.removeClass($formGroupErrorClass);
                        $validationMessageUrlForDay.hide();
                        $validationMessageUrlForMonth.hide();
                        $validationMessageUrlForYear.hide();
                        $validationMessageForPast.hide();
                        $validationMessageForFuture.hide();
                        $validationMessageForRequired.hide();
                        $formStartDateIsValid = true;
                    }

                    if ($formVenuesIsValid & $formCostIsValid & $formStartDateIsValid) {
                        $("#addCourseSection2").submit();
                    }
                });
        });
    })(jQuery);
</script>