@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@using Dfc.CourseDirectory.Web.ViewComponents.ProviderApprenticeships.ProviderApprenticeshipSearch
@using Dfc.CourseDirectory.Web.ViewComponents.ProviderApprenticeships.ProviderApprenticeshipSearchResult
@{
    Layout = "_Layout_Your_Courses";
}

@model Dfc.CourseDirectory.Web.ViewModels.ProviderApprenticeships.ProviderApprenticeshipsViewModel
@{
    var hasApprenticeships = Model.Apprenticeships != null && Model.Apprenticeships.Any();
}


        <div class="content-container">
            <div class="" data-sf-element="Row">
                <div class="govuk-grid-column">



                    <div>
                        <span class="govuk-caption-xl">Course directory</span>
                        @Html.HiddenFor(x => x.ApprenticeshipId)
                        @if (!string.IsNullOrEmpty(@ViewBag.Message))
                        {
                            @await Component.InvokeAsync(nameof(Notification), new NotificationModel
                            {
                                NotificationTitle = "Apprenticeship updated",
                                NotificationMessage = @ViewBag.Message,
                                ClassType = "info-summary"
                            })
                        }
                        <h1 class="govuk-heading-xl">Your published apprenticeship training courses</h1>


                        <p id="SearchLabel" class="govuk-body-l">Search by apprenticeship name or keyword</p>
                    </div>
                    <form class="govuk-!-margin-bottom-9" id="ProviderApprenticeshipSearchForm" asp-controller="" asp-action="" method="post">
                        <div class="header-search-content">
                            <span asp-validation-for="@Model.Search" class="govuk-error-message"></span>
                            <div class="search-input-wrapper">


                                <input class="govuk-input search-input js-search-focus" id="ProviderApprenticeshipSearchTerm" asp-for="@Model.Search" type="text" aria-labelledby="SearchLabel">
                                <div class="cd-c-search__item cd-search__submit-wrapper">
                                    <button type="button" class=" submit" id="searchProviderApprenticeships">Search</button>
                                </div>
                            </div>
                        </div>
                    </form>


                    <div id="results">
                        @if (hasApprenticeships)
                        {
                            @await Component.InvokeAsync(nameof(ProviderApprenticeshipSearchResult), new ProviderApprenticeshipsSearchResultModel
                            {
                                Items = Model.Apprenticeships
                            });
                        }

                    </div>


                </div>
            </div>
        </div>

<script>
    (function ($) {
        $(function () {
            var $buttonSearch = $("#searchProviderApprenticeships");
            var $elementSearchTerm = $("#ProviderApprenticeshipSearchTerm");



            var doSearch = function () {
                $(".cd-info-summary").hide();

                var isNullOrWhitespace = function (input) {
                    if (typeof input === 'undefined' || input == null) return true;
                    return input.replace(/\s/g, '').length < 3;
                }

                var makeRequestWithPayload = function (payload, success) {
                    console.log(payload);
                    var qs = $.param(payload);
                    qs = replaceAll(qs, "%5B%5D", "");
                    $.get("/ProviderApprenticeships/ProviderApprenticeshipsSearch?" + qs, success);
                };


                var onSucess = function (data) {

                    $('#results').html("");
                    $('#results').html(data);
                };

                $.get("/ProviderApprenticeships/ProviderApprenticeshipsSearch?searchTerm=" + $elementSearchTerm.val(), onSucess);

            };

            $(document).keypress(function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                    doSearch();
                }
            });

            var debounce = function (cb, delay) {
                var inDebounce;
                return function () {
                    var context = this;
                    var args = arguments;
                    clearTimeout(inDebounce);
                    inDebounce = setTimeout(function () {
                            cb.apply(context, args);
                        },
                        delay);
                };
            };

            $buttonSearch.on("click", doSearch);
            $elementSearchTerm.on("keyup", debounce(doSearch, 400));

            var $apprenticeshipUpdatedlink = $("#apprenticeshiplink");

            var apprenticeshipId = $("#@nameof(Model.ApprenticeshipId)").val();

            if (apprenticeshipId !== null) {
                if (apprenticeshipId !== "") {

                    var $apprenticeshipId = $("#" + apprenticeshipId);

                    $('html, body').animate({
                            scrollTop: $apprenticeshipId.offset().top
                        },
                        1000);
                }

            };

            $apprenticeshipUpdatedlink.on("click",
                function (event) {
                    event.preventDefault();



                    var apprenticeshipId = $(this).attr('data-apprenticeshipid');
                    var $apprenticeshipId = $("#" + apprenticeshipId);

                    if (apprenticeshipId !== "" || apprenticeshipId !== undefined) {
                        $("html,body").animate({
                            scrollTop: $apprenticeshipId.offset().top
                        }, "slow");
                    }

                });
        });
    })(jQuery);
</script>






