@using Dfc.CourseDirectory.Services.Models.Courses
@using Dfc.CourseDirectory.Web.Extensions
@using Dfc.CourseDirectory.Web.ViewComponents.Summary.SummaryList
@using Dfc.CourseDirectory.Web.ViewComponents.Summary.SummaryComponent
@using Dfc.CourseDirectory.Web.Views.Shared
@using Microsoft.AspNetCore.Http

@model AddCourseSummaryViewModel

@{
    Context.Session.SetObject("SummaryLoadedAtLeastOnce", true);
    ViewData["Title"] = "Check and publish to the Course directory";
    Layout = "_Layout_Your_Courses";

    ViewData.SetLayoutModel(new LayoutModel
    {
        BackLink = false,
    });
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-xl">Check and publish your course</h1>

        <h2 class="govuk-heading-l">
            @Model.LearnAimRef Level @Model.NotionalNVQLevelv2 @Model.LearnAimRefTitle
        </h2>

        <h3 class="govuk-heading-m">Course details</h3>

        <form asp-controller="AddCourse" asp-action="AcceptAndPublish" id="addCourseSummaryPage">
            <dl class="govuk-summary-list govuk-!-margin-bottom-9">
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id = "CourseName", Title = "Course name", Value = Model.CourseName,
                    Action = "SummaryToAddCourseRun",
                    Controller = "AddCourse",
                    Section = "sectionCourseName"
                })
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id = "CourseId", Title = "Your reference", Value = Model.CourseId,
                    Action = "SummaryToAddCourseRun",
                    Controller = "AddCourse",
                    Section = "sectionCourseProviderReference"
                })

                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="DeliveryMode", Title = "Course type", Value = Model.DeliveryMode,
                    Action = "SummaryToAddCourseRun",
                    Controller = "AddCourse",
                    Section = "sectionDeliveryType"
                })

                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="StartDate", Title = "Start date", Value = Model.StartDate,
                    Action = "SummaryToAddCourseRun",
                    Controller = "AddCourse",
                    Section = "sectionStartDate"
                })

                @{
                    if (Model.DeliveryModeEnum == DeliveryMode.ClassroomBased)
                    {
                        @await Component.InvokeAsync(nameof(SummaryList), new SummaryListModel
                        {
                            Id = "Venues", Title = "Venue", Value = Model.Venues,
                            Action = "SummaryToAddCourseRun",
                            Controller = "AddCourse",
                            Section = "VenueItemsCheckboxList"
                        })
                    }
                    if (Model.DeliveryModeEnum == DeliveryMode.WorkBased)
                    {
                        @await Component.InvokeAsync(nameof(SummaryList), new SummaryListModel
                        {
                            Id = "Regions", Title = "Regions", Value = Model.Regions,
                            Action = "SummaryToAddCourseRun",
                            Controller = "AddCourse",
                            Section = "RegionItemsCheckboxList"
                        })
                    }
                }

                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="Url", Title = "Course webpage", Value = Model.Url,
                    Action = "SummaryToAddCourseRun",
                    Controller = "AddCourse",
                    Section = "sectionUrl"
                })
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="Cost", Title = "Cost", Value = string.IsNullOrWhiteSpace(Model.Cost) ? Model.Cost : "£" + Model.Cost,
                    Action = "SummaryToAddCourseRun",
                    Controller = "AddCourse",
                    Section = "sectionCost"
                })
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="CostDesc", Title = "Cost description", Value = Model.CostDescription,
                    Action = "SummaryToAddCourseRun",
                    Controller = "AddCourse",
                    Section = "sectionCost"
                })
                @*@await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="AdvancedLearnerLoan", Title = "Advanced learner loan", Value = Model.AdvancedLearnerLoan,
                    Action = "SummaryToAddCourseRun",
                    Controller = "AddCourse",
                    Section = "sectionAdvancedLearnerLoan"
                })*@
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="CourseLength", Title = "Duration", Value = Model.CourseLength,
                    Action = "SummaryToAddCourseRun",
                    Controller = "AddCourse",
                    Section = "sectionDuration"
                })

                @if (Model.DeliveryModeEnum == DeliveryMode.ClassroomBased)
                {
                    @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                    {
                        Id = "AttendancePattern", Title = "Course hours", Value = Model.AttendancePattern,
                        Action = "SummaryToAddCourseRun",
                        Controller = "AddCourse",
                        Section = "FullPartTimeRadioButtons"
                    })
                    @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                    {
                        Id = "AttendanceTime", Title = "Attendance pattern", Value = Model.AttendanceTime,
                        Action = "SummaryToAddCourseRun",
                        Controller = "AddCourse",
                        Section = "AttendancePatternRadioButtons"
                    })
                }
            </dl>

            <h3 class="govuk-heading-m">Course description</h3>

            <dl class="govuk-summary-list govuk-!-margin-bottom-9">
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="WhoCourseFor", Title = "Who this course is for", Value = Model.WhoIsThisCourseFor,
                    Action = "SummaryToAddCourse",
                    Controller = "AddCourse",
                    Section = "sectionCourseFor"
                })
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="EntryRequirements", Title = "Entry requirements", Value = Model.EntryRequirements,
                    Action = "SummaryToAddCourse",
                    Controller = "AddCourse",
                    Section = "sectionEntryRequirements"
                })
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="WhatWillLearn", Title = "What you'll learn", Value = Model.WhatYouWillLearn,
                    Action = "SummaryToAddCourse",
                    Controller = "AddCourse",
                    Section = "sectionWhatWillLearn"
                })
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="HowWillLearn", Title = "How you'll learn", Value = Model.HowYouWillLearn,
                    Action = "SummaryToAddCourse",
                    Controller = "AddCourse",
                    Section = "sectionHowYouWillLearn"
                })
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="WhatYouNeedBring", Title = "What you'll need to bring", Value = Model.WhatYouWillNeedToBring,
                    Action = "SummaryToAddCourse",
                    Controller = "AddCourse",
                    Section = "sectionWhatYouNeed"
                })
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="HowAssessed", Title = "How you'll be assessed", Value = Model.HowAssessed,
                    Action = "SummaryToAddCourse",
                    Controller = "AddCourse",
                    Section = "sectionHowAssessed"
                })
                @await Component.InvokeAsync(nameof(SummaryComponent), new SummaryComponentModel
                {
                    Id="WhereNext", Title = "What you can do next", Value = Model.WhereNext,
                    Action = "SummaryToAddCourse",
                    Controller = "AddCourse",
                    Section = "sectionWhereNext"
                })
                @*@await Component.InvokeAsync(nameof(SummaryList), new SummaryListModel
               {
                   Id="FundtionOptions", Title="Funding options", Value = Model.FundingOptions,
                   Action = "SummaryToAddCourse", Controller = "AddCourse", Section = "sectionFundingOptions"
               })*@


            </dl>
            <h2 class="govuk-heading-m">Publish your course</h2>
            <p class="govuk-body">
                Your course information will be added to Publish to the course directory and available to learners
                searching for learning and training opportunities on the National Careers Service.
            <p class="govuk-body">
                By submitting this notification you are confirming that, to the best of your
                knowledge, the details you are providing are correct.
            </p>
            <div class="govuk-form-group">
                <button name="submitButton" type="submit" class="govuk-button" id="publish" value="publish">
                    Publish
                </button>
            </div>

        </form>
    </div>
</div>
