@using Dfc.CourseDirectory.Web.Extensions
@using Dfc.CourseDirectory.Web.ViewComponents.CourseName
@using Dfc.CourseDirectory.Web.ViewComponents.CourseProviderReference
@using Dfc.CourseDirectory.Web.ViewComponents.UrlInput
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Attendance
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.DeliveryType
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.StudyMode
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.AddStartDate
@using Dfc.CourseDirectory.Web.ViewComponents.AdvancedLearnerLoan
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.ChooseRegion
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Duration
@using Duration = Dfc.CourseDirectory.Web.ViewComponents.Courses.Duration.Duration
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Cost
@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@using Dfc.CourseDirectory.Web.ViewComponents.Extensions
@using Microsoft.AspNetCore.Mvc.Razor.Extensions
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Mvc.Rendering
@using Dfc.CourseDirectory.Services.Models.Courses
@using Dfc.CourseDirectory.Web.Views.Shared
@using Microsoft.AspNetCore.Html
@{
    ViewData["Title"] = "Add course details";
    Layout = "_Layout_Your_Courses";

    ViewData.SetLayoutModel(new LayoutModel
    {
        BackLink = false,
    });
}

@model AddCourseDetailsViewModel



@{
    var newVenueDescription = TempData[Dfc.CourseDirectory.WebV2.TempDataKeys.AddedVenueDescription] as string;

    if (newVenueDescription != null)
    {
        @await Component.InvokeAsync(nameof(Notification), new NotificationModel
        {
            NotificationTitle = "New venue added:",
            NotificationMessage = newVenueDescription,
            ClassType = "success-summary"
        })
    }
}

@*@await Component.InvokeAsync(nameof(Notification), new NotificationModel
{
    NotificationTitle = "",
    NotificationMessage = @Model.LearnAimRefTitle + "<br>" + "Level: " + @Model.NotionalNVQLevelv2 + "<br> Awarding organisation: " + @Model.AwardOrgCode + "<br> LARS / QAN: " + @Model.LearnAimRef,
    ClassType = "info-summary"
})*@

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-xl">
                                        Course details
                                        </h1>
        <p class="govuk-body-l">Add information on how the course will be delivered.</p>
        <form asp-controller="AddCourse" asp-action="AddCourseRun" id="addCourseSection2">

        <div id="errorsummary" class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary" style="display: none;">
            <h2 class="govuk-error-summary__title" id="error-summary-title">
                There is an issue with this qualification
            </h2>
            <div class="govuk-error-summary__body">
                <ul class="govuk-list govuk-error-summary__list"></ul>
            </div>
        </div>

        @Html.HiddenFor(x => x.CourseMode)
        @Html.HiddenFor(x => x.CourseId)
        @Html.HiddenFor(x => x.CourseRunId)
        <div id="sectionCourseName">
            @await Component.InvokeAsync(nameof(CourseName), new CourseNameModel
            {
                CourseName = Model.CourseName,
                LabelText = "Course name",
                HintText = new HtmlString(@"The course name displayed on the National Career Service,
                                            <a href='https://nationalcareers.service.gov.uk/find-a-course/search'
                                               target='_blank'>Find a course</a>."),
                AriaDescribedBy = "Please enter the course name."
            })
        </div>

        <div id="sectionCourseProviderReference">
            @await Component.InvokeAsync(nameof(CourseProviderReference), new CourseProviderReferenceModel
            {
                CourseProviderReference = Model.CourseProviderReference,
                LabelText = "Your reference",
                HintText = "A reference that will help you identify this course in your internal systems. This will not be visible to learners.",
                AriaDescribedBy = "Please enter the ID for this course"
            })
        </div>

        <div id="sectionDeliveryType">
            @await Component.InvokeAsync(nameof(DeliveryType), new DeliveryTypeModel
            {
                DeliveryMode = Model.DeliveryMode,
                LabelText = "Course type",
                HintText = "Select one option.",
                SecondHintText = "Select how you will deliver this course",
                AriaDescribedBy = "Select how you will deliver this course"
            })
        </div>

        <div id="sectionStartDate">
            @await Component.InvokeAsync(nameof(AddStartDate), new AddStartDateModel()
            {
                StartDateType = Model.StartDateType,
                Day = Model.Day,
                Month = Model.Month,
                Year = Model.Year,
                DayAriaDescribedBy = "",
                DayLabelText = "Day",
                MonthAriaDescribedBy = "",
                MonthLabelText = "Month",
                YearAriaDescribedBy = "",
                YearLabelText = "Year",
                AriaDescribedBy = "",
                SpecifiedDateHintText = "",
                FlexibleDateHintText = "Or select a flexible start date:",
                LabelText = "Start date",
                ValPastDateRef = DateTime.Now,
                ValPastDateMessage = "Start Date cannot be earlier than today’s date"
            })
        </div>
        <div class="govuk-form-group" id="VenueItemsCheckboxList" style="@Model.DeliveryMode.IfNotClassroomBasedDisplayNone()">
            <div class="govuk-form-group">
                <fieldset class="govuk-fieldset" id="govuk-label-SelectVenueCheckBoxes">
                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                        <h2 class="govuk-fieldset__heading govuk-heading-m">
                            @Model.SelectVenue.LabelText
                        </h2>
                    </legend>

                    <div class="govuk-checkboxes govuk-checkboxes--small" id="SelectVenueCheckBoxes" val-required-message="Select a venue">




                        @{ var i = 0; }
                        @if (Model.SelectVenue.VenueItems.Count() == 1)
                        {
                            <div class="govuk-checkboxes__item">
                                <input class="govuk-checkboxes__input" id="VenueName-@i" for="VenueName-@i" name="SelectedVenues" type="checkbox" aria-labelledby="VenueNameLabel-@i" value="@Model.SelectVenue.VenueItems.First().Id" checked="checked" onclick="return false;" />
                                <label id="VenueNameLabel-@i" class="govuk-label govuk-checkboxes__label" for="VenueName-@i" aria-label="VenueName-@i">@Model.SelectVenue.VenueItems.First().VenueName</label>
                            </div>
                        }
                        else
                        {
                            foreach (var item in Model.SelectVenue.VenueItems)
                            {
                                i++;
                                <div class="govuk-checkboxes__item">
                                    <input class="govuk-checkboxes__input" id="VenueName-@i" for="VenueName-@i" name="SelectedVenues" type="checkbox" aria-labelledby="VenueNameLabel-@i" value="@item.Id" @item.Checked.ThenNullableCheck() />
                                    <label id="VenueNameLabel-@i" class="govuk-label govuk-checkboxes__label" for="SelectedVenues-@i" aria-label="VenueName-@i">@item.VenueName</label>
                                </div>


                            }
                        }

                    </div>

                </fieldset>
            </div>
            <span class="">
                <a href="#" class="govuk-link--no-visited-state" id="addNewVenue">Add another venue</a>
            </span>
        </div>







        <div class="govuk-form-group" id="RegionItemsCheckboxList" style="@Model.DeliveryMode.IfNotWorkBasedDisplayNone()">
            <div id="sectionRegions">
                @await Component.InvokeAsync(nameof(ChooseRegion), Model.ChooseRegion)
            </div>
        </div>

        <div id="sectionUrl">
            @await Component.InvokeAsync(nameof(UrlInput), new UrlInputModel
            {
                Url = Model.Url,
                LabelText = "Course webpage",
                HintText = "The webpage for this course. For example, http://www.provider.com/coursename.",
                AriaDescribedBy = "Enter the URL for this course"
            })
        </div>

        <div id="sectionCost">
            @await Component.InvokeAsync(nameof(Cost), new CostModel
            {
                Cost = Model.Cost,
                CostDescription = Model.CostDescription,
                CostLabelText = "Cost",
                CostHintText = "Cost of the course to the learner.",
                CostAriaDescribedBy = "Enter the cost in pounds and pence",
                CostDescriptionLabelText = "Cost description",
                CostDescriptionHintText = "A description of what the cost includes and additional costs to the learner. For example, assessment, exam fees or study materials.",
                CostDescriptionAriaDescribedBy = "Enter details of related to the cost of this course"
            })
        </div>

        <div id="sectionDuration">
            @await Component.InvokeAsync(nameof(Duration), new DurationModel
            {
                DurationLength = Model.DurationLength,
                DurationUnit = Model.DurationUnit,
                LabelText = "Duration",
                HintText = "",
                AriaDescribedBy = "Select course duration"
            })
        </div>

        <div id="FullPartTimeRadioButtons" style="display: none;">
            @await Component.InvokeAsync(nameof(Dfc.CourseDirectory.Web.ViewComponents.Courses.StudyMode.StudyMode), new StudyModeModel
            {
                StudyMode = Model.StudyMode,
                LabelText = "Course hours",
                HintText = "Select one option."
            })
        </div>

        <div id="AttendancePatternRadioButtons" style="display: none;">
            @await Component.InvokeAsync(nameof(Attendance), new AttendanceModel
            {
                AttendanceMode = Model.AttendanceMode,
                LabelText = "Attendance pattern",
                HintText = "Select one option."
            })
        </div>

        <button name="submitButton" type="submit" class="govuk-button" id="publish" value="publish">Continue</button>

        </form>
    </div>
</div>

<script>
    (function($) {
        $(function () {
            var $addNewVenueButton = $("#addNewVenue");
            var validStates = [];
            var $button = $("#publish");
            var $errorSummary = $("#errorsummary").govUkErrorSummary();
            var $courseName = $("#@nameof(Model.CourseName)").govUkInput();
            var $courseProviderReference = $("#@nameof(Model.CourseProviderReference)").govUkInput();
            var $deliveryRadios = $("#DeliveryModeRadioButtons input[type=radio]");
            var $radioDeliveryMode = $("#DeliveryModeRadioButtons").govUkRadios();
            var $startDate = $("#start_date").govUkDateInput();
            var $venues = $("#SelectVenueCheckBoxes").govUkCheckboxes();
            var $regions = $("#SelectRegionCheckBoxes").govUkCheckboxes();
            var $url = $("#@nameof(Model.Url)").govUkInput();
            var $cost = $("#@nameof(Model.Cost)").govUkInput();
            var $costDescription = $("#@nameof(Model.CostDescription)").govUkTextarea();
            var $duration = $("#duration").govUkDurationInput();
            var $studyMode = $("#StudyModeRadioButtons").govUkRadios();
            var $attendance = $("#AttendanceRadioButtons").govUkRadios();
            var $regionItemsCheckboxList = $("#RegionItemsCheckboxList");
            var $fullPartTimeRadioButtons = $("#FullPartTimeRadioButtons");
            var $attendancePatternRadioButtons = $("#AttendancePatternRadioButtons");
            var $national = $("#nationalRadioButtons").govUkCheckboxes();
            var isClassroomBased = true;
            var isOnline = false;
            var isWorkBased = false;
            var $startDateRadios = $("#StartDateOptions input[type=radio]");
            var $radioStartDate = $("#StartDateOptions").govUkRadios();



            switch ($radioStartDate.find("input[type='radio']:checked").val()) {
            case "SpecifiedStartDate":
            {

                break;
            }
            case "FlexibleStartDate":
            {
                $("#govuk-label-start_date").hide();
                $("#Day").val("");
                $("#Month").val("");
                $("#Year").val("");
                break;
            }

            }

            switch ($radioDeliveryMode.find("input[type='radio']:checked").val()) {
                case "ClassroomBased":
                    {
                        $fullPartTimeRadioButtons.show();
                        $attendancePatternRadioButtons.show();
                        isClassroomBased = true;
                        isOnline = false;
                        isWorkBased = false;
                        break;
                    }
                case "Online":
                    {
                        $fullPartTimeRadioButtons.hide();
                        $attendancePatternRadioButtons.hide();
                        isClassroomBased = false;
                        isOnline = true;
                        isWorkBased = false;
                        break;
                    }
                case "WorkBased":
                    {
                        $fullPartTimeRadioButtons.hide();
                        $attendancePatternRadioButtons.hide();
                        isClassroomBased = false;
                        isOnline = false;
                        isWorkBased = true;
                        break;
                    }
            }

            switch ($radioStartDate.find("input[type='radio']:checked").val()===true) {
            case "SpecifiedStartDate":
            {
                $("#govuk-label-start_date").show();
                break;
            }
            case "FlexibleStartDate":
            {
                $("#govuk-label-start_date").hide();
                break;
            }

            }



            function isAllValid(currentValue) {
                return currentValue === true;
            }



            function validate() {

                validStates = [];
                $errorSummary.govUkErrorSummary("removeAll");
                $courseName.govUkInput("validState");
                $courseProviderReference.govUkInput("validState");
                $radioDeliveryMode.govUkRadios("validState");
                $startDate.govUkDateInput("validState");
                $duration.govUkDurationInput("validState");
                $venues.govUkCheckboxes("validState");
                $regions.govUkCheckboxes("validState");
                $url.govUkInput("validState");
                $cost.govUkInput("validState");
                $costDescription.govUkTextarea("validState");
                $studyMode.govUkRadios("validState");
                $attendance.govUkRadios("validState");

                if ($.requiredValidate($radioDeliveryMode.find("input[type=radio]:checked").val())) {
                    $radioDeliveryMode.govUkRadios("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $radioDeliveryMode[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                } else {
                    $radioDeliveryMode.govUkRadios("invalidState", $radioDeliveryMode.attr("val-required-message"));
                    var radioDeliveryModeErrorHashLinks = $radioDeliveryMode.govUkRadios("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", radioDeliveryModeErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                // course name
                if (!$.requiredValidate($courseName.val())) {
                    $courseName.govUkInput("invalidState", $courseName.attr("val-required-message"));
                    var courseNameErrorHashLinks = $courseName.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $courseName.attr("val-regex") }, $courseName.val())) {
                    $courseName.govUkInput("invalidState", $courseName.attr("val-regex-message"));
                    var courseNameErrorHashLinks = $courseName.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $courseName.attr("val-max-length") }, $courseName.val())) {
                    $courseName.govUkInput("invalidState", $courseName.attr("val-max-length-message"));
                    var courseNameErrorHashLinks = $courseName.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $courseName.govUkInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $courseName[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                // provider reference (id)
                if (!$.regexValidate({ regex: $courseProviderReference.attr("val-regex") }, $courseProviderReference.val())) {
                    $courseProviderReference.govUkInput("invalidState", $courseProviderReference.attr("val-regex-message"));
                    var courseProviderReferenceErrorHashLinks = $courseProviderReference.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseProviderReferenceErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $courseProviderReference.attr("val-max-length") }, $courseProviderReference.val())) {
                    $courseProviderReference.govUkInput("invalidState", $courseProviderReference.attr("val-max-length-message"));
                    var courseProviderReferenceErrorHashLinks = $courseProviderReference.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseProviderReferenceErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $courseProviderReference.govUkInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $courseProviderReference[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                // delivery mode
                if ($.requiredValidate($radioDeliveryMode.find("input[type='radio']:checked").val())) {
                    $radioDeliveryMode.govUkRadios("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $radioDeliveryMode[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                } else {
                    $radioDeliveryMode.govUkRadios("invalidState", $radioDeliveryMode.attr("val-required-message"));
                    var deliveryModeErrorHashLinks = $radioDeliveryMode.govUkRadios("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", deliveryModeErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                // start date
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $startDate[0].id);
                var radioValue = $("input[name='StartDateType']:checked").val();
                if (radioValue.toUpperCase() === "SPECIFIEDSTARTDATE") {
                    var startDateValue = $startDate.govUkDateInput("getISODateString");
                    if (startDateValue === "") {
                        $startDate.govUkDateInput("invalidState", $startDate.attr("val-required-message"));
                        var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                        validStates.push(false);
                    } else {
                        if (!$.dateValidate(startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-date-message"));
                            var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                            validStates.push(false);
                        } else if ($.pastDateValidate({ ref: $startDate.attr("val-past-date-ref") }, startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-past-date-message"));
                            var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                            validStates.push(false);
                        } else if ($.futureDateValidate({ ref: $startDate.attr("val-future-date-ref") }, startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-future-date-message"));
                            var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                            validStates.push(false);
                        } else if ($.dateValidate(startDateValue)) {
                            $startDate.govUkDateInput("validState");
                            //$errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $startDate[0].id);
                            $errorSummary.govUkErrorSummary("hideIfEmpty")
                            validStates.push(true);
                        }
                    }
                }

                // venue
                $venues.govUkCheckboxes("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $venues[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                validStates.push(true);
                if (isClassroomBased && !$.requiredValidate($venues.find("input[type='checkbox']:checked").val()) && $radioDeliveryMode.find("input[type='radio']:checked").val() == "ClassroomBased") {
                    $venues.govUkCheckboxes("invalidState", $venues.attr("val-required-message"));
                    var venuesErrorHashLinks = $venues.govUkCheckboxes("getErrorHashLinks");

                    $errorSummary.govUkErrorSummary("add", venuesErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                // regions
                $regions.govUkCheckboxes("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $regions[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                var $nationalRadioChecked = $("#nationalRadioButtons input[type=radio]:checked").val();

                $national.govUkCheckboxes("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $national[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty");
                validStates.push(true);
                if ($nationalRadioChecked == undefined && isWorkBased) {
                    $national.govUkCheckboxes("invalidState", $national.attr("val-required-message"));
                    var nationalErrorHashLinks = $national.govUkCheckboxes("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", nationalErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }
                validStates.push(true);
                if ($nationalRadioChecked != undefined ) {
                if (isWorkBased & !$.requiredValidate($regions.find("input[type='checkbox']:checked").val()) & $nationalRadioChecked.toLowerCase() === "false") {
                    $regions.govUkCheckboxes("invalidState", $regions.attr("val-required-message"));
                    var regionsErrorHashLinks = $regions.govUkCheckboxes("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", regionsErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                    }
                }

                // url
                var enteredUrl = $url.val();
                var urlToValidate = "";
                if ($url.val().indexOf("http")>=0) {
                    urlToValidate = enteredUrl.substring(enteredUrl.indexOf("//") + 2, enteredUrl.length);
                }
                else {
                    urlToValidate = $url.val();
                }

                if (!$.regexValidate({ regex: $url.attr("val-regex") }, urlToValidate)) {
                    $url.govUkInput("invalidState", $url.attr("val-regex-message"));
                    var urlErrorHashLinks = $url.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", urlErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $url.attr("val-max-length") }, urlToValidate)) {
                    $url.govUkInput("invalidState", $url.attr("val-max-length-message"));
                    var urlErrorHashLinks = $url.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", urlErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $url.govUkInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $url[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                // cost / cost description
                if ((!$.requiredValidate($cost.val()) && !$.requiredValidate($costDescription.val()))) {
                    $cost.govUkInput("invalidState", $cost.attr("val-required-message"));
                    var costErrorHashLinks = $cost.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", costErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $costDescription.attr("val-regex") }, $costDescription.val())) {
                    $costDescription.govUkTextarea("invalidState", $costDescription.attr("val-regex-message"));
                    var costDescriptionErrorHashLinks = $costDescription.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", costDescriptionErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $costDescription.attr("val-max-length") }, $costDescription.val())) {
                    $costDescription.govUkTextarea("invalidState", $costDescription.attr("val-max-length-message"));
                    var costDescriptionErrorHashLinks = $costDescription.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", costDescriptionErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $cost.govUkInput("validState");
                    $costDescription.govUkTextarea("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $costDescription[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                // duration
                if (!$.requiredValidate($duration.find("input").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (!$.rangeValidate({
                    min: $duration.attr("val-range-min"),
                    max: $duration.attr("val-range-max")
                },
                    $duration.find("input").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }    else if (!$.requiredValidate($("#durationDropDown").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }
                else if ($duration.find("input").val().indexOf(".") >= 0) {

                    $duration.govUkDurationInput("invalidState", $duration.attr("val-decimal-message"));
                    var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }
                else {
                    $duration.govUkDurationInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $duration[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                // attendance
                $attendance.govUkRadios("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $attendance[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                validStates.push(true);
                if (isClassroomBased && !$.requiredValidate($attendance.find("input[type='radio']:checked").val()) && $radioDeliveryMode.find("input[type='radio']:checked").val() == "ClassroomBased") {
                    $attendance.govUkRadios("invalidState", $attendance.attr("val-required-message"));
                    var attendanceErrorHashLinks = $attendance.govUkRadios("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", attendanceErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                // study mode
                $studyMode.govUkRadios("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $studyMode[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                validStates.push(true);
                if (isClassroomBased && !$.requiredValidate($studyMode.find("input[type='radio']:checked").val()) && $radioDeliveryMode.find("input[type='radio']:checked").val() == "ClassroomBased") {
                    $studyMode.govUkRadios("invalidState", $studyMode.attr("val-required-message"));
                    var studyModeErrorHashLinks = $studyMode.govUkRadios("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", studyModeErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }


                if (!validStates.every(isAllValid)) {
                    $("html, body").animate({
                        scrollTop: $errorSummary.offset().top
                    }, 600);
                    $errorSummary.focus();
                }

                return validStates.every(isAllValid);
            }

               var $goToSection1Link = $("#goToSection1Link");
            $goToSection1Link.click(function () {
                event.preventDefault();
               // if (validate()) {
                    $("#addCourseSection2").attr("action", "AddCourseRunToAddCourse");
                    $("#addCourseSection2").submit();
                //}
            });


             var replaceAll = function (search, find, replace) {
                return search.split(find).join(replace);
            };

    var makeRequestWithPayload = function (payload, success) {
                console.log(payload);
                var qs = $.param(payload);
                qs = replaceAll(qs, "%5B%5D", "");
                $.get("/AddCourse/AddNewVenue?" + qs, success);
            };



                    var onSucess = function (data) {
                        window.location.href = data;
                    };

            $addNewVenueButton.on("click", function (e) {
                e.preventDefault();

               var $allCheckedVenues =
                        $("input[name='SelectedVenues']:checkbox:checked");
                     var $allCheckedRegions =
                    $("input[name='SelectedRegions']:checkbox:checked");


                makeRequestWithPayload({
                    CourseName: $courseName.val(),
                    CourseProviderReference: $courseProviderReference.val(),
                    DeliveryMode: $radioDeliveryMode.find("input[type='radio']:checked").val(),
                    StartDateType: $("input[name='StartDateType']:checked").val(),
                    Day: $("#Day").val(),
                    Month: $("#Month").val(),
                    Year: $("#Year").val(),
                    Url:$url.val(),
                     Cost:$cost.val(),
                     CostDescription :$costDescription.val(),
                     //AdvancedLearnerLoan
                     DurationUnit :$duration.find("select").val(),
                     DurationLength:$duration.find("input").val(),
                     StudyMode:$studyMode.find("input[type='radio']:checked").val() ,
                     AttendanceMode:$attendance.find("input[type='radio']:checked").val(),
                                    SelectedVenues: $allCheckedVenues.map(function () {
                                        return $(this).val();
                                    }).get(),
                                    LevelFilter: $allCheckedRegions.map(function () {
                                        return $(this).val();
                                    }).get()

                    },
                        onSucess);

                });


            $button.on("click", function (event) {
                event.preventDefault();
                validate();
                if (validStates.every(isAllValid)) {
                    //$("#addCourseSection2").submit();
                    $("#addCourseSection2").trigger('submit');
                }
            });

            $startDateRadios.change(function () {
                if ($("#SpecifiedStartDate").prop("checked") === true) {
                    $("#govuk-label-start_date").show();
                }

                if ($("#FlexibleStartDate").prop("checked") === true) {
                    $("#govuk-label-start_date").hide();
                    $("#Day").val("");
                    $("#Month").val("");
                    $("#Year").val("");

                }
            });


            $deliveryRadios.change(function () {
                var $venueChoice = $("#VenueItemsCheckboxList");
                var $fullPartTimeRadioButtons = $("#FullPartTimeRadioButtons");
                var $attendancePatternRadioButtons = $("#AttendancePatternRadioButtons");
                var $specifiedStartDate = $("#SpecifiedStartDate");
                var $flexibleStartDate = $("#FlexibleStartDate");
                var $attendancePattern = $("#@Model.AttendanceMode");
                var $studyMode = $("#@Model.StudyMode");

                switch (this.id) {
                    case "ClassroomBased":
                        {
                            $specifiedStartDate.prop("checked", true);
                            $flexibleStartDate.prop("checked", false);
                            $venueChoice.show();
                            $regionItemsCheckboxList.hide();
                            $fullPartTimeRadioButtons.show();
                            $attendancePatternRadioButtons.show();
                            isClassroomBased = true;
                            isOnline = false;
                            isWorkBased = false;
                            $attendancePattern.prop("checked", true);
                            $studyMode.prop("checked", true);
                            $("#govuk-label-start_date").show();
                            break;
                        }
                    case "Online":
                        {
                            $flexibleStartDate.prop("checked", true);
                            $specifiedStartDate.prop("checked", false);
                            $venueChoice.hide();
                            $regionItemsCheckboxList.hide();
                            $fullPartTimeRadioButtons.hide();
                            $attendancePatternRadioButtons.hide();
                            isClassroomBased = false;
                            isOnline = true;
                            isWorkBased = false;
                            $attendancePattern.prop("checked", false);
                            $studyMode.prop("checked", false);
                            $("#govuk-label-start_date").hide();
                            break;
                        }
                    case "WorkBased":
                        {
                            $flexibleStartDate.prop("checked", true);
                            $specifiedStartDate.prop("checked", false);
                            $venueChoice.hide();
                            $regionItemsCheckboxList.show();
                            $fullPartTimeRadioButtons.hide();
                            $attendancePatternRadioButtons.hide();
                            isClassroomBased = false;
                            isOnline = false;
                            isWorkBased = true;
                            $attendancePattern.prop("checked", false);
                            $studyMode.prop("checked", false);
                            $("#govuk-label-start_date").hide();
                            break;
                        }
                }
            });
        });
    })(jQuery);
</script>
