@using Dfc.CourseDirectory.Models.Enums
@using Dfc.CourseDirectory.Models.Models.Courses
@using Dfc.CourseDirectory.Web.ViewComponents.CourseName
@using Dfc.CourseDirectory.Web.ViewComponents.CourseProviderReference
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.AddStartDate
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Attendance
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.ChooseVenue
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Cost
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.DeliveryType
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Duration
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.StudyMode
@using Dfc.CourseDirectory.Web.ViewComponents.Extensions
@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@using Dfc.CourseDirectory.Web.ViewComponents.UrlInput
@using StudyMode = Dfc.CourseDirectory.Models.Models.Courses.StudyMode
@model Dfc.CourseDirectory.Web.ViewModels.EditCourse.EditCourseRunViewModel

<h1 class="govuk-heading-l" style="padding-top: 20px;">
    Edit course details
</h1>

<form asp-controller="EditCourseRun" asp-action="Index" id="editCourseRun" onkeypress="return event.keyCode != 13;">

    <div id="errorsummary" class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary" style="display: none;">
        <h2 class="govuk-error-summary__title" id="error-summary-title">
            There is an issue with this qualification
        </h2>
        <div class="govuk-error-summary__body">
            <ul class="govuk-list govuk-error-summary__list"></ul>
        </div>
    </div>

    @Html.HiddenFor(x => x.CourseId)
    @Html.HiddenFor(x => x.CourseRunId)
    @Html.HiddenFor(x => x.QualificationType)
    @Html.HiddenFor(x => x.Mode)
    @Html.HiddenFor(x => x.CurrentCourseRunDate)

    <div class="section" id="sectionCourseName">
        @await Component.InvokeAsync(nameof(CourseName), new CourseNameModel
        {
        CourseName = Model.CourseName,
        LabelText = "Course name",
        HintText = "This is the name people will see when they search for your course.",
        AriaDescribedBy = "Please enter the course name."
        })
    </div>

    <div class="section" id="sectionCourseProviderReference">
        @await Component.InvokeAsync(nameof(CourseProviderReference), new CourseProviderReferenceModel
        {
        CourseProviderReference = Model.CourseProviderReference,
        LabelText = "ID",
        HintText = "This is how you identify a course in your internal system.",
        AriaDescribedBy = "Please enter the ID for this course"
        })
    </div>

    <div class="section" id="sectionDeliveryType">
        @await Component.InvokeAsync(nameof(DeliveryType), new DeliveryTypeModel
        {
        DeliveryMode = Model.DeliveryMode,
        LabelText = "Delivery Mode",
        HintText = "Select how this course will be delivered",
        AriaDescribedBy = "How the course will be delivered"
        })
    </div>

    <div class="section" id="sectionStartDate">
        @await Component.InvokeAsync(nameof(AddStartDate), new AddStartDateModel()
        {
            StartDateType = Model.StartDateType,
            Day = Model.Day ,
            Month = Model.Month,
            Year = Model.Year,
            DayAriaDescribedBy = "",
            DayLabelText = "Day",
            MonthAriaDescribedBy = "",
            MonthLabelText = "Month",
            YearAriaDescribedBy = "",
            YearLabelText = "Year",
            AriaDescribedBy = "",
            SpecifiedDateHintText = "e.g. For example, 30 9 2019",
            FlexibleDateHintText = "Or select a flexible start date:",
            LabelText = "Start date",
            CurrentStartDate = Model.CurrentCourseRunDate,
            ValPastDateRef = Model.ValPastDateRef,
            ValPastDateMessage = Model.ValPastDateMessage
        })
    </div>

    <div class="section" id="sectionVenue" style="@Model.DeliveryMode.IfNotClassroomBasedDisplayNone()">
        @await Component.InvokeAsync(nameof(ChooseVenue), new ChooseVenueModel()
        {
        LabelText = "Venue",
        AriaDescribedBy = "Venue",
        HintText = "Select course run venue",
        VenueId = Model.VenueId ?? (Guid?)null
        })
    </div>

    <div class="section" id="sectionRegion">
        @*No view component here in order to get checkbox list validation to work without it's own form*@
        <div class="govuk-form-group" id="RegionItemsCheckboxList" style="@Model.DeliveryMode.IfNotWorkBasedDisplayNone()">
            <label id="govuk-label-SelectRegionCheckBoxes" class="govuk-label" for="select-region">
                @Model.SelectRegion.LabelText
            </label>
            <span id="select-region-hint" class="govuk-hint">
                @Model.SelectRegion.HintText
            </span>

            <div class="govuk-checkboxes" id="SelectRegionCheckBoxes"
                 val-required-message="Select a region">
                @{ var j = 0; }
                @if (Model.SelectRegion.RegionItems.Count() == 1)
                {
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="RegionName-@j" name="SelectedRegions" type="checkbox" value="@Model.SelectRegion.RegionItems.First().Id" checked="checked" onclick="return false;" />
                    <label class="govuk-label govuk-checkboxes__label" for="SelectedRegions">@Model.SelectRegion.RegionItems.First().RegionName</label>
                </div>
                }
                else
                {
                foreach (var item in Model.SelectRegion.RegionItems)
                {
                j++;
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="RegionName-@j" name="SelectedRegions" type="checkbox" value="@item.Id" @item.Checked.ThenNullableCheck() />
                    <label class="govuk-label govuk-checkboxes__label" for="SelectedRegions">@item.RegionName</label>
                </div>
                }
                }
            </div>
        </div>
    </div>




    <div class="section" id="sectionUrl">
        @await Component.InvokeAsync(nameof(UrlInput), new UrlInputModel
        {
        Url = Model.Url,
        LabelText = "URL",
        HintText = "Enter the URL for this course e.g. http://www.google.com",
        AriaDescribedBy = "Enter the URL for this course"
        })
    </div>

    <div class="section" id="sectionCost">
        @await Component.InvokeAsync(nameof(Cost), new CostModel
        {
        Cost = Model.Cost,
        CostDescription = Model.CostDescription,
        CostLabelText = "Cost",
        CostHintText = "Enter the cost for the course in pounds and pence e.g. 125.00",
        CostAriaDescribedBy = "Enter the cost in pounds and pence",
        CostDescriptionLabelText = "Cost description",
        CostDescriptionHintText = "Enter details related to the cost of this course",
        CostDescriptionAriaDescribedBy = "Enter details of related to the cost of this course"
        })
    </div>

    <div class="section" id="sectionDuration">
        @await Component.InvokeAsync(nameof(Duration), new DurationModel
        {
        DurationLength = Model.DurationLength,
        DurationUnit =  Model.DurationUnit,
        LabelText = "Duration",
        HintText = "Select the duration of the course",
        AriaDescribedBy = "Select course duration"
        })
    </div>


    <div class="section" id="FullPartTimeRadioButtons" style="display: none;">
        @await Component.InvokeAsync(nameof(Dfc.CourseDirectory.Web.ViewComponents.Courses.StudyMode.StudyMode), new StudyModeModel
        {
        StudyMode = Model.StudyMode,
        LabelText = "Full time or part time",
        HintText = "Select the attendance pattern"
        })
    </div>

    <div class="section" id="AttendancePatternRadioButtons" style="display: none;">
        @await Component.InvokeAsync(nameof(Attendance), new AttendanceModel
        {
        AttendanceMode = Model.AttendanceMode,
        LabelText = "Attendance",
        HintText = "Select the time of day the course takes place"
        })
    </div>

    <ul class="flex-container">
        <li class="flex-item">
            <button name="saveButton" type="submit" class="govuk-button" id="save">
                Save
            </button>
        </li>
        <li class="flex-item" style="padding-top: 15px">
            @switch (Model.Mode)
            {
            case PublishMode.Migration:
            @Html.ActionLink("Cancel", "Index", "PublishCourses", new { publishMode = Model.Mode, courseId = Model.CourseId, courseRunId = Model.CourseRunId}, new { @class = "govuk-link" })
            break;
            case PublishMode.BulkUpload:
            @Html.ActionLink("Cancel", "Index", "PublishCourses", new { publishMode = Model.Mode }, new { @class = "govuk-link" })
            break;
            default:
            @Html.ActionLink("Cancel", "Courses", "Provider", new { level = @Model.NotionalNVQLevelv2, courseId = @Model.CourseId, courseRunId = @Model.CourseRunId }, new { @class = "govuk-link" })
            break;
            }
        </li>
    </ul>


</form>

<script>
    (function($) {
        $(function () {
            var validStates = [];
            var $button = $("#save");
            var $errorSummary = $("#errorsummary").govUkErrorSummary();
            var $courseName = $("#@nameof(Model.CourseName)").govUkInput();
            var $courseProviderReference = $("#@nameof(Model.CourseProviderReference)").govUkInput();
            var $deliveryRadios = $("#DeliveryModeRadioButtons input[type=radio]");
            var $radioDeliveryMode = $("#DeliveryModeRadioButtons").govUkRadios();
            var $startDate = $("#start_date").govUkDateInput();
            var $selectedVenue = $("#@nameof(Model.VenueId)").govUkSelect();
            var $regions = $("#SelectRegionCheckBoxes").govUkCheckboxes();
            var $url = $("#@nameof(Model.Url)").govUkInput();
            var $cost = $("#@nameof(Model.Cost)").govUkInput();
            var $costDescription = $("#@nameof(Model.CostDescription)").govUkTextarea();
            var $duration = $("#duration").govUkDurationInput();
            var $studyMode = $("#StudyModeRadioButtons").govUkRadios();
            var $attendance = $("#AttendanceRadioButtons").govUkRadios();

            var $regionItemsCheckboxList = $("#RegionItemsCheckboxList");
            var $fullPartTimeRadioButtons = $("#FullPartTimeRadioButtons");
            var $attendancePatternRadioButtons = $("#AttendancePatternRadioButtons");

            var isClassroomBased = true;
            var isOnline = false;
            var isWorkBased = false;

            switch ($radioDeliveryMode.find("input[type='radio']:checked").val()) {
                case "ClassroomBased":
                    {
                        $fullPartTimeRadioButtons.show();
                        $attendancePatternRadioButtons.show();
                        isClassroomBased = true;
                        isOnline = false;
                        isWorkBased = false;
                        break;
                    }
                case "Online":
                    {
                        $fullPartTimeRadioButtons.hide();
                        $attendancePatternRadioButtons.hide();
                        isClassroomBased = false;
                        isOnline = true;
                        isWorkBased = false;
                        break;
                    }
                case "WorkBased":
                    {
                        $fullPartTimeRadioButtons.hide();
                        $attendancePatternRadioButtons.hide();
                        isClassroomBased = false;
                        isOnline = false;
                        isWorkBased = true;
                        break;
                    }
            }

            setTimeout(validate, 500);

            function isAllValid(currentValue) {
                return currentValue === true;
            }

            function validate() {

                validStates = [];
                $errorSummary.govUkErrorSummary("empty");
                $courseName.govUkInput("validState");
                $courseProviderReference.govUkInput("validState");
                $radioDeliveryMode.govUkRadios("validState");
                $startDate.govUkDateInput("validState");
                $duration.govUkDurationInput("validState");
                $selectedVenue.govUkSelect("validState");
                $regions.govUkCheckboxes("validState");
                $url.govUkInput("validState");
                $cost.govUkInput("validState");
                $costDescription.govUkTextarea("validState");
                $studyMode.govUkRadios("validState");
                $attendance.govUkRadios("validState");

                if ($.requiredValidate($radioDeliveryMode.find("input[type=radio]:checked").val())) {
                    $radioDeliveryMode.govUkRadios("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $radioDeliveryMode[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                } else {
                    $radioDeliveryMode.govUkRadios("invalidState", $radioDeliveryMode.attr("val-required-message"));
                    var radioDeliveryModeErrorHashLinks = $radioDeliveryMode.govUkRadios("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", radioDeliveryModeErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                if (isClassroomBased) {
                    if ($.requiredValidate($selectedVenue.val())) {
                        $selectedVenue.govUkSelect("validState");
                        $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $selectedVenue[0].id);
                        $errorSummary.govUkErrorSummary("hideIfEmpty")
                        validStates.push(true);
                    } else {
                        $selectedVenue.govUkSelect("invalidState", $selectedVenue.attr("val-required-message"));
                        var selectedVenueErrorHashLinks = $selectedVenue.govUkSelect("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", selectedVenueErrorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                        validStates.push(false);
                    }

                    if ($.requiredValidate($attendance.find("input[type='radio']:checked").val())) {
                        $attendance.govUkRadios("validState");
                        $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $attendance[0].id);
                        $errorSummary.govUkErrorSummary("hideIfEmpty")
                        validStates.push(true);
                    } else {
                        $attendance.govUkRadios("invalidState", $attendance.attr("val-required-message"));
                        var attendanceErrorHashLinks = $attendance.govUkRadios("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", attendanceErrorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                        validStates.push(false);
                    }

                    if ($.requiredValidate($studyMode.find("input[type='radio']:checked").val())) {
                        $studyMode.govUkRadios("validState");
                        $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $studyMode[0].id);
                        $errorSummary.govUkErrorSummary("hideIfEmpty")
                        validStates.push(true);
                    } else {
                        $studyMode.govUkRadios("invalidState", $studyMode.attr("val-required-message"));
                        var studyModeErrorHashLinks = $studyMode.govUkRadios("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", studyModeErrorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                        validStates.push(false);
                    }
                }

                if (isWorkBased) {
                    if ($.requiredValidate($regions.find("input[type='checkbox']:checked").val())) {
                        $regions.govUkCheckboxes("validState");
                        $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $regions[0].id);
                        $errorSummary.govUkErrorSummary("hideIfEmpty")
                        validStates.push(true);
                    } else {
                        $regions.govUkCheckboxes("invalidState", $regions.attr("val-required-message"));
                        var regionsErrorHashLinks = $regions.govUkCheckboxes("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", regionsErrorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                        validStates.push(false);
                    }
                }

                if ((!$.requiredValidate($cost.val()) && !$.requiredValidate($costDescription.val()))) {
                    $cost.govUkInput("invalidState", $cost.attr("val-required-message"));
                    var costErrorHashLinks = $cost.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", costErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $costDescription.attr("val-regex") }, $costDescription.val())) {
                    $costDescription.govUkTextarea("invalidState", $costDescription.attr("val-regex-message"));
                    var costDescriptionErrorHashLinks = $costDescription.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", costDescriptionErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $costDescription.attr("val-max-length") }, $costDescription.val())) {
                    $costDescription.govUkTextarea("invalidState", $costDescription.attr("val-max-length-message"));
                    var costDescriptionErrorHashLinks = $costDescription.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", costDescriptionErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $cost.govUkInput("validState");
                    $costDescription.govUkTextarea("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $costDescription[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                if (!$.requiredValidate($courseName.val())) {
                    $courseName.govUkInput("invalidState", $courseName.attr("val-required-message"));
                    var courseNameErrorHashLinks = $courseName.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $courseName.attr("val-regex") }, $courseName.val())) {
                    $courseName.govUkInput("invalidState", $courseName.attr("val-regex-message"));
                    var courseNameErrorHashLinks = $courseName.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $courseName.attr("val-max-length") }, $courseName.val())) {
                    $courseName.govUkInput("invalidState", $courseName.attr("val-max-length-message"));
                    var courseNameErrorHashLinks = $courseName.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $courseName.govUkInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $courseName[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                if (!$.regexValidate({ regex: $courseProviderReference.attr("val-regex") }, $courseProviderReference.val())) {
                    $courseProviderReference.govUkInput("invalidState", $courseProviderReference.attr("val-regex-message"));
                    var courseProviderReferenceErrorHashLinks = $courseProviderReference.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseProviderReferenceErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $courseProviderReference.attr("val-max-length") }, $courseProviderReference.val())) {
                    $courseProviderReference.govUkInput("invalidState", $courseProviderReference.attr("val-max-length-message"));
                    var courseProviderReferenceErrorHashLinks = $courseProviderReference.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseProviderReferenceErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $courseProviderReference.govUkInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $courseProviderReference[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                if (!$.regexValidate({ regex: $url.attr("val-regex") }, $url.val())) {
                    $url.govUkInput("invalidState", $url.attr("val-regex-message"));
                    var urlErrorHashLinks = $url.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", urlErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $url.attr("val-max-length") }, $url.val())) {
                    $url.govUkInput("invalidState", $url.attr("val-max-length-message"));
                    var urlErrorHashLinks = $url.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", urlErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $url.govUkInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $url[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                if (!$.requiredValidate($duration.find("input").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (!$.rangeValidate({
                    min: $duration.attr("val-range-min"),
                    max: $duration.attr("val-range-max")
                },
                    $duration.find("input").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (!$.requiredValidate($duration.find("select").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $duration.govUkDurationInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $duration[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                if ($.requiredValidate($radioDeliveryMode.find("input[type='radio']:checked").val())) {
                    $radioDeliveryMode.govUkRadios("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $radioDeliveryMode[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                } else {
                    $radioDeliveryMode.govUkRadios("invalidState", $radioDeliveryMode.attr("val-required-message"));
                    var deliveryModeErrorHashLinks = $radioDeliveryMode.govUkRadios("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", deliveryModeErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $startDate[0].id);
                var radioValue = $("input[name='StartDateType']:checked").val();
                if (radioValue.toUpperCase() === "SPECIFIEDSTARTDATE") {
                    var startDateValue = $startDate.govUkDateInput("getISODateString");
                    if (startDateValue === "") {
                        $startDate.govUkDateInput("invalidState", $startDate.attr("val-required-message"));
                        var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                        validStates.push(false);
                    } else {
                        if (!$.dateValidate(startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-date-message"));
                            var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                            validStates.push(false);
                        } else if ($.pastDateValidate({ ref: $startDate.attr("val-past-date-ref") }, startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-past-date-message"));
                            var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                            validStates.push(false);
                        } else if ($.futureDateValidate({ ref: $startDate.attr("val-future-date-ref") }, startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-future-date-message"));
                            var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                            validStates.push(false);
                        } else if ($.dateValidate(startDateValue)) {
                            $startDate.govUkDateInput("validState");
                            //$errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $startDate[0].id);
                            $errorSummary.govUkErrorSummary("hideIfEmpty")
                            validStates.push(true);
                        }
                    }
                }

                if (!validStates.every(isAllValid)) {
                    $("html, body").animate({
                        scrollTop: $errorSummary.offset().top
                    }, 600);
                    $errorSummary.focus();
                }
            }

            $button.on("click", function (event) {
                event.preventDefault();
                validate();
                if (validStates.every(isAllValid)) {
                    $("#editCourseRun").submit();
                }
            });

            $deliveryRadios.change(function () {
                var $venueChoice = $("#sectionVenue");
                var $fullPartTimeRadioButtons = $("#FullPartTimeRadioButtons");
                var $attendancePatternRadioButtons = $("#AttendancePatternRadioButtons");
                var $specifiedStartDate = $("#SpecifiedStartDate");
                var $flexibleStartDate = $("#FlexibleStartDate");
                var $dayTimeAttendance = $("#@AttendancePattern.Daytime");
                var $studyMode = $("#@StudyMode.FullTime");

                switch (this.id) {
                    case "ClassroomBased":
                        {
                            $specifiedStartDate.prop("checked", true);
                            $flexibleStartDate.prop("checked", false);
                            $venueChoice.show();
                            $regionItemsCheckboxList.hide();
                            $fullPartTimeRadioButtons.show();
                            $attendancePatternRadioButtons.show();
                            isClassroomBased = true;
                            isOnline = false;
                            isWorkBased = false;
                            $dayTimeAttendance.prop("checked", true);
                            $studyMode.prop("checked", true);
                            break;
                        }
                    case "Online":
                        {
                            $flexibleStartDate.prop("checked", true);
                            $specifiedStartDate.prop("checked", false);
                            $venueChoice.hide();
                            $regionItemsCheckboxList.hide();
                            $fullPartTimeRadioButtons.hide();
                            $attendancePatternRadioButtons.hide();
                            isClassroomBased = false;
                            isOnline = true;
                            isWorkBased = false;
                            $dayTimeAttendance.prop("checked", false);
                            $studyMode.prop("checked", false);
                            break;
                        }
                    case "WorkBased":
                        {
                            $flexibleStartDate.prop("checked", true);
                            $specifiedStartDate.prop("checked", false);
                            $venueChoice.hide();
                            $regionItemsCheckboxList.show();
                            $fullPartTimeRadioButtons.hide();
                            $attendancePatternRadioButtons.hide();
                            isClassroomBased = false;
                            isOnline = false;
                            isWorkBased = true;
                            $dayTimeAttendance.prop("checked", false);
                            $studyMode.prop("checked", false);
                            break;
                        }
                }
            });
        });
    })(jQuery);
</script>