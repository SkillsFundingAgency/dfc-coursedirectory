@using Dfc.CourseDirectory.Services.Models
@using Dfc.CourseDirectory.Web.Extensions
@using Dfc.CourseDirectory.Web.ViewComponents.CourseName
@using Dfc.CourseDirectory.Web.ViewComponents.CourseProviderReference
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.AddStartDate
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Attendance
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.ChooseVenue
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Cost
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.DeliveryType
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Duration
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.StudyMode
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.ChooseRegion
@using Dfc.CourseDirectory.Web.ViewComponents.Extensions
@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@using Dfc.CourseDirectory.Web.ViewComponents.UrlInput
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Http
@model Dfc.CourseDirectory.Web.ViewModels.EditCourse.EditCourseRunViewModel
@{
    ViewData["Title"] = "Edit course details";
    Layout = "_Layout_Your_Courses";
}

@{
    var newVenueDescription = TempData[Dfc.CourseDirectory.WebV2.TempDataKeys.AddedVenueDescription] as string;

    if (newVenueDescription != null)
    {
        @await Component.InvokeAsync(nameof(Notification), new NotificationModel
        {
            NotificationTitle = "New location added:",
            NotificationMessage = newVenueDescription,
            ClassType = "success-summary"
        })
    }
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

        <h1 class="govuk-heading-xl">Course details</h1>

        <p class="govuk-body-m">Add information on how the course will be delivered.</p>

        <form asp-controller="EditCourseRun" asp-action="Index" id="editCourseRun">

            <div id="errorsummary" class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary" style="display: none;">
                <h2 class="govuk-error-summary__title" id="error-summary-title">
                    There is an issue with this qualification
                </h2>
                <div class="govuk-error-summary__body">
                    <ul class="govuk-list govuk-error-summary__list"></ul>
                </div>
            </div>

            @Html.HiddenFor(x => x.CourseId)
            @Html.HiddenFor(x => x.CourseRunId)
            @Html.HiddenFor(x => x.QualificationType)
            @Html.HiddenFor(x => x.Mode)
            @Html.HiddenFor(x => x.CurrentCourseRunDate)
            @Html.HiddenFor(x => x.ValPastDateRef)

            @Html.HiddenFor(x => x.LearnAimRefTitle)
            @Html.HiddenFor(x => x.NotionalNVQLevelv2)
            @Html.HiddenFor(x => x.AwardOrgCode)
            @Html.HiddenFor(x => x.LearnAimRef)

            <div class="section" id="sectionCourseName">
                @await Component.InvokeAsync(nameof(CourseName), new CourseNameModel
                {
                    CourseName = Model.CourseName,
                    LabelText = "Course name",
                    HintText = new HtmlString("The course name displayed on the National Career Service, <a href=\"https://nationalcareers.service.gov.uk/find-a-course/search\" class=\"govuk-link\" target=\"_blank\">Find a course</a>."),
                    AriaDescribedBy = "Please enter the course name."
                })
            </div>

            <div class="section" id="sectionCourseProviderReference">
                @await Component.InvokeAsync(nameof(CourseProviderReference), new CourseProviderReferenceModel
                {
                    CourseProviderReference = Model.CourseProviderReference,
                    LabelText = "Your reference",
                    HintText = "A reference that will help you identify this course in your internal systems. This will not be visible to learners.",
                    AriaDescribedBy = "Please enter your reference for this course"
                })
            </div>

            <div class="section" id="sectionDeliveryType">
                @await Component.InvokeAsync(nameof(DeliveryType), new DeliveryTypeModel
                {
                    DeliveryMode = Model.DeliveryMode,
                    LabelText = "Course type",
                    HintText = "Select one option.",
                    SecondHintText = "Select how you will deliver this course",
                    AriaDescribedBy = "Select how you will deliver this course"
                })
            </div>

            <div class="section" id="sectionStartDate">
                @await Component.InvokeAsync(nameof(AddStartDate), new AddStartDateModel()
                {
                    StartDateType = Model.StartDateType,
                    Day = Model.Day,
                    Month = Model.Month,
                    Year = Model.Year,
                    DayAriaDescribedBy = "",
                    DayLabelText = "Day",
                    MonthAriaDescribedBy = "",
                    MonthLabelText = "Month",
                    YearAriaDescribedBy = "",
                    YearLabelText = "Year",
                    AriaDescribedBy = "",
                    SpecifiedDateHintText = "e.g. For example, 30 9 2019",
                    FlexibleDateHintText = "Or select a flexible start date:",
                    LabelText = "Start date",
                    CurrentStartDate = Model.CurrentCourseRunDate,
                    ValPastDateRef = Model.ValPastDateRef,
                    ValPastDateMessage = Model.ValPastDateMessage
                })
            </div>

            <div class="section" id="sectionVenue" style="@Model.DeliveryMode.IfNotClassroomBasedDisplayNone()">
                @await Component.InvokeAsync(nameof(ChooseVenue), new ChooseVenueModel()
                {
                    LabelText = "Venue",
                    AriaDescribedBy = "Venue",
                    HintText = null,
                    VenueId = Model.VenueId ?? (Guid?)null,
                    DisplayLink = Model.Mode != PublishMode.BulkUpload
                })
            </div>

            <div class="section" id="RegionItemsCheckboxList" style="@Model.DeliveryMode.IfNotWorkBasedDisplayNone()">
                <div id="sectionRegions">
                    @await Component.InvokeAsync(nameof(ChooseRegion), Model.ChooseRegion)
                </div>
            </div>

            <div class="section" id="sectionUrl">
                @await Component.InvokeAsync(nameof(UrlInput), new UrlInputModel
                {
                    Url = Model.Url,
                    LabelText = "Course webpage",
                    HintText = "The webpage for this course. For example, https://www.provider.com/coursename.",
                    AriaDescribedBy = "Enter the course webpage for this course"
                })
            </div>

            <div class="section" id="sectionCost">
                @await Component.InvokeAsync(nameof(Cost), new CostModel
                {
                    Cost = Model.Cost,
                    CostDescription = Model.CostDescription,
                    CostLabelText = "Cost",
                    CostHintText = "Cost of the course to the learner.",
                    CostAriaDescribedBy = "Enter the cost in pounds and pence",
                    CostDescriptionLabelText = "Cost description",
                    CostDescriptionHintText = "A description of what the cost includes and additional costs to the learner. For example, assessment, exam fees or study materials.",
                    CostDescriptionAriaDescribedBy = "Enter details of related to the cost of this course"
                })
            </div>

            <div class="section" id="sectionDuration">
                @await Component.InvokeAsync(nameof(Duration), new DurationModel
                {
                    DurationLength = Model.DurationLength,
                    DurationUnit = Model.DurationUnit,
                    LabelText = "Duration",
                    AriaDescribedBy = "Select course duration"
                })
            </div>

            <div class="section" id="FullPartTimeRadioButtons" style="display: none;">
                @await Component.InvokeAsync(nameof(Dfc.CourseDirectory.Web.ViewComponents.Courses.StudyMode.StudyMode), new StudyModeModel
                {
                    StudyMode = Model.StudyMode,
                    LabelText = "Course hours",
                    HintText = "Select one option."
                })
            </div>

            <div class="section" id="AttendancePatternRadioButtons" style="display: none;">
                @await Component.InvokeAsync(nameof(Attendance), new AttendanceModel
                {
                    AttendanceMode = Model.AttendanceMode,
                    LabelText = "Attendance pattern",
                    HintText = "Select one  option."
                })
            </div>

            <h3 class="govuk-heading-m">Publish your course changes</h3>
            <p class="govuk-body">Your course details will be updated on Publish to the course directory and available to learners searching for learning and training opportunities on the National Careers Service.</p>

            <button name="saveButton" type="submit" class="govuk-button" id="save">Publish changes</button>

            @switch (Model.Mode)
            {
                case PublishMode.BulkUpload:
                case PublishMode.DataQualityIndicator:
                    @Html.ActionLink("Cancel", "Index", "PublishCourses", new { publishMode = Model.Mode }, new { @class = "govuk-button govuk-button--secondary" })
                    break;
                case PublishMode.Summary:
                    @Html.ActionLink("Cancel", "Index", "CourseSummary", new { Model.CourseId, Model.CourseRunId }, new { @class = "govuk-button govuk-button--secondary" })
                    break;
                default:
                    @Html.ActionLink("Cancel", "Courses", "Provider", new
                    {
                        level = @Model.NotionalNVQLevelv2,
                        courseId = @Model.CourseId,
                        courseRunId = @Model.CourseRunId,
                        learnAimRef = @Model.LearnAimRef,
                        notionalNVQLevelv2 = @Model.NotionalNVQLevelv2,
                        awardOrgCode = @Model.AwardOrgCode,
                        learnAimRefTitle = @Model.LearnAimRefTitle,
                        learnAimRefTypeDesc = @Model.QualificationType
                    }, new { @class = "govuk-button govuk-button--secondary" })
                    break;
            }

        </form>
    </div>
</div>

<script>
    (function($) {
        $(document).on("keydown", ":input:not(textarea)", function(event) {
            return event.key != "Enter";
        });
        $(function () {

            var $addNewVenueButton = $("#addNewVenue");
            var $courseId = $("#@nameof(Model.CourseId)");
            var $courseRunId = $("#@nameof(Model.CourseRunId)");
            var $mode = $("#@nameof(Model.Mode)");

            var $learnAimRefTitle = $("#@nameof(Model.LearnAimRefTitle)");
            var $notionalNVQLevelv2 = $("#@nameof(Model.NotionalNVQLevelv2)");
            var $awardOrgCode = $("#@nameof(Model.AwardOrgCode)");
            var $learnAimRef = $("#@nameof(Model.LearnAimRef)");

            var $day = $("#Day");
            var $month = $("#Month");
            var $year = $("#Year");

            var validStates = [];
            var $button = $("#save");
            var $errorSummary = $("#errorsummary").govUkErrorSummary();
            var $courseName = $("#@nameof(Model.CourseName)").govUkInput();
            var $courseProviderReference = $("#@nameof(Model.CourseProviderReference)").govUkInput();
            var $deliveryRadios = $("#DeliveryModeRadioButtons input[type=radio]");
            var $radioDeliveryMode = $("#DeliveryModeRadioButtons").govUkRadios();
            var $startDate = $("#start_date").govUkDateInput();
            var $selectedVenue = $("#@nameof(Model.VenueId)").govUkSelect();
            var $regions = $("#SelectRegionCheckBoxes").govUkCheckboxes();
            var $url = $("#@nameof(Model.Url)").govUkInput();
            var $cost = $("#@nameof(Model.Cost)").govUkInput();
            var $costDescription = $("#@nameof(Model.CostDescription)").govUkTextarea();
            var $duration = $("#duration").govUkDurationInput();
            var $studyMode = $("#StudyModeRadioButtons").govUkRadios();
            var $attendance = $("#AttendanceRadioButtons").govUkRadios();
            var $national = $("#nationalRadioButtons").govUkCheckboxes();
            var $regionItemsCheckboxList = $("#RegionItemsCheckboxList");
            var $fullPartTimeRadioButtons = $("#FullPartTimeRadioButtons");
            var $attendancePatternRadioButtons = $("#AttendancePatternRadioButtons");
            var $startDateRadios = $("#StartDateOptions input[type=radio]");
            var $radioStartDate = $("#StartDateOptions").govUkRadios();
            var $regionSection = $("#regions-section");
            var isClassroomBased = true;
            var isOnline = false;
            var isWorkBased = false;



            var $specifiedStartDate = $("#SpecifiedStartDate");
            var $flexibleStartDate = $("#FlexibleStartDate");

            switch ($radioDeliveryMode.find("input[type='radio']:checked").val()) {
                case "ClassroomBased":
                    {
                        $fullPartTimeRadioButtons.show();
                        $attendancePatternRadioButtons.show();
                        isClassroomBased = true;
                        isOnline = false;
                        isWorkBased = false;
                        $regionSection.hide();

                        $("#govuk-label-start_date").show();


                        break;
                    }
                case "Online":
                    {
                        $fullPartTimeRadioButtons.hide();
                        $attendancePatternRadioButtons.hide();
                        $regionSection.hide();


                        $("#govuk-label-start_date").hide();

                        break;
                    }
                case "WorkBased":
                    {
                        $fullPartTimeRadioButtons.hide();
                        $attendancePatternRadioButtons.hide();
                        isClassroomBased = false;
                        isOnline = false;
                        isWorkBased = true;

                        $regionSection.show();

                        if ($flexibleStartDate.prop('checked')) {
                            $("#govuk-label-start_date").hide();
                            $("#Day").val("");
                            $("#Month").val("");
                            $("#Year").val("");
                        }

                        break;
                    }
            }

            if (!isWorkBased) {
                var $nationalTrue = $("#National_true");
                $nationalTrue.prop("checked", false);
                var $nationalFalse = $("#National_false");
                $nationalFalse.prop("checked", false);
                $regionSection.hide();
            }


            switch ($radioStartDate.find("input[type='radio']:checked").val()) {
            case "SpecifiedStartDate":
            {
                $("#govuk-label-start_date").show();
                break;
            }
            case "FlexibleStartDate":
            {
                $("#govuk-label-start_date").hide();
                //$("#Day").val("");
                //$("#Month").val("");
                //$("#Year").val("");
                break;
            }

            }

            if ($national.find("input[type='radio']:checked").val() === "False") {
                $regionSection.show();
            }
            else {
                $regionSection.hide();
            }


            setTimeout(validate, 500);

            function isAllValid(currentValue) {
                return currentValue === true;
            }

            function validate() {

                validStates = [];
                $errorSummary.govUkErrorSummary("removeAll");
                $courseName.govUkInput("validState");
                $courseProviderReference.govUkInput("validState");
                $radioDeliveryMode.govUkRadios("validState");
                $startDate.govUkDateInput("validState");
                $duration.govUkDurationInput("validState");
                $selectedVenue.govUkSelect("validState");
                $regions.govUkCheckboxes("validState");
                $url.govUkInput("validState");
                $cost.govUkInput("validState");
                $costDescription.govUkTextarea("validState");
                $studyMode.govUkRadios("validState");
                $attendance.govUkRadios("validState");

                //if ($.requiredValidate($radioDeliveryMode.find("input[type=radio]:checked").val())) {
                //    $radioDeliveryMode.govUkRadios("validState");
                //    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $radioDeliveryMode[0].id);
                //    $errorSummary.govUkErrorSummary("hideIfEmpty");
                //    validStates.push(true);
                //} else {
                //    $radioDeliveryMode.govUkRadios("invalidState", $radioDeliveryMode.attr("val-required-message"));
                //    var radioDeliveryModeErrorHashLinks = $radioDeliveryMode.govUkRadios("getErrorHashLinks");
                //    $errorSummary.govUkErrorSummary("add", radioDeliveryModeErrorHashLinks);
                //    $errorSummary.govUkErrorSummary("show");
                //    validStates.push(false);
                //}

                // course name
                if (!$.requiredValidate($courseName.val())) {
                    $courseName.govUkInput("invalidState", $courseName.attr("val-required-message"));
                    var courseNameErrorHashLinks = $courseName.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $courseName.attr("val-regex") }, $courseName.val())) {
                    $courseName.govUkInput("invalidState", $courseName.attr("val-regex-message"));
                    var courseNameErrorHashLinks = $courseName.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $courseName.attr("val-max-length") }, $courseName.val())) {
                    $courseName.govUkInput("invalidState", $courseName.attr("val-max-length-message"));
                    var courseNameErrorHashLinks = $courseName.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $courseName.govUkInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $courseName[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                // provider reference (id)
                if (!$.regexValidate({ regex: $courseProviderReference.attr("val-regex") }, $courseProviderReference.val())) {
                    $courseProviderReference.govUkInput("invalidState", $courseProviderReference.attr("val-regex-message"));
                    var courseProviderReferenceErrorHashLinks = $courseProviderReference.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseProviderReferenceErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $courseProviderReference.attr("val-max-length") }, $courseProviderReference.val())) {
                    $courseProviderReference.govUkInput("invalidState", $courseProviderReference.attr("val-max-length-message"));
                    var courseProviderReferenceErrorHashLinks = $courseProviderReference.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseProviderReferenceErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $courseProviderReference.govUkInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $courseProviderReference[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                // delivery mode
                if ($.requiredValidate($radioDeliveryMode.find("input[type='radio']:checked").val())) {
                    $radioDeliveryMode.govUkRadios("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $radioDeliveryMode[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty");
                    validStates.push(true);
                } else {
                    $radioDeliveryMode.govUkRadios("invalidState", $radioDeliveryMode.attr("val-required-message"));

                    var $anchor = document.createElement("a");
                    $anchor.href = "#Delivery";
                    $anchor.innerHTML = $radioDeliveryMode.attr("val-required-message");
                    $anchor.id = "error-hash-link-" + "a" + "-" + 1;

                    $errorSummary.govUkErrorSummary("add", $anchor);
                    $errorSummary.govUkErrorSummary("show");

                    validStates.push(false);
                }

                // start date
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $startDate[0].id);
                var radioValue = $("input[name='StartDateType']:checked").val();
                if (radioValue.toUpperCase() === "SPECIFIEDSTARTDATE") {
                    var startDateValue = $startDate.govUkDateInput("getISODateString");
                    if (startDateValue === "") {
                        $startDate.govUkDateInput("invalidState", $startDate.attr("val-required-message"));
                        var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                        validStates.push(false);
                    } else {
                        if (!$.dateValidate(startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-date-message"));
                            var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                            validStates.push(false);
                        } else if ($.pastDateValidate({ ref: $startDate.attr("val-past-date-ref") }, startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-past-date-message"));
                            var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                            validStates.push(false);
                        } else if ($.futureDateValidate({ ref: $startDate.attr("val-future-date-ref") }, startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-future-date-message"));
                            var startDateErrorHashLinks = $startDate.govUkDateInput("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", startDateErrorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                            validStates.push(false);
                        } else if ($.dateValidate(startDateValue)) {
                            $startDate.govUkDateInput("validState");
                            //$errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $startDate[0].id);
                            $errorSummary.govUkErrorSummary("hideIfEmpty")
                            validStates.push(true);
                        }
                    }
                }

                // venue
                $selectedVenue.govUkSelect("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $selectedVenue[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                validStates.push(true);
                if (isClassroomBased && !$.requiredValidate($selectedVenue.val()) && $radioDeliveryMode.find("input[type='radio']:checked").val() == "ClassroomBased") {
                    $selectedVenue.govUkSelect("invalidState", $selectedVenue.attr("val-required-message"));
                    var selectedVenueErrorHashLinks = $selectedVenue.govUkSelect("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", selectedVenueErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                // regions
                $regions.govUkCheckboxes("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $regions[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                var $nationalRadioChecked = $("#nationalRadioButtons input[type=radio]:checked").val();

                $national.govUkCheckboxes("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $national[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty");

                validStates.push(true);
                if ($nationalRadioChecked == undefined && isWorkBased) {
                    $national.govUkCheckboxes("invalidState", $national.attr("val-required-message"));
                    var nationalErrorHashLinks = $national.govUkCheckboxes("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", nationalErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }
                validStates.push(true);
                if (isWorkBased & !$.requiredValidate($regions.find("input[type='checkbox']:checked").val()) & $nationalRadioChecked === "False") {
                    $regions.govUkCheckboxes("invalidState", $regions.attr("val-required-message"));
                    var regionsErrorHashLinks = $regions.govUkCheckboxes("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", regionsErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                // url
                var enteredUrl = $url.val();
                var urlToValidate = "";
                if ($url.val().indexOf("http") >= 0) {
                    urlToValidate = enteredUrl.substring(enteredUrl.indexOf("//") + 2, enteredUrl.length);
                }
                else {
                    urlToValidate = $url.val();
                }

                if (!$.regexValidate({ regex: $url.attr("val-regex") }, urlToValidate)) {
                    $url.govUkInput("invalidState", $url.attr("val-regex-message"));
                    var urlErrorHashLinks = $url.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", urlErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $url.attr("val-max-length") }, urlToValidate)) {
                    $url.govUkInput("invalidState", $url.attr("val-max-length-message"));
                    var urlErrorHashLinks = $url.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", urlErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $url.govUkInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $url[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                // cost / cost description
                if ((!$.requiredValidate($cost.val()) && !$.requiredValidate($costDescription.val()))) {
                    $cost.govUkInput("invalidState", $cost.attr("val-required-message"));
                    var costErrorHashLinks = $cost.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", costErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $costDescription.attr("val-regex") }, $costDescription.val())) {
                    $costDescription.govUkTextarea("invalidState", $costDescription.attr("val-regex-message"));
                    var costDescriptionErrorHashLinks = $costDescription.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", costDescriptionErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $costDescription.attr("val-max-length") }, $costDescription.val())) {
                    $costDescription.govUkTextarea("invalidState", $costDescription.attr("val-max-length-message"));
                    var costDescriptionErrorHashLinks = $costDescription.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", costDescriptionErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $cost.govUkInput("validState");
                    $costDescription.govUkTextarea("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $costDescription[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                // duration
                if (!$.requiredValidate($duration.find("input").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (!$.rangeValidate({ min: $duration.attr("val-range-min"), max: $duration.attr("val-range-max")}, $duration.find("input").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if ($duration.find("input").val().indexOf(".") >= 0) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-decimal-message"));
                    var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                  }  else if (!$.requiredValidate($("#durationDropDown").val())) {
                            $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                            var durationErrorHashLinks = $duration.govUkDurationInput("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", durationErrorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                            validStates.push(false);
                } else {
                    $duration.govUkDurationInput("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $duration[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty");
                    validStates.push(true);
                }








                // attendance
                $attendance.govUkRadios("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $attendance[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                validStates.push(true);
                if (isClassroomBased && !$.requiredValidate($attendance.find("input[type='radio']:checked").val()) && $radioDeliveryMode.find("input[type='radio']:checked").val() == "ClassroomBased") {
                    $attendance.govUkRadios("invalidState", $attendance.attr("val-required-message"));

                    var $anchor = document.createElement("a");
                    $anchor.href = "#Attendance";
                    $anchor.innerHTML = $attendance.attr("val-required-message");
                    $anchor.id = "error-hash-link-" + "a" + "-" + 1;

                    $errorSummary.govUkErrorSummary("add", $anchor);
                    $errorSummary.govUkErrorSummary("show");

                    validStates.push(false);
                }

                // study mode
                $studyMode.govUkRadios("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $studyMode[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                validStates.push(true);
                if (isClassroomBased && !$.requiredValidate($studyMode.find("input[type='radio']:checked").val()) && $radioDeliveryMode.find("input[type='radio']:checked").val() == "ClassroomBased") {
                    $studyMode.govUkRadios("invalidState", $studyMode.attr("val-required-message"));

                    var $anchor = document.createElement("a");
                    $anchor.href = "#Study";
                    $anchor.innerHTML = $studyMode.attr("val-required-message");
                    $anchor.id = "error-hash-link-" + "a" + "-" + 1;

                    $errorSummary.govUkErrorSummary("add", $anchor);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                if (!validStates.every(isAllValid)) {
                    $("html, body").animate({
                        scrollTop: $errorSummary.offset().top
                    }, 600);
                    $errorSummary.focus();
                }
            }

            $button.on("click", function (event) {
                event.preventDefault();
                validate();
                if (validStates.every(isAllValid)) {
                    $("#editCourseRun").submit();
                }
            });









            var replaceAll = function (search, find, replace) {
                return search.split(find).join(replace);
            };

            var makeRequestWithPayload = function (payload, success) {
                console.log(payload);
                var qs = $.param(payload);
                qs = replaceAll(qs, "%5B%5D", "");
                $.get("/EditCourseRun/AddNewVenue?" + qs, success);
            };



            var onSucess = function (data) {
                window.location.href = data;
            };

            $addNewVenueButton.on("click", function (e) {
                e.preventDefault();

                makeRequestWithPayload({
                    LearnAimRefTitle: $learnAimRefTitle.val(),
                    NotionalNVQLevelv2: $notionalNVQLevelv2.val(),
                    AwardOrgCode: $awardOrgCode.val(),
                    LearnAimRef: $learnAimRef.val(),
                        CourseName: $courseName.val(),
                        CourseId: $courseId.val(),
                        CourseRunId: $courseRunId.val(),
                    CourseProviderReference: $courseProviderReference.val(),
                    DeliveryMode: $radioDeliveryMode.find("input[type='radio']:checked").val(),
                    StartDateType: $("input[name='StartDateType']:checked").val(),
                    VenueId:$selectedVenue.val(),
                    Day:$day.val(),
                     Month:$month.val(),
                     Year:$year.val(),
                    Url: $url.val(),
                    Cost: $cost.val(),
                    CostDescription: $costDescription.val(),
                    Mode:$mode.val(),
                    //AdvancedLearnerLoan
                    DurationUnit: $duration.find("select").val(),
                    DurationLength: $duration.find("input").val(),
                    StudyMode: $studyMode.find("input[type='radio']:checked").val(),
                    AttendanceMode: $attendance.find("input[type='radio']:checked").val()


                },
                    onSucess);

            });

            $startDateRadios.change(function () {
                if ($("#SpecifiedStartDate").prop("checked") === true) {
                    $("#govuk-label-start_date").show();
                }

                if ($("#FlexibleStartDate").prop("checked") === true) {
                    $("#govuk-label-start_date").hide();
                    $("#Day").val("");
                    $("#Month").val("");
                    $("#Year").val("");

                }
            });

            $deliveryRadios.change(function () {
                var $venueChoice = $("#sectionVenue");
                var $fullPartTimeRadioButtons = $("#FullPartTimeRadioButtons");
                var $attendancePatternRadioButtons = $("#AttendancePatternRadioButtons");
                var $specifiedStartDate = $("#SpecifiedStartDate");
                var $flexibleStartDate = $("#FlexibleStartDate");

                var $attendancePattern = $("#@Model.AttendanceMode");
                var $studyMode = $("#@Model.StudyMode");

                switch (this.id) {
                    case "ClassroomBased":
                        {
                            $specifiedStartDate.prop("checked", true);
                            $flexibleStartDate.prop("checked", false);
                            $venueChoice.show();
                            $regionItemsCheckboxList.hide();
                            $fullPartTimeRadioButtons.show();
                            $attendancePatternRadioButtons.show();
                            isClassroomBased = true;
                            isOnline = false;
                            isWorkBased = false;
                            $attendancePattern.prop("checked", true);
                            $studyMode.prop("checked", true);
                            $regionSection.hide();

                            $("#govuk-label-start_date").show();

                            break;
                        }
                    case "Online":
                        {
                            $flexibleStartDate.prop("checked", true);
                            $specifiedStartDate.prop("checked", false);
                            $venueChoice.hide();
                            $regionItemsCheckboxList.hide();
                            $fullPartTimeRadioButtons.hide();
                            $attendancePatternRadioButtons.hide();
                            isClassroomBased = false;
                            isOnline = true;
                            isWorkBased = false;
                            $attendancePattern.prop("checked", false);
                            $studyMode.prop("checked", false);
                            $("#govuk-label-start_date").hide();
                            $regionSection.hide();

                            break;
                        }
                    case "WorkBased":
                        {
                            $flexibleStartDate.prop("checked", true);
                            $specifiedStartDate.prop("checked", false);
                            $venueChoice.hide();
                            $regionItemsCheckboxList.show();
                            $fullPartTimeRadioButtons.hide();
                            $attendancePatternRadioButtons.hide();
                            isClassroomBased = false;
                            isOnline = false;
                            isWorkBased = true;
                            $attendancePattern.prop("checked", false);
                            $studyMode.prop("checked", false);

                            if ($national.find("input[type='radio']:checked").val() === "False") {
                                $regionSection.show();
                            } else {
                                $regionSection.hide();
                            }

                            $("#govuk-label-start_date").hide();

                            break;
                        }
                }
            });
        });
    })(jQuery);
</script>
