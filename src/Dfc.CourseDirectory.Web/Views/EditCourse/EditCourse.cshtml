
@using Dfc.CourseDirectory.Models.Enums
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.CourseFor
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.EntryRequirements
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.FundingOptions
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.HowAssessed
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.HowYouWillLearn
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.WhatWillLearn
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.WhatYouNeed
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.WhereNext
@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@using FundingOptions = Dfc.CourseDirectory.Web.ViewComponents.Courses.FundingOptions.FundingOptions

@model Dfc.CourseDirectory.Web.ViewModels.EditCourse.EditCourseViewModel

@{
    Layout = "_Layout_Your_Courses";
}
<form asp-controller="EditCourse" asp-action="Index" method="post" id="editCourse">


    @Html.HiddenFor(x => x.AwardOrgCode)
    @Html.HiddenFor(x => x.LearnAimRef)
    @Html.HiddenFor(x => x.LearnAimRefTitle)
    @Html.HiddenFor(x => x.NotionalNVQLevelv2)
    @Html.HiddenFor(x => x.CourseName)

    @Html.HiddenFor(x => x.CourseId)
    @Html.HiddenFor(x => x.CourseRunId)
    @Html.HiddenFor(x => x.Mode)



    @await Component.InvokeAsync(nameof(Notification), new NotificationModel
   {

       NotificationTitle = "Qualification details",
       NotificationMessage = @Model.LearnAimRefTitle + "<br>" + "Level: " + @Model.NotionalNVQLevelv2 + "<br> Awarding organisation: " + @Model.AwardOrgCode + "<br> LARS / QAN: " + @Model.LearnAimRef,
       ClassType = "info-summary"
   })
    <h1 class="govuk-heading-l" style="padding-top: 20px;">
        Edit Course
    </h1>

    <div id="errorsummary" class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary" style="display: none;">
        <h2 class="govuk-error-summary__title" id="error-summary-title">
            There is an issue with this qualification
        </h2>
        <div class="govuk-error-summary__body">
            <ul class="govuk-list govuk-error-summary__list"></ul>
        </div>
    </div>

    <h3 class="govuk-heading-m">Course description</h3>

    <div class="section" id="sectionCourseFor">
        @await Component.InvokeAsync(nameof(CourseFor), Model.CourseFor)
    </div>
    <div class="section" id="sectionEntryRequirements">
        @await Component.InvokeAsync(nameof(EntryRequirements), Model.EntryRequirements)
    </div>
    <div class="section" id="sectionWhatWillLearn">
        @await Component.InvokeAsync(nameof(WhatWillLearn), Model.WhatWillLearn)
    </div>
    <div class="section" id="sectionHowYouWillLearn">
        @await Component.InvokeAsync(nameof(HowYouWillLearn), Model.HowYouWillLearn)
    </div>
    <div class="section" id="sectionWhatYouNeed">
        @await Component.InvokeAsync(nameof(WhatYouNeed), Model.WhatYouNeed)
    </div>
    <div class="section" id="sectionHowAssessed">
        @await Component.InvokeAsync(nameof(HowAssessed), Model.HowAssessed)
    </div>
    <div class="section" id="sectionWhereNext">
        @await Component.InvokeAsync(nameof(WhereNext), Model.WhereNext)
    </div>

    @*<div id="sectionFundingOptions">
            @await Component.InvokeAsync(nameof(FundingOptions), new FundingOptionsModel()
            {
                AdvancedLearnerLoan = Model.AdvancedLearnerLoan.Value,
                AdultEducationBudget = Model.AdultEducationBudget.Value,
                FundingOptionsHintText="",
                FundingOptionsLabelText ="Funding options",
                FundingOptionsAriaDescribedBy =""
            })
        </div>*@

    <ul class="flex-container">
        @{
            if (Model.Mode == PublishMode.Summary)
            {
                <li class="flex-item">
                    <button type="submit" class="govuk-button" id="save">
                        Update all courses with this qualification
                    </button>
                </li>
            }
            else
            {
                <li class="flex-item">
                    <button type="submit" class="govuk-button" id="save">
                        Save
                    </button>
                </li>
            }
        }

        <li class="flex-item" style="padding-top: 15px">
            @switch (Model.Mode)
            {
                case PublishMode.Migration:
                    @Html.ActionLink("Cancel", "Index", "PublishCourses", new { publishMode = Model.Mode }, new { @class = "govuk-link" })
                    break;
                case PublishMode.BulkUpload:
                    @Html.ActionLink("Cancel", "Index", "PublishCourses", new { publishMode = Model.Mode }, new { @class = "govuk-link" })
                    break;
                case PublishMode.Summary:
                    @Html.ActionLink("Cancel", "Index", "CourseSummary", new { Model.CourseId, Model.CourseRunId }, new { @class = "govuk-link" })
                    break;
                default:
                    @Html.ActionLink("Cancel", "Index", "PublishCourses", new
                    {
                   level = @Model.NotionalNVQLevelv2,
                   courseId = @Model.CourseId,
                   courseRunId = Model.CourseRunId,
                   learnAimRef = @Model.LearnAimRef,
                   notionalNVQLevelv2 = @Model.NotionalNVQLevelv2,
                   awardOrgCode = @Model.AwardOrgCode,
                   learnAimRefTitle = @Model.LearnAimRefTitle,
                   learnAimRefTypeDesc = @Model.QualificationType
               }, new { @class = "govuk-link" })
                    break;
            }
        </li>
    </ul>

</form>

<script>
    (function ($) {
        $(function () {
            var validStates = [];
            var $save = $("#save");
            var $errorSummary = $("#errorsummary").govUkErrorSummary();
            var $courseFor = $("#@nameof(Model.CourseFor)").govUkTextarea();
            var $entryRequirements = $("#@nameof(Model.EntryRequirements)").govUkTextarea();
            var $whatWillLearn = $("#@nameof(Model.WhatWillLearn)").govUkTextarea();
            var $howYouWillLearn = $("#@nameof(Model.HowYouWillLearn)").govUkTextarea();
            var $whatYouNeed = $("#@nameof(Model.WhatYouNeed)").govUkTextarea();
            var $howAssessed = $("#@nameof(Model.HowAssessed)").govUkTextarea();
            var $whereNext = $("#@nameof(Model.WhereNext)").govUkTextarea();

            setTimeout(validate, 500);

            function isAllValid(currentValue) {
                return currentValue === true;
            }

            function validate() {
                validStates = [];
                $errorSummary.govUkErrorSummary("empty");
                $courseFor.govUkTextarea("validState");
                $entryRequirements.govUkTextarea("validState");
                $whatWillLearn.govUkTextarea("validState");
                $howYouWillLearn.govUkTextarea("validState");
                $whatYouNeed.govUkTextarea("validState");
                $howAssessed.govUkTextarea("validState");
                $whereNext.govUkTextarea("validState");

                if (!$.requiredValidate($courseFor.val())) {
                    $courseFor.govUkTextarea("invalidState", $courseFor.attr("val-required-message"));
                    var courseForErrorHashLinks = $courseFor.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseForErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $courseFor.attr("val-regex") }, $courseFor.val())) {
                    $courseFor.govUkTextarea("invalidState", $courseFor.attr("val-regex-message"));
                    var courseForErrorHashLinks = $courseFor.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseForErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $courseFor.attr("val-max-length") }, $courseFor.val())) {
                    $courseFor.govUkTextarea("invalidState", $courseFor.attr("val-max-length-message"));
                    var courseForErrorHashLinks = $courseFor.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseForErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $courseFor.govUkTextarea("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $courseFor[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                if (!$.regexValidate({ regex: $entryRequirements.attr("val-regex") }, $entryRequirements.val())) {
                    $entryRequirements.govUkTextarea("invalidState", $entryRequirements.attr("val-regex-message"));
                    var entryRequirementsErrorHashLinks = $entryRequirements.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", entryRequirementsErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $entryRequirements.attr("val-max-length") }, $entryRequirements.val())) {
                    $entryRequirements.govUkTextarea("invalidState", $entryRequirements.attr("val-max-length-message"));
                    var entryRequirementsErrorHashLinks = $entryRequirements.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", entryRequirementsErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $entryRequirements.govUkTextarea("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $entryRequirements[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                //what will learn
                if (!$.regexValidate({ regex: $whatWillLearn.attr("val-regex") }, $whatWillLearn.val())) {
                    $whatWillLearn.govUkTextarea("invalidState", $whatWillLearn.attr("val-regex-message"));
                    var whatWillLearnErrorHashLinks = $whatWillLearn.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", whatWillLearnErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $whatWillLearn.attr("val-max-length") }, $whatWillLearn.val())) {
                    $whatWillLearn.govUkTextarea("invalidState", $whatWillLearn.attr("val-max-length-message"));
                    var whatWillLearnErrorHashLinks = $whatWillLearn.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", whatWillLearnErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $whatWillLearn.govUkTextarea("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $whatWillLearn[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                //how will learn
                if (!$.regexValidate({ regex: $howYouWillLearn.attr("val-regex") }, $howYouWillLearn.val())) {
                    $howYouWillLearn.govUkTextarea("invalidState", $howYouWillLearn.attr("val-regex-message"));
                    var howYouWillLearnErrorHashLinks = $howYouWillLearn.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", howYouWillLearnErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $howYouWillLearn.attr("val-max-length") }, $howYouWillLearn.val())) {
                    $howYouWillLearn.govUkTextarea("invalidState", $howYouWillLearn.attr("val-max-length-message"));
                    var howYouWillLearnErrorHashLinks = $howYouWillLearn.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", howYouWillLearnErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $howYouWillLearn.govUkTextarea("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $howYouWillLearn[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                //what you need
                if (!$.regexValidate({ regex: $whatYouNeed.attr("val-regex") }, $whatYouNeed.val())) {
                    $whatYouNeed.govUkTextarea("invalidState", $whatYouNeed.attr("val-regex-message"));
                    var whatYouNeedErrorHashLinks = $whatYouNeed.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", whatYouNeedErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $whatYouNeed.attr("val-max-length") }, $whatYouNeed.val())) {
                    $whatYouNeed.govUkTextarea("invalidState", $whatYouNeed.attr("val-max-length-message"));
                    var whatYouNeedErrorHashLinks = $whatYouNeed.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", whatYouNeedErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $whatYouNeed.govUkTextarea("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $whatYouNeed[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                //how assessed
                if (!$.regexValidate({ regex: $howAssessed.attr("val-regex") }, $howAssessed.val())) {
                    $howAssessed.govUkTextarea("invalidState", $howAssessed.attr("val-regex-message"));
                    var whatYouNeedErrorHashLinks = $howAssessed.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", whatYouNeedErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $howAssessed.attr("val-max-length") }, $howAssessed.val())) {
                    $howAssessed.govUkTextarea("invalidState", $howAssessed.attr("val-max-length-message"));
                    var howAssessedErrorHashLinks = $howAssessed.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", howAssessedErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $howAssessed.govUkTextarea("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $howAssessed[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                //where next
                if (!$.regexValidate({ regex: $howAssessed.attr("val-regex") }, $whereNext.val())) {
                    $whereNext.govUkTextarea("invalidState", $whereNext.attr("val-regex-message"));
                    var whereNextErrorHashLinks = $whereNext.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", whereNextErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $whereNext.attr("val-max-length") }, $whereNext.val())) {
                    $whereNext.govUkTextarea("invalidState", $whereNext.attr("val-max-length-message"));
                    var whereNextErrorHashLinks = $whereNext.govUkTextarea("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", whereNextErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                } else {
                    $whereNext.govUkTextarea("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $whereNext[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                }

                if (!validStates.every(isAllValid)) {
                    $("html, body").animate({
                        scrollTop: $errorSummary.offset().top
                    }, 600);
                    $errorSummary.focus();
                }
            }

            $save.on("click", function (e) {
                e.preventDefault();
                validate();
                if (validStates.every(isAllValid)) {
                   $("#editCourse").submit();
                }
            });
        });
    })(jQuery);
</script>
