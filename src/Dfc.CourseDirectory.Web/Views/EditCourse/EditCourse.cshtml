
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.CourseFor
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.EntryRequirements
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.FundingOptions
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.HowAssessed
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.HowYouWillLearn
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.WhatWillLearn
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.WhatYouNeed
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.WhereNext
@using Dfc.CourseDirectory.Web.ViewComponents.Notification

@model Dfc.CourseDirectory.Web.ViewModels.EditCourse.EditCourseViewModel

<form asp-controller="EditCourse" asp-action="Index" method="post" id="editCourse">

    @Html.HiddenFor(x => x.CourseId)
    @Html.HiddenFor(x => x.FromBulkUpload)

    <h1 class="govuk-heading-l" style="padding-top: 20px;">
        Edit Course
    </h1>

    <h3 class="govuk-heading-m">Course description</h3>

    <div id="sectionCourseFor">
        @await Component.InvokeAsync(nameof(CourseFor), Model.CourseFor)
    </div>
    <div id="sectionEntryRequirements">
        @await Component.InvokeAsync(nameof(EntryRequirements), Model.EntryRequirements)
    </div>
    <div id="sectionWhatWillLearn">
        @await Component.InvokeAsync(nameof(WhatWillLearn), Model.WhatWillLearn)
    </div>
    <div id="sectionHowYouWillLearn">
        @await Component.InvokeAsync(nameof(HowYouWillLearn), Model.HowYouWillLearn)
    </div>
    <div id="sectionWhatYouNeed">
        @await Component.InvokeAsync(nameof(WhatYouNeed), Model.WhatYouNeed)
    </div>
    <div id="sectionHowAssessed">
        @await Component.InvokeAsync(nameof(HowAssessed), Model.HowAssessed)
    </div>
    <div id="sectionWhereNext">
        @await Component.InvokeAsync(nameof(WhereNext), Model.WhereNext)
    </div>

    <div id="sectionFundingOptions">
        @await Component.InvokeAsync(nameof(FundingOptions), new FundingOptionsModel()
        {
            AdvancedLearnerLoan = Model.AdvancedLearnerLoan.Value,
            AdultEducationBudget = Model.AdultEducationBudget.Value,
        FundingOptionsHintText="",
        FundingOptionsLabelText ="Funding options",
        FundingOptionsAriaDescribedBy =""

        })
    </div>

    <div class="govuk-form-group">
        <button type="submit" class="govuk-button" id="save">
            Save
        </button>

        @if (Model.FromBulkUpload.Value)
        {
            @Html.ActionLink("Cancel", "Index", "PublishCourses", new { qualificationType = @Model.QualificationType }, new { @class = "govuk-link" })
        }
        else
        {
            @Html.ActionLink("Cancel", "Courses", "Provider", new { level = @Model.NotionalNVQLevelv2 }, new { @class = "govuk-link" })
        }

    </div>

</form>

<script>
    (function ($) {
        $(function () {
            var $save = $("#save");
            var $courseFor = $("#@nameof(Model.CourseFor)").govUkTextarea();
            var $entryRequirements = $("#@nameof(Model.EntryRequirements)").govUkTextarea();
            var $whatWillLearn = $("#@nameof(Model.WhatWillLearn)").govUkTextarea();
            var $howYouWillLearn = $("#@nameof(Model.HowYouWillLearn)").govUkTextarea();
            var $whatYouNeed = $("#@nameof(Model.WhatYouNeed)").govUkTextarea();
            var $howAssessed = $("#@nameof(Model.HowAssessed)").govUkTextarea();
            var $whereNext = $("#@nameof(Model.WhereNext)").govUkTextarea();


            function isAllValid(currentValue) {
                return currentValue === true;
            }

            $save.on("click", function (e) {
                e.preventDefault();



                var validStates = [];


                if (!$.requiredValidate($courseFor.val())) {
                    $courseFor.govUkTextarea("invalidState", $courseFor.attr("val-required-message"));
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $courseFor.attr("val-regex") }, $courseFor.val())) {
                    $courseFor.govUkTextarea("invalidState", $courseFor.attr("val-regex-message"));
                    validStates.push(false);
                }else if (
                    !$.maxLengthValidate({ max: $courseFor.attr("val-max-length") }, $courseFor.val())) {
                    $courseFor.govUkTextarea("invalidState", $courseFor.attr("val-max-length-message"));
                    validStates.push(false);
                }
                else {

                    $courseFor.govUkInput("validState");
                    validStates.push(true);
                }

                if (!$.regexValidate({ regex: $entryRequirements.attr("val-regex") }, $entryRequirements.val())) {
                    $entryRequirements.govUkTextarea("invalidState", $entryRequirements.attr("val-regex-message"));
                    validStates.push(false);
                }else if (
                    !$.maxLengthValidate({ max: $entryRequirements.attr("val-max-length") }, $entryRequirements.val())) {
                    $entryRequirements.govUkTextarea("invalidState", $entryRequirements.attr("val-max-length-message"));
                    validStates.push(false);                }
                else {

                    $entryRequirements.govUkTextarea("validState");
                    validStates.push(true);
                }

                //what will learn
                if (!$.regexValidate({ regex: $whatWillLearn.attr("val-regex") }, $whatWillLearn.val())) {
                    $whatWillLearn.govUkTextarea("invalidState", $whatWillLearn.attr("val-regex-message"));
                    validStates.push(false);
                }else if (
                    !$.maxLengthValidate({ max: $whatWillLearn.attr("val-max-length") }, $whatWillLearn.val())) {
                    $whatWillLearn.govUkTextarea("invalidState", $whatWillLearn.attr("val-max-length-message"));
                    validStates.push(false);                }
                else {

                    $whatWillLearn.govUkTextarea("validState");
                    validStates.push(true);
                }

                //how will learn
                if (!$.regexValidate({ regex: $howYouWillLearn.attr("val-regex") }, $howYouWillLearn.val())) {
                    $howYouWillLearn.govUkTextarea("invalidState", $howYouWillLearn.attr("val-regex-message"));
                    validStates.push(false);
                }else if (
                    !$.maxLengthValidate({ max: $howYouWillLearn.attr("val-max-length") }, $howYouWillLearn.val())) {
                    $howYouWillLearn.govUkTextarea("invalidState", $howYouWillLearn.attr("val-max-length-message"));
                    validStates.push(false);                }
                else {

                    $howYouWillLearn.govUkTextarea("validState");
                    validStates.push(true);
                }

                //what you need
                if (!$.regexValidate({ regex: $whatYouNeed.attr("val-regex") }, $whatYouNeed.val())) {
                    $whatYouNeed.govUkTextarea("invalidState", $whatYouNeed.attr("val-regex-message"));
                    validStates.push(false);
                }else if (
                    !$.maxLengthValidate({ max: $whatYouNeed.attr("val-max-length") }, $whatYouNeed.val())) {
                    $whatYouNeed.govUkTextarea("invalidState", $whatYouNeed.attr("val-max-length-message"));
                    validStates.push(false);                }
                else {

                    $whatYouNeed.govUkTextarea("validState");
                    validStates.push(true);
                }

                //how assessed
                if (!$.regexValidate({ regex: $howAssessed.attr("val-regex") }, $howAssessed.val())) {
                    $howAssessed.govUkTextarea("invalidState", $howAssessed.attr("val-regex-message"));
                    validStates.push(false);
                }else if (
                    !$.maxLengthValidate({ max: $howAssessed.attr("val-max-length") }, $howAssessed.val())) {
                    $howAssessed.govUkTextarea("invalidState", $howAssessed.attr("val-max-length-message"));
                    validStates.push(false);                }
                else {

                    $howAssessed.govUkTextarea("validState");
                    validStates.push(true);
                }

                //where next
                if (!$.regexValidate({ regex: $howAssessed.attr("val-regex") }, $whereNext.val())) {
                    $whereNext.govUkTextarea("invalidState", $whereNext.attr("val-regex-message"));
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $whereNext.attr("val-max-length") }, $whereNext.val())) {
                    $whereNext.govUkTextarea("invalidState", $whereNext.attr("val-max-length-message"));
                    validStates.push(false);
                }
                else {

                    $whereNext.govUkTextarea("validState");
                    validStates.push(true);
                }

                if (validStates.every(isAllValid)) {

                    //alert("OK");
                   $("#editCourse").submit();
                } else {
                    //alert("error");
                }

            });

        });
    })(jQuery);
</script>
