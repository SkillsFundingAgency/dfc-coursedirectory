@using Dfc.CourseDirectory.Core.Models
@using Dfc.CourseDirectory.Services.Models
@using Dfc.CourseDirectory.Web.Helpers
@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@{
    ViewData["Title"] = "Select delivery options";
    Layout = "_Layout_Your_Courses";
}


<div class="cd-dashboard govuk-body ">
    <form class="govuk-!-margin-bottom-9" id="editDeliveryMethod" asp-controller="EditDeliveryMethod" asp-action="Index" method="post">

        @if (!string.IsNullOrEmpty(@ViewBag.Message))
        {
            @await Component.InvokeAsync(nameof(Notification), new NotificationModel
            {
                NotificationTitle = "",
                NotificationMessage = @ViewBag.Message,
                ClassType = "info-summary"
            })
        }

        <h1 class="govuk-heading-l">Select delivery options</h1>

        <div class="govuk-form-group">
            <fieldset class="govuk-fieldset">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h2 class="govuk-fieldset__heading">
                        How is the training delivered at this venue?
                    </h2>
                </legend>
                <span class="govuk-hint">
                    Select all that apply.
                </span>
                <div class="govuk-checkboxes govuk-checkboxes--small" id="deliveryoptions" val-required-message="Select how is the training delivered at this venue">
                </div>
            </fieldset>
        </div>
        <div class="cta-container">
            <button type="submit" class="govuk-button" id="continue" value="continue">
                Save
            </button>

        </div>


    </form>


</div>





<script>
    (function ($) {
        $(function () {
            var $SaveAndContinue = $("#next1");
            var $AddAnother = $("#next2");
            var validStates = [];
            var $errorSummary = $("#errorsummary").govUkErrorSummary();
            var $selectedVenue = $("#@nameof(Model.LocationId)").govUkSelect();
            var $checkboxesdeliverymethod = $("#deliveryoptions").govUkCheckboxes();
            var $TooManyLoctions = $("#TooManyLocations");
            var $Continue = $("#continue");
            var returnToSummery = @(Model.HasOtherDeliveryOptions.ToString().ToLower());


        var $DayRelease = $("#@nameof(Model.DayRelease)")
    var $BlockRelease = $("#@nameof(Model.BlockRelease)")

            function isAllValid(currentValue) {
                return currentValue === true;
            }

            function validate() {

                validStates = [];
                $errorSummary.govUkErrorSummary("removeAll");
                $selectedVenue.govUkSelect("validState");
                $checkboxesdeliverymethod.govUkCheckboxes("validState");




                // venue
                $selectedVenue.govUkSelect("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $selectedVenue[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                validStates.push(true);
                if (!$.requiredValidate($selectedVenue.val())) {
                    $selectedVenue.govUkSelect("invalidState", $selectedVenue.attr("val-required-message"));
                    var selectedVenueErrorHashLinks = $selectedVenue.govUkSelect("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", selectedVenueErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                $checkboxesdeliverymethod.govUkCheckboxes("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $checkboxesdeliverymethod[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty");
                validStates.push(true);
                if ($.requiredValidate($checkboxesdeliverymethod.find("input[type='checkbox']:checked").val())) {
                    $checkboxesdeliverymethod.govUkCheckboxes("validState");
                    validStates.push(true);
                } else {
                    $checkboxesdeliverymethod.govUkCheckboxes("invalidState", $checkboxesdeliverymethod.attr("val-required-message"));
                    var deliveryMethodErrorHashLinks = $checkboxesdeliverymethod.govUkCheckboxes("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", deliveryMethodErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }



                if (!validStates.every(isAllValid)) {
                    $("html, body").animate({
                        scrollTop: $errorSummary.offset().top
                    }, 600);
                    $errorSummary.focus();
                }
            }




            $Continue.on("click", function (event) {
                 event.preventDefault();
                 validate();
                if (validStates.every(isAllValid)) {
                    $("#editDeliveryMethod").submit();
                }

            });

        });
    })(jQuery);
</script>


