@using Dfc.CourseDirectory.Web.ViewComponents.SearchProviderResults
@using Dfc.CourseDirectory.Web.ViewModels.SearchProvider
@model SearchProviderResultsViewModel
@{
    ViewData["Title"] = "Search Providers";
    Layout = "_Layout_Your_Courses";
    ViewContext.SetLayoutData(activeAdminTopNavSection: AdminTopNavSection.SearchProviders);
}

<div>
    <div class="cd-hero-green">
        <div class="">
            <header class="cd-hero-search">
                <div class="content-container">

                    <div class="grid-row" data-sf-element="Row">
                        <div class="column-two-thirds">
                            <div>
                                <h1 class="govuk-heading-l govuk-!-margin-top-4">Search providers</h1>
                                <p class="column-two-thirds govuk-heading-m" id="searchLabel" for="providerSearchTerm">Search by UKPRN, Name or Address</p>
                            </div>
                            <form class="site-search ui-front" id="header-search">
                                <div class="search-input-wrapper">
                                    <input class="govuk-input search-input js-search-focus" placeholder="Search" aria-labelledby="searchLabel" id="providerSearchTerm" name="providerSearchTerm" type="text" autofocus>
                                    <div class="cd-c-search__item cd-search__submit-wrapper">
                                        <button type="button" class="submit" id="searchProvider">Search</button>
                                    </div>
                                </div>

                            </form>
                        </div>
                    </div>
                </div>

            </header>
        </div>
    </div>

    <div id="ProviderSearchResultContainer">
        @await Component.InvokeAsync(nameof(SearchProviderResults), Model)
    </div>
</div>

<script>
    (function ($) {
        $(function () {
            var debounce = function (cb, delay) {
                var inDebounce;
                return function () {
                    var context = this;
                    var args = arguments;
                    clearTimeout(inDebounce);
                    inDebounce = setTimeout(function () {
                        cb.apply(context, args);
                    },
                        delay);
                };
            };

            var isNullOrWhitespace = function (input) {
                if (typeof input === 'undefined' || input == null) return true;
                return input.length < 3;
            }

            var makeRequestWithPayload = function (payload, success) {
                console.log(payload);
                $.get("/SearchProvider/Search/?keyword=" + encodeURIComponent(payload), success);
            };

            var removeSearchResults = function () {
                var $searchResultContainer = $("#ProviderSearchResultContainer");
                $searchResultContainer.html("");
            };

            var replaceSearchResult = function (searchResults) {
                var $searchResultContainer = $("#ProviderSearchResultContainer");
                $searchResultContainer.html("");
                $searchResultContainer.html(searchResults);
            };

            var $searchTerm = $("#providerSearchTerm");
            var $buttonSearch = $("#searchProvider");

            var doSearch = function () {
                if (isNullOrWhitespace($searchTerm.val())) {
                    removeSearchResults();
                } else {
                    makeRequestWithPayload($searchTerm.val(), onSuccess);
                }
            };

            var onSuccess = function (data) {
                replaceSearchResult(data);
            };

            $searchTerm.on("keyup", debounce(doSearch, 400));
            $buttonSearch.on("click", doSearch);

            $(document).keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                }
            });
        });
    })(jQuery);
</script>
