@using Dfc.CourseDirectory.Models.Enums
@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@using Dfc.CourseDirectory.Web.ViewComponents.ProviderCoursesResults
@{
    Layout = "_Layout_Your_Courses";
}

@model Dfc.CourseDirectory.Web.ViewModels.ProviderCourses.ProviderCoursesViewModel
@{
    var hasCourses = Model.ProviderCourseRuns != null && Model.ProviderCourseRuns.Any();

    if (!hasCourses)
    {
<div class="govuk-body">
    <main id="Cd-course-list" class="govuk-main-wrapper">
        <span class="govuk-caption-xl">Course directory</span>
        <h1 class="govuk-heading-xl">Your published courses</h1>


        <p class="govuk-body-l">
            You have no courses listed on the course directory.
        </p>
        <h3 class="govukbody govuk-heading-m">What next?</h3>

        <p>
            <span class="govuk-caption-xl">You can</span>
        </p>

        <ul>
            <li>
                <p>
                    <a href="~/RegulatedQualification" class="govuk-link">publish a course </a>to the course directory
                </p>
            </li>
            <li>
                <p>
                    <a href="~/BulkUpload" class="govuk-link">publish all your courses </a> with a file upload
                </p>
            </li>
            @if (Model.PendingCoursesCount.HasValue && Model.PendingCoursesCount.Value > 0)
            {
            <li>
                <p>
                    <a href="~/Migration" class="govuk-link">or add information to @Model.PendingCoursesCount of your courses </a>that can’t be published until they are fixed
                </p>
            </li>
            }
        </ul>


    </main>
</div>
    }
    else
    {


<div class="cd-hero-grey">
  
        <header class="cd-hero-search">
            <div class="content-container">
                <div class="grid-row" data-sf-element="Row">
                    <div class="column-two-thirds">
                        <div>

                            <span class="govuk-caption-xl">Course directory</span>

                            @if (!string.IsNullOrWhiteSpace(Model.NotificationTitle))
                            {
                                @await Component.InvokeAsync(nameof(Notification), new NotificationModel
                                {
                                    NotificationTitle = Model.NotificationTitle,
                                    NotificationMessage = Model.NotificationMessage,
                                    ClassType = "info-summary"
                                })
                            }
                            <h1 class="govuk-heading-xl">Your published courses</h1>
                            <p class="govuk-body-l">These are the courses you have listed on the course directory.</p>
                        </div>
                        <form class="govuk-!-margin-bottom-9" id="zCodeSearch" asp-controller="ProviderCourses" asp-action="FilterCourses" method="post">
                            <div class="header-search-content">
                                <span asp-validation-for="@Model.Search" class="govuk-error-message"></span>
                                <div class="search-input-wrapper">


                                    <input class="govuk-input search-input js-search-focus" asp-for="@Model.Search" type="text">
                                    <div class="cd-c-search__item cd-search__submit-wrapper">
                                        <button type="button" class=" submit" id="searchButton">Search</button>
                                    </div>
                                </div>
                            </div>
                        </form>

                        <div class="govuk-grid-row  ">

                            <div id="results">

                                @await Component.InvokeAsync(nameof(ProviderCoursesResults), Model)
                            </div>

                        </div>

                    </div>
                </div>
            </div>
        </header>
    </div>





    }
}
<script>
    (function ($) {
        $(function () {

             var formGroupErrorClass = "govuk-form-group--error";
            var elementErrorClass = "govuk-input--error";

            var $searchForm = $("#zCodeSearch");


            var $elementSearchTerm = $("#@nameof(Model.Search)");

            var $validationMessageSearchTerm = $elementSearchTerm.prev("[data-valmsg-for='@nameof(Model.Search)']");
            $validationMessageSearchTerm.css("margin-bottom", "0");

            var $formGroupSearchTerm = $elementSearchTerm.closest('.govuk-form-group');
            var $form = $elementSearchTerm.closest("form");

            $form.addTriggersToJqueryValidate().triggerElementValidationsOnFormValidation();
            var validator = $form.validate();


            var $buttonSearch = $("#searchButton");


            var assignEventsToAllCheckboxes = function () {
                var $levelFilterCheckboxes = $("input[name='level']:checkbox");
                var $deliverymodeFilterCheckboxes = $("input[name='deliverymode']:checkbox");
                var $venueFilterCheckboxes = $("input[name='venue']:checkbox");
                var $attendancePatternFilterCheckboxes = $("input[name='attendancepattern']:checkbox");
                var $regionFilterCheckboxes = $("input[name='region']:checkbox");

                $levelFilterCheckboxes.on("click", debounce(doSearch, 1500));
                $deliverymodeFilterCheckboxes.on("click", debounce(doSearch, 1500));
                $venueFilterCheckboxes.on("click", debounce(doSearch, 1500));
                $attendancePatternFilterCheckboxes.on("click", debounce(doSearch, 1500));
                $regionFilterCheckboxes.on("click", debounce(doSearch, 1500));
            };
            
            $(document).ready(function () {
                assignEventsToAllCheckboxes();

                var courseRunGuid = '@Model.CourseRunId';
                
                var summary = $("#cd-info-summary");
                if (courseRunGuid !== "" || courseRunGuid !== undefined && summary === undefined) {
                    var $courseRunId = $("#" + courseRunGuid);
                    $("html,body").animate({
                        scrollTop: $courseRunId.offset().top
                    }, "slow");
                }
            });

            var debounce = function (cb, delay) {
                var inDebounce;
                return function () {
                    var context = this;
                    var args = arguments;
                    clearTimeout(inDebounce);
                    inDebounce = setTimeout(function () {
                        cb.apply(context, args);
                    },
                        delay);
                };
            };

            var isNullOrWhitespace = function (input) {
                if (typeof input === 'undefined' || input == null) return true;
                return input.replace(/\s/g, '').length < 3;
            }

            var replaceAll = function (search, find, replace) {
                return search.split(find).join(replace);
            };

            var makeRequestWithUrl = function (url, success) {
                console.log(url);
                $.get(url, success);
            };



            var doSearch = function () {
                $(".cd-info-summary").hide();



                var runSearch = false;
                if (($elementSearchTerm.val().length > 0)) {

                    if (isNullOrWhitespace($elementSearchTerm.val())) {

                    } else {
                        runSearch = true;
                    }
                } else {
                    runSearch = true;
                }



                if (runSearch === true) {
                    var $allCheckedLevelFilterCheckboxes =
                        $("input[name='level']:checkbox:checked");
                    var $allCheckedDeliveryModeFilterCheckboxes =
                        $("input[name='deliverymode']:checkbox:checked");
                    var $allCheckedVenuesFilterCheckboxes =
                        $("input[name='venue']:checkbox:checked");
                    var $allCheckedAttendancePatternFilterCheckboxes =
                        $("input[name='attendancepattern']:checkbox:checked");
                    var $allCheckedRegionFilterCheckboxes =
                        $("input[name='region']:checkbox:checked");

                    makeRequestWithPayload({
                        Keyword: $elementSearchTerm.val(),
                        LevelFilter: $allCheckedLevelFilterCheckboxes.map(function () {
                            return $(this).val();
                        }).get(),
                        DeliveryModeFilter: $allCheckedDeliveryModeFilterCheckboxes.map(function () {
                            return $(this).val();
                        }).get(),
                        VenueFilter: $allCheckedVenuesFilterCheckboxes.map(function () {
                            return $(this).val();
                        }).get(),
                        AttendancePatternFilter: $allCheckedAttendancePatternFilterCheckboxes.map(function () {
                            return $(this).val();
                        }).get(),
                        RegionFilter: $allCheckedRegionFilterCheckboxes.map(function () {
                            return $(this).val();
                        }).get()
                    },
                        onSucess);
                }

            };


            var assignEventToClearAllFiltersLink = function () {
                var $clearAllFiltersLink = $("#ClearAllFilters");

                $clearAllFiltersLink.on("click",
                    function (e) {
                        e.preventDefault();
                        var $allCheckedFilterCheckboxes = $(
                            "input[name='level']:checkbox, input[name='deliverymode']:checkbox, input[name='venue']:checkbox, input[name='attendancepattern']:checkbox, input[name='region']:checkbox");
                        var allCheckedFilterCheckboxesLength = $allCheckedFilterCheckboxes.length;

                        for (var i = 0; i < allCheckedFilterCheckboxesLength; i++) {

                            $($allCheckedFilterCheckboxes[i]).prop('checked', false);

                        }

                        doSearch();
                    });
            };


            var onSucess = function (data) {

                $('#results').html("");
                $('#results').html(data);


                assignEventsToAllCheckboxes();
                assignEventToClearAllFiltersLink();
            };

            var replaceAll = function (search, find, replace) {
                return search.split(find).join(replace);
            };

            var makeRequestWithPayload = function (payload, success) {
                console.log(payload);
                var qs = $.param(payload);
                qs = replaceAll(qs, "%5B%5D", "");
                $.get("/ProviderCourses/FilterCourses?" + qs, success);
            };

             function ShowValidationErrorMessage() {
                    $elementSearchTerm.addClass(elementErrorClass);
                    $formGroupSearchTerm.addClass(formGroupErrorClass);
                    $searchForm.addClass("govuk-form-group, govuk-form-group--error");
                    $validationMessageSearchTerm.show();
                    $validationMessageSearchTerm.css("margin-bottom", "15px");
            }
            function HideValidationErrorMessage() {
                    $elementSearchTerm.removeClass(elementErrorClass);
                    $formGroupSearchTerm.removeClass(formGroupErrorClass);
                    $searchForm.removeClass("govuk-form-group, govuk-form-group--error");
                    $validationMessageSearchTerm.hide();
                    $validationMessageSearchTerm.css("margin-bottom", "0");
            }


             $buttonSearch.on("click", function () {

                var result = validator.element($elementSearchTerm);
                if (result) {
                    HideValidationErrorMessage();
                    doSearch();
                } else {
                    ShowValidationErrorMessage();
                }
             });

              $elementSearchTerm.on("blur", function () {

                var result = validator.element($elementSearchTerm);
                if (result) {
                    HideValidationErrorMessage();
                    doSearch();
                } else {
                    ShowValidationErrorMessage();
                }
              });

                $elementSearchTerm.on("keyup", function () {

                var result = validator.element($elementSearchTerm);
                if (result) {
                    HideValidationErrorMessage();
                    doSearch();
                } else {
                    ShowValidationErrorMessage();
                }
              });

      function ValidateAndSearchForProvider() {
                var trimmed = $elementSearchTerm.val().trim();
                $elementSearchTerm.val(trimmed);
                $elementSearchTerm.trigger("blur");
                var result = validator.element($elementSearchTerm);
                if (result) {

                    HideValidationErrorMessage();
                    doSearch();
                }
                else {
                    ShowValidationErrorMessage();
                }
            }

            $(document).keypress(function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                  ValidateAndSearchForProvider();
                }
            });

            $courseeditlink = $("#courseeditlink");
            if ($courseeditlink.length) {
                $courseeditlink.on("click", function (event) {
                    event.preventDefault();
                    var courseRunId = $(this).attr('data-courserunid');
                    var $courseRunId = $("#" + courseRunId);


                    if (courseRunId !== "" || courseRunId !== undefined) {
                        $("html,body").animate({
                            scrollTop: $courseRunId.offset().top
                        }, "slow");
                    }


                });
            }

        });
    })(jQuery);
</script>
