@using Dfc.CourseDirectory.Models.Enums
@using Dfc.CourseDirectory.Models.Models.Courses
@using Dfc.CourseDirectory.Models.Models.Venues
@using Dfc.CourseDirectory.Web.Extensions
@using Dfc.CourseDirectory.Web.ViewComponents.CourseName
@using Dfc.CourseDirectory.Web.ViewComponents.CourseProviderReference
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.AddStartDate
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Attendance
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.ChooseVenue
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Cost
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.DeliveryType
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.Duration
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.StudyMode
@using Dfc.CourseDirectory.Web.ViewComponents.Extensions
@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@using Dfc.CourseDirectory.Web.ViewComponents.UrlInput
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.ChooseRegion
@using Microsoft.AspNetCore.Http
@using StudyMode = Dfc.CourseDirectory.Models.Models.Courses.StudyMode
@model Dfc.CourseDirectory.Web.ViewModels.CopyCourse.CopyCourseRunViewModel
@{
    Layout = "_Layout_Your_Courses";
}
@inject IHttpContextAccessor HttpContextAccessor
<h1 class="govuk-heading-l" style="padding-top: 20px;">
    Copy course
</h1>

@{
    var newVenueObject = HttpContextAccessor.HttpContext.Session.GetObject<AddedVenueModel>("NewAddedVenue");
    if (newVenueObject != null)
    {
        string message = "";
        if (!string.IsNullOrWhiteSpace(newVenueObject.VenueName))
        {
            message += string.Concat(newVenueObject.VenueName, ", ");
        }
        if (!string.IsNullOrWhiteSpace(newVenueObject.AddressLine1))
        {
            message += string.Concat(newVenueObject.AddressLine1, ", ");
        }
        if (!string.IsNullOrWhiteSpace(newVenueObject.AddressLine2))
        {
            message += string.Concat(newVenueObject.AddressLine2, ", ");
        }
        if (!string.IsNullOrWhiteSpace(newVenueObject.Town))
        {
            message += string.Concat(newVenueObject.Town, ", ");
        }
        if (!string.IsNullOrWhiteSpace(newVenueObject.County))
        {
            message += string.Concat(@newVenueObject.County, ", ");
        }
        if (!string.IsNullOrWhiteSpace(newVenueObject.PostCode))
        {
            message += newVenueObject.PostCode;

        }

        @await Component.InvokeAsync(nameof(Notification), new NotificationModel
        {
            NotificationTitle = "New venue added:",
            NotificationMessage = message,
            ClassType = "success-summary"
        })
    }
}

@await Component.InvokeAsync(nameof(Notification), new NotificationModel
{
    NotificationTitle = "Qualification details",
    NotificationMessage = @Model.CourseName + "<br>" + "Level: " + @Model.NotionalNVQLevelv2 + "<br> Awarding organisation: " + @Model.AwardOrgCode + "<br> LARS / QAN: " + @Model.LearnAimRef,
    ClassType = "info-summary"
})

<form asp-controller="CopyCourseRun" asp-action="Index" id="editCourseRun" onkeypress="return event.keyCode != 13;">

    <div id="errorsummary" style="display:none">
        @await Component.InvokeAsync(nameof(Notification), new NotificationModel
   {

       NotificationTitle = "There is an issue with this qualification",
       NotificationMessage = "",
       ClassType = "error-summary"
   })
    </div>

    @Html.HiddenFor(x => x.CourseId)
    @Html.HiddenFor(x => x.CourseRunId)
    @Html.HiddenFor(x => x.QualificationType)
    @Html.HiddenFor(x => x.LearnAimRefTitle)
    @Html.HiddenFor(x => x.NotionalNVQLevelv2)
    @Html.HiddenFor(x => x.AwardOrgCode)
    @Html.HiddenFor(x => x.LearnAimRef)


    <div class="section" id="sectionCourseName">
        @await Component.InvokeAsync(nameof(CourseName), new CourseNameModel
   {
       CourseName = Model.CourseName,
       LabelText = "Course name",
       HintText = "This is the name people will see when they search for your course.",
       AriaDescribedBy = "Please enter the course name."
   })
    </div>

    <div class="section" id="sectionCourseProviderReference">
        @await Component.InvokeAsync(nameof(CourseProviderReference), new CourseProviderReferenceModel
   {
       CourseProviderReference = Model.CourseProviderReference,
       LabelText = "ID",
       HintText = "This is how you identify a course in your internal system.",
       AriaDescribedBy = "Please enter the ID for this course"
   })
    </div>

    <div class="section" id="sectionDeliveryType">
        @await Component.InvokeAsync(nameof(DeliveryType), new DeliveryTypeModel
   {
       DeliveryMode = Model.DeliveryMode,
       LabelText = "Delivery Mode",
       HintText = "How will this course be delivered",
       SecondHintText = "Select how you will deliver this course",
       AriaDescribedBy = "Select how you will deliver this course"
   })
    </div>

    <div class="section" id="sectionStartDate">
        @await Component.InvokeAsync(nameof(AddStartDate), new AddStartDateModel()
   {
       StartDateType = Model.StartDateType,
       Day = Model.Day,
       Month = Model.Month,
       Year = Model.Year,
       DayAriaDescribedBy = "",
       DayLabelText = "Day",
       MonthAriaDescribedBy = "",
       MonthLabelText = "Month",
       YearAriaDescribedBy = "",
       YearLabelText = "Year",
       AriaDescribedBy = "",
       SpecifiedDateHintText = "e.g. For example, 30 9 2019",
       FlexibleDateHintText = "Or select a flexible start date:",
       LabelText = "Start date"
   })
    </div>

    <div class="section" id="sectionVenue" style="@Model.DeliveryMode.IfNotClassroomBasedDisplayNone()">
        @{var displayLink = true;
            if (Model.PublishMode == PublishMode.BulkUpload || Model.PublishMode == PublishMode.Migration)
            {
                displayLink = false;
            }
        }
        @await Component.InvokeAsync(nameof(ChooseVenue), new ChooseVenueModel()
   {
       LabelText = "Venue",
       AriaDescribedBy = "Venue",
       HintText = "Select course run venue",
       Venues = Model.Venues,
       VenueId = Model.VenueId,
       DisplayLink = displayLink
   })

    </div>

    <div class="govuk-form-group" id="RegionItemsCheckboxList" style="@Model.DeliveryMode.IfNotWorkBasedDisplayNone()">
        <div id="sectionRegions">
            @await Component.InvokeAsync(nameof(ChooseRegion), Model.ChooseRegion)
        </div>
    </div>




    <div class="section" id="sectionUrl">
        @await Component.InvokeAsync(nameof(UrlInput), new UrlInputModel
   {
       Url = Model.Url,
       LabelText = "URL",
       HintText = "Enter the URL for this course e.g. http://www.google.com",
       AriaDescribedBy = "Enter the URL for this course"
   })
    </div>

    <div class="section" id="sectionCost">
        @await Component.InvokeAsync(nameof(Cost), new CostModel
   {
       Cost = Model.Cost,
       CostDescription = Model.CostDescription,
       CostLabelText = "Cost",
       CostHintText = "Enter the cost for the course in pounds and pence e.g. 125.00",
       CostAriaDescribedBy = "Enter the cost in pounds and pence",
       CostDescriptionLabelText = "Cost description",
       CostDescriptionHintText = "Enter details related to the cost of this course",
       CostDescriptionAriaDescribedBy = "Enter details of related to the cost of this course"
   })
    </div>

    <div class="section" id="sectionDuration">
        @await Component.InvokeAsync(nameof(Duration), new DurationModel
   {
       DurationLength = Model.DurationLength,
       DurationUnit = Model.DurationUnit,
       LabelText = "Duration",
       HintText = "Select the duration of the course",
       AriaDescribedBy = "Select course duration"
   })
    </div>


    <div class="section" id="FullPartTimeRadioButtons" style="display: none;">
        @await Component.InvokeAsync(nameof(Dfc.CourseDirectory.Web.ViewComponents.Courses.StudyMode.StudyMode), new StudyModeModel
   {
       StudyMode = Model.StudyMode,
       LabelText = "Full time or part time",
       HintText = "Select the attendance pattern"
   })
    </div>

    <div class="section" id="AttendancePatternRadioButtons" style="display: none;">
        @await Component.InvokeAsync(nameof(Attendance), new AttendanceModel
   {
       AttendanceMode = Model.AttendanceMode,
       LabelText = "Attendance",
       HintText = "Select the time of day the course takes place"
   })
    </div>
    <ul class="flex-container">
        <li class="flex-item">
            <button name="saveButton" type="submit" class="govuk-button" id="save">
                Save
            </button>
        </li>
        <li class="flex-item" style="padding-top: 15px">
            @{
                switch (Model.PublishMode)
                {
                    case PublishMode.Summary:
                        {
                            @Html.ActionLink("Cancel", "Index", "CourseSummary", new { Model.CourseId, Model.CourseRunId }, new { @class = "govuk-link" })
                            break;
                        }
                    default:
                        {
                            @Html.ActionLink("Cancel", "Courses", "Provider", new { qualificationType = @Model.QualificationType }, new { @class = "govuk-link" })
                            break;
                        }
                }
            }

        </li>


    </ul>




</form>


<script>
    (function($) {
        $(function () {
            var $addNewVenueButton = $("#addNewVenue");
            var $courseId = $("#@nameof(Model.CourseId)");
            var $courseRunId = $("#@nameof(Model.CourseRunId)");

            var $learnAimRefTitle = $("#@nameof(Model.LearnAimRefTitle)");
            var $notionalNVQLevelv2 = $("#@nameof(Model.NotionalNVQLevelv2)");
            var $awardOrgCode = $("#@nameof(Model.AwardOrgCode)");
            var $learnAimRef = $("#@nameof(Model.LearnAimRef)");

            var $day = $("#Day");
            var $month = $("#Month");
            var $year = $("#Year");

            var validStates = [];
            var $courseName = $("#@nameof(Model.CourseName)").govUkInput();
            var $URL = $("#@nameof(Model.Url)").govUkInput();
            var $courseProviderReference = $("#@nameof(Model.CourseProviderReference)").govUkInput();
            var $deliveryRadios = $("#DeliveryModeRadioButtons input[type=radio]");
            var $regionItemsCheckboxList = $("#RegionItemsCheckboxList");
            var $regionCheckboxes = $("#SelectRegionCheckBoxes input[type=checkbox]");
            var $duration = $("#duration").govUkDurationInput();

            var $durationDropdown = $("#durationDropDown").govUkSelect();

            var $checkboxsregions = $("#SelectRegionCheckBoxes").govUkCheckboxes();

            var $radioDeliveryMode = $("#DeliveryModeRadioButtons").govUkRadios();
            var $radioStudyMode = $("#StudyModeRadioButtons").govUkRadios();
            var $radioAttendance = $("#AttendanceRadioButtons").govUkRadios();

            var $selectedvenue = $("#@nameof(Model.VenueId)").govUkSelect();

            var $startDate = $("#start_date").govUkDateInput();

            var $cost = $("#@nameof(Model.Cost)").govUkInput();
            var $costDescription = $("#@nameof(Model.CostDescription)").govUkTextarea();

            var isClassroomBased = true;
            var isOnline = false;
            var isWorkBased = false;

            var $fullPartTimeRadioButtons = $("#FullPartTimeRadioButtons");
            var $attendancePatternRadioButtons = $("#AttendancePatternRadioButtons");


            switch ($radioDeliveryMode.find("input[type='radio']:checked").val()) {
                case "ClassroomBased":
                {
                    $fullPartTimeRadioButtons.show();
                    $attendancePatternRadioButtons.show();
                    isClassroomBased = true;
                    isOnline = false;
                    isWorkBased = false;
                    break;
                }
                case "Online":
                {
                    $fullPartTimeRadioButtons.hide();
                    $attendancePatternRadioButtons.hide();
                    isClassroomBased = false;
                    isOnline = true;
                    isWorkBased = false;
                    break;
                }
                case "WorkBased":
                {
                    $fullPartTimeRadioButtons.hide();
                    $attendancePatternRadioButtons.hide();
                    isClassroomBased = false;
                    isOnline = false;
                    isWorkBased = true;
                    break;
                }
            }

            if (!isWorkBased) {
                var $nationalTrue = $("#National_true");
                $nationalTrue.prop("checked", false);
                var $nationalFalse = $("#National_false");
                $nationalFalse.prop("checked", false);
                var $regionSection = $("#regions-section");
                $regionSection.hide();
            }

            var $button = $("#save");


            validate();


            function isAllValid(currentValue) {
                return currentValue === true;
            }

            function validate() {

                validStates = [];

                $courseName.govUkInput("validState");
                $courseProviderReference.govUkInput("validState");
                $duration.govUkDurationInput("validState");
                $durationDropdown.govUkSelect("validState");
                $checkboxsregions.govUkCheckboxes("validState");
                $selectedvenue.govUkSelect("validState");
                $cost.govUkInput("validState");
                $URL.govUkInput("validState");
                $radioDeliveryMode.govUkRadios("validState");
                $radioStudyMode.govUkRadios("validState");
                $radioAttendance.govUkRadios("validState");
                $startDate.govUkDateInput("validState");

                if (isClassroomBased)
                {
                    if ($.requiredValidate($selectedvenue.val()))
                    {
                        $selectedvenue.govUkSelect("validState");
                        validStates.push(true);
                    }
                    else
                    {
                        $selectedvenue.govUkSelect("invalidState", $selectedvenue.attr("val-required-message"));
                            validStates.push(false);
                    }
                }



                if ((!$.requiredValidate($cost.val()) && !$.requiredValidate($costDescription.val()))) {
                $cost.govUkInput("invalidState", $cost.attr("val-required-message"));
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $costDescription.attr("val-regex") }, $costDescription.val())) {
                $costDescription.govUkTextarea("invalidState", $costDescription.attr("val-regex-message"));
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $costDescription.attr("val-max-length") }, $costDescription.val())) {
                $costDescription.govUkTextarea("invalidState", $costDescription.attr("val-max-length-message"));
                    validStates.push(false);
                }
                else {

                    $cost.govUkInput("validState");
                    $costDescription.govUkTextarea("validState");
                        validStates.push(true);
                }

                if (isWorkBased) {
                    var $nationalRadio = $("#nationalRadioButtons input[type=radio]:checked").val();
                    if ($.requiredValidate($checkboxsregions.find("input[type='checkbox']:checked").val()) || $nationalRadio === "True") {
                        $checkboxsregions.govUkCheckboxes("validState");
                        validStates.push(true);
                    } else {
                        $checkboxsregions.govUkCheckboxes("invalidState", $checkboxsregions.attr("val-required-message"));
                        validStates.push(false);
                    }
                }

                if (!$.requiredValidate($courseName.val())) {
                $courseName.govUkInput("invalidState", $courseName.attr("val-required-message"));
                    validStates.push(false);
                } else if (
                    !$.regexValidate({ regex: $courseName.attr("val-regex") }, $courseName.val())) {
                $courseName.govUkInput("invalidState", $courseName.attr("val-regex-message"));
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $courseName.attr("val-max-length") }, $courseName.val())) {
                $courseName.govUkInput("invalidState", $courseName.attr("val-max-length-message"));
                    validStates.push(false);
                }
                else {

                    $courseName.govUkInput("validState");
                        validStates.push(true);
                }

                if (!$.regexValidate({ regex: $courseProviderReference.attr("val-regex") }, $courseProviderReference.val())) {
                $courseProviderReference.govUkInput("invalidState", $courseProviderReference.attr("val-regex-message"));
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max: $courseProviderReference.attr("val-max-length") }, $courseProviderReference.val())) {
                $courseProviderReference.govUkInput("invalidState", $courseProviderReference.attr("val-max-length-message"));
                    validStates.push(false);
                }
                else {
                    $courseProviderReference.govUkInput("validState");
                    validStates.push(true);
                }

                var enteredUrl =$URL.val();
                var urlToValidate = "";
                if ($URL.val().includes("http")) {
                    urlToValidate = enteredUrl.substring(enteredUrl.indexOf("//") + 2, enteredUrl.length);
                }
                else {
                    urlToValidate =$URL.val();
                }

                if (!$.regexValidate({ regex:$URL.attr("val-regex") }, urlToValidate)) {
                    $URL.govUkInput("invalidState",$URL.attr("val-regex-message"));
                    validStates.push(false);
                } else if (
                    !$.maxLengthValidate({ max:$URL.attr("val-max-length") }, urlToValidate)) {
                    $URL.govUkInput("invalidState",$URL.attr("val-max-length-message"));
                    validStates.push(false);
                }
                else {
                    $URL.govUkInput("validState");
                    validStates.push(true);
                }

                if (!$.requiredValidate($duration.find("input").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    validStates.push(false);
                } else if (!$.rangeValidate({
                    min: $duration.attr("val-range-min"),
                    max: $duration.attr("val-range-max")
                },
                $duration.find("input").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    validStates.push(false);
                } else if (!$.requiredValidate($duration.find("select").val())) {
                    $duration.govUkDurationInput("invalidState", $duration.attr("val-duration-message"));
                    validStates.push(false);
                } else {
                    $duration.govUkDurationInput("validState");
                    validStates.push(true);
                }

                if ($.requiredValidate($radioDeliveryMode.find("input[type='radio']:checked").val())) {
                    $radioDeliveryMode.govUkRadios("validState");
                    validStates.push(true);
                } else {
                    $radioDeliveryMode.govUkRadios("invalidState", $radioDeliveryMode.attr("val-required-message"));
                    validStates.push(false);
                }

                switch ($radioDeliveryMode.find("input[type='radio']:checked").val()) {
                case "ClassroomBased":
                    {
                        if ($.requiredValidate($radioStudyMode.find("input[type='radio']:checked").val())) {
                            $radioStudyMode.govUkRadios("validState");
                            validStates.push(true);
                        } else {
                            $radioStudyMode.govUkRadios("invalidState", $radioStudyMode.attr("val-required-message"));
                            validStates.push(false);
                        }

                        if ($.requiredValidate($radioAttendance.find("input[type='radio']:checked").val())) {
                            $radioAttendance.govUkRadios("validState");
                            validStates.push(true);
                        } else {
                            $radioAttendance.govUkRadios("invalidState", $radioAttendance.attr("val-required-message"));
                            validStates.push(false);
                        }
                        break;
                    }
                case "Online":
                    {
                        break;
                    }
                case "WorkBased":
                    {
                        break;
                    }
                }

                var radioValue = $("input[name='StartDateType']:checked").val();
                if (radioValue.toUpperCase() === "SPECIFIEDSTARTDATE") {

                    var startDateValue = $startDate.govUkDateInput("getISODateString");

                    if (startDateValue === "") {
                    $startDate.govUkDateInput("invalidState", $startDate.attr("val-required-message"));
                        validStates.push(false);
                    }
                    else {
                        if (!$.dateValidate(startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-date-message"));
                            validStates.push(false);
                        }
                        else if ($.pastDateValidate({ ref: $startDate.attr("val-past-date-ref") }, startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-past-date-message"));
                                validStates.push(false);
                            }
                        else if ($.futureDateValidate({ ref: $startDate.attr("val-future-date-ref") }, startDateValue)) {
                            $startDate.govUkDateInput("invalidState", $startDate.attr("val-future-date-message"));
                            validStates.push(false);
                        }
                        else if ($.dateValidate(startDateValue)) {
                            $startDate.govUkDateInput("validState");
                            validStates.push(true);
                        }
                    }
                };

                var errorArray = $("[class*='govuk-error-message'");
                if (errorArray.length > 0) {


                    var $errorField = $("#" + errorArray[0].closest('.section').id);
                    //$('html,body').animate({ scrollTop: $errorField.offset().top }, 'slow');

                    var notificationBody = "";
                    $.each(errorArray, function (index, value) {
                        var $field = value.closest('.section').id;
                        notificationBody = notificationBody + "<a href='#' id='error' class='govuk-link errorlink' style=color:#b10e1e data-error-field=" + $field + ">"+ value.innerHTML +"</a></br>";
                    });

                    $('.cd-error-summary__body').html(notificationBody);

                    $('#errorsummary').css({ "display": "block" });
                }

                if (!validStates.every(isAllValid)) {
                    $("html, body").animate({
                        scrollTop: $('#errorsummary').offset().top
                    }, 600);
                    $('#errorsummary').focus();
                }

                $('.errorlink').on("click",
                    function(e) {
                        e.preventDefault();

                        var $field = $("#" + $(this).attr("data-error-field"));
                        $('html,body').animate({ scrollTop: $field.offset().top }, 'slow');

                    });
                    }



            $button.on("click",
                function(event) {
                    event.preventDefault();

                    validate();

                    if (validStates.every(isAllValid)) {
                        $("#editCourseRun").submit();
                    }

                });

            $deliveryRadios.change(function () {
            var $venueChoice = $("#sectionVenue");
            var $fullPartTimeRadioButtons = $("#FullPartTimeRadioButtons");
            var $attendancePatternRadioButtons = $("#AttendancePatternRadioButtons");
            var $specifiedStartDate = $("#SpecifiedStartDate");
            var $flexibleStartDate = $("#FlexibleStartDate");

            var $dayTimeAttendance = $("#@AttendancePattern.Daytime");
            var $studyMode = $("#@StudyMode.FullTime");
            switch (this.id) {
                case "ClassroomBased":
                    {
                        $specifiedStartDate.prop("checked", true);
                        $flexibleStartDate.prop("checked", false);
                        $venueChoice.show();
                        $regionItemsCheckboxList.hide();
                        $fullPartTimeRadioButtons.show();
                        $attendancePatternRadioButtons.show();
                        isClassroomBased = true;
                        isOnline = false;
                        isWorkBased = false;
                        $dayTimeAttendance.prop("checked", true);
                        $studyMode.prop("checked", true);
                        break;
                    }
                case "Online":
                    {
                        $flexibleStartDate.prop("checked", true);
                        $specifiedStartDate.prop("checked", false);
                        $venueChoice.hide();
                        $regionItemsCheckboxList.hide();
                        $fullPartTimeRadioButtons.hide();
                        $attendancePatternRadioButtons.hide();
                        isClassroomBased = false;
                        isOnline = true;
                        isWorkBased = false;
                        $dayTimeAttendance.prop("checked", false);
                        $studyMode.prop("checked", false);
                        break;
                    }
                case "WorkBased":
                    {
                        $flexibleStartDate.prop("checked", true);
                        $specifiedStartDate.prop("checked", false);
                        $venueChoice.hide();
                        $regionItemsCheckboxList.show();
                        $fullPartTimeRadioButtons.hide();
                        $attendancePatternRadioButtons.hide();
                        isClassroomBased = false;
                        isOnline = false;
                        isWorkBased = true;
                        $dayTimeAttendance.prop("checked", false);
                        $studyMode.prop("checked", false);
                        break;
                    }
            }


        });

            var replaceAll = function (search, find, replace) {
                return search.split(find).join(replace);
            };

            var makeRequestWithPayload = function (payload, success) {
                console.log(payload);
                var qs = $.param(payload);
                qs = replaceAll(qs, "%5B%5D", "");
                $.get("/CopyCourseRun/AddNewVenue?" + qs, success);
            };



            var onSucess = function (data) {
                window.location.href = data;
            };

            $addNewVenueButton.on("click", function (e) {
                e.preventDefault();

                makeRequestWithPayload({
                    LearnAimRefTitle: $learnAimRefTitle.val(),
                    NotionalNVQLevelv2: $notionalNVQLevelv2.val(),
                    AwardOrgCode: $awardOrgCode.val(),
                    LearnAimRef: $learnAimRef.val(),
                    CourseName: $courseName.val(),
                    CourseId: $courseId.val(),
                    CourseRunId: $courseRunId.val(),
                    CourseProviderReference: $courseProviderReference.val(),
                    DeliveryMode: $radioDeliveryMode.find("input[type='radio']:checked").val(),
                    StartDateType: $("input[name='StartDateType']:checked").val(),
                    VenueId: $selectedvenue.val(),
                    Day: $day.val(),
                    Month: $month.val(),
                    Year: $year.val(),
                    Url: $URL.val(),
                    Cost: $cost.val(),
                    CostDescription: $costDescription.val(),

                    //AdvancedLearnerLoan
                    DurationUnit: $duration.find("select").val(),
                    DurationLength: $duration.find("input").val(),
                    StudyMode: $radioStudyMode.find("input[type='radio']:checked").val(),
                    AttendanceMode: $radioAttendance.find("input[type='radio']:checked").val()



                },
                    onSucess);

            });


            $("a").on("click",
                function(e) {

                    var $regionId = $(this).attr('region-id');

                    if ($regionId) {
                        e.preventDefault();
                        var $selectAllText = $(this).text();
                        var $allCheckedCheckboxes = $("input[region-id='" + $regionId + "']:checkbox");
                        var allCheckedFilterCheckboxesLength = $allCheckedCheckboxes.length;

                        for (var i = 0; i < allCheckedFilterCheckboxesLength; i++) {
                            if ($selectAllText === "Select all") {
                                $($allCheckedCheckboxes[i]).prop('checked', true);

                            } else {
                                $($allCheckedCheckboxes[i]).prop('checked', false);

                            }
                        }

                        if ($selectAllText === "Select all") {
                            $(this).text("Clear all");
                        } else {
                            $(this).text("Select all");
                        }
                    }
                });

        });
    })(jQuery);
</script>