@using Dfc.CourseDirectory.Models.Enums
@using Dfc.CourseDirectory.Web.Helpers
@using Dfc.CourseDirectory.Web.ViewComponents.Apprenticeships
@{
    Layout = "_Layout_Your_Courses";
}

@model Dfc.CourseDirectory.Web.ViewModels.Apprenticeships.DeliveryOptionsCombinedViewModel

    <form class="govuk-!-margin-bottom-9" id="ApprenticeshipDeliveryOptionsCombinedForm" asp-controller="Apprenticeships" asp-action="AddCombined" method="post">
        <a asp-controller="Apprenticeships" asp-action="Delivery" class="govuk-back-link">Back</a><br />

        <div id="errorsummary" class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary" style="display: none;">
            <h2 class="govuk-error-summary__title" id="error-summary-title">
                There is an issue with this apprenticeship
            </h2>
            <div class="govuk-error-summary__body">
                <ul class="govuk-list govuk-error-summary__list"></ul>
            </div>
        </div>

        <div class="cd-dashboard govuk-grid-row govuk-body dual-delivery ">

            <div class="govuk-form-group govuk-grid-column-two-thirds">
                <h1 class="govuk-heading-l">
                    Select delivery options
                </h1>


                <div class="govuk-form-group govuk-!-margin-bottom-6">
                    <fieldset class="govuk-fieldset govuk-!-margin-bottom-6" aria-describedby="waste-hint">
                        <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
                            <h3 class="govuk-fieldset__heading">
                                How is the training delivered at this location?
                            </h3>
                        </legend>
                        <span id="govuk-label-deliveryoptions" class="govuk-hint">
                            Select all that apply
                        </span>
                        <div id="deliveryoptions" class="govuk-checkboxes" val-required-message="Select at least one option from Day Release and Block Release">
                            <div class="govuk-checkboxes__item">
                                <input class="govuk-checkboxes__input" type="checkbox" asp-for="@Model.DayRelease">
                                <label class="govuk-label govuk-checkboxes__label">
                                    @WebHelper.GetEnumDescription(ApprenticeShipDeliveryLocation.DayRelease)
                                </label>
                            </div>
                            <div class="govuk-checkboxes__item" style="margin-bottom:10px">
                                <input class="govuk-checkboxes__input" type="checkbox" asp-for="@Model.BlockRelease">
                                <label class="govuk-label govuk-checkboxes__label">
                                    @WebHelper.GetEnumDescription(ApprenticeShipDeliveryLocation.BlockRelease)
                                </label>
                            </div>

                        </div>
                        <div class="govuk-checkboxes__item">
                            <input class="govuk-checkboxes__input" id="employer" name="waste" type="checkbox" value="mines" checked disabled>
                            <label class="govuk-label govuk-checkboxes__label" for="employer">
                                Employer’s address
                            </label>
                        </div>


                    </fieldset>
                </div>

                <div class="govuk-form-group  govuk-!-margin-left-9">


                    @await Component.InvokeAsync(nameof(ChooseLocation), new ChooseLocationModel()

             {
             LabelText = "Location",
             HintText = "Select a venue you can travel from to deliver training",
             LocationId = Model.LocationId ?? (Guid?)null,
             DisplayLink = true,
             DeliveryOptionsListItemModel = Model.DeliveryOptionsListItemModel

             })
                    <br />
                    <fieldset class="govuk-fieldset" aria-describedby="waste-hint">
                        <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
                            @*<h3 class="govuk-fieldset__heading" id="govuk-label-@nameof(@Model.Radius)">
                                How is the training delivered at this location?

                            </h3>*@
                        </legend>
                        <span id="govuk-label-Radius" class="govuk-hint">
                            How far are you willing to travel from the selected location?

                        </span>
                        <div class="govuk-form-group">

                            <input class="govuk-input govuk-input--width-4 govuk-!-margin-right-3" asp-for="@Model.Radius" type="text" 
                                   val-required-message="Select How far you are willing to travel from selected location"
                                   val-range-min="1"
                                   val-range-max="999"
                                   val-range-message="Miles must be  between 1 and 999" />
                            <span>miles</span>
                        </div>
                        <p>Or</p>
                        <div class="govuk-checkboxes__item">
                            <input class="govuk-checkboxes__input" type="checkbox" asp-for="@Model.National">
                            <label class="govuk-label govuk-checkboxes__label">
                                Across England
                            </label>
                        </div>
                    </fieldset>
                </div>


                <div class="govuk-!-margin-top-9">

                    <a id="continue" class="govuk-button">Save and continue</a>

                    <button class="govuk-button govuk-button--secondary" id="next2" asp-action="Add" asp-controller="Apprenticeships">Save and add another</button>

                </div>

                @if (Model.DeliveryOptionsListItemModel.DeliveryOptionsListItemModel != null && Model.DeliveryOptionsListItemModel.DeliveryOptionsListItemModel.Count() > 0)
                {
                <div class="summary--linked-title">
                    <h2 class="govuk-heading-s">Delivery options </h2>
                </div>
                }
                @{
                    Model.DeliveryOptionsListItemModel.SummaryPage = false;
                }
                @await Component.InvokeAsync(nameof(DeliveryOptionsList), Model.DeliveryOptionsListItemModel)

            </div>
        </div>
    </form>

    <script>
    (function ($) {
        $(function () {
            var $SaveAndContinue = $("#next1");
            var $AddAnother = $("#next2");
            var validStates = [];
            var $errorSummary = $("#errorsummary").govUkErrorSummary();
            var $selectedVenue = $("#@nameof(Model.LocationId)").govUkSelect();
            var $checkboxesdeliverymethod = $("#deliveryoptions").govUkCheckboxes();
            var $TooManyLoctions = $("#TooManyLocations");
            var $Continue = $("#continue");
            var $National = $("#@nameof(Model.National)")
            var $Radius = $("#@nameof(Model.Radius)").govUkInput();

            var $DayRelease =$("#@nameof(Model.DayRelease)")
            var $BlockRelease = $("#@nameof(Model.BlockRelease)")

            function isAllValid(currentValue) {
                return currentValue === true;
            }

            $Radius.on("keypress",
                function(event) {
                    var charCode = event.which ? event.which : event.keyCode;

                    if ($Radius.val().length >= 3) {
                        return false;
                    };

                    if ((charCode >= 48 && charCode <= 57)) {
                        return true;
                    }

                    return false;
                });

            function validate() {

                validStates = [];
                $errorSummary.govUkErrorSummary("removeAll");
                $selectedVenue.govUkSelect("validState");
                $checkboxesdeliverymethod.govUkCheckboxes("validState");

                var rowCount = $('#ResultsTable tr').length;

                if (rowCount === 251) {
                    validStates.push(false);

                    var element = $TooManyLoctions;
                    var $anchor = document.createElement("a");
                    $anchor.href = "#TooManyLocations";
                    $anchor.innerHTML = element.text();
                    $anchor.id = "error-hash-link-" + "a" + "-" + 1;

                    $errorSummary.govUkErrorSummary("add", $anchor);
                    $errorSummary.govUkErrorSummary("show");
                    $TooManyLoctions.addClass("govuk-error-message");
                    $TooManyLoctions.closest(".govuk-form-group").addClass("govuk-form-group--error");
                    $TooManyLoctions.show();
                }
                else {
                    $TooManyLoctions.closest(".govuk-form-group").removeClass("govuk-form-group--error");
                    $TooManyLoctions.removeClass("govuk-error-message");
                    $TooManyLoctions.hide();
                }

               

                $checkboxesdeliverymethod.govUkCheckboxes("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $checkboxesdeliverymethod[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                validStates.push(true);
                if ($.requiredValidate($checkboxesdeliverymethod.find("input[type='checkbox']:checked").val())) {
                    $checkboxesdeliverymethod.govUkCheckboxes("validState");
                    validStates.push(true);
                } else {
                    $checkboxesdeliverymethod.govUkCheckboxes("invalidState", $checkboxesdeliverymethod.attr("val-required-message"));
                    var deliveryMethodErrorHashLinks = $checkboxesdeliverymethod.govUkCheckboxes("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", deliveryMethodErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                if (!$National.is(":checked")) {

                    // venue
                    $selectedVenue.govUkSelect("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $selectedVenue[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                    if (!$.requiredValidate($selectedVenue.val())) {
                        $selectedVenue.govUkSelect("invalidState", $selectedVenue.attr("val-required-message"));
                        var selectedVenueErrorHashLinks = $selectedVenue.govUkSelect("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", selectedVenueErrorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                        validStates.push(false);
                    }



                    if (!$.requiredValidate($Radius.val())) {
                        $Radius.govUkInput("invalidState", $Radius.attr("val-required-message"));
                        var courseNameErrorHashLinks = $Radius.govUkInput("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                        validStates.push(false);
                    } else if (!$.rangeValidate({ min: $Radius.attr("val-range-min"), max: $Radius.attr("val-range-max") }, $Radius.val())) {
                        $Radius.govUkInput("invalidState", $Radius.attr("val-range-message"));
                    var courseNameErrorHashLinks = $Radius.govUkInput("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", courseNameErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }   else {
                        $Radius.govUkInput("validState");
                        $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $Radius[0].id);
                        $errorSummary.govUkErrorSummary("hideIfEmpty")
                        validStates.push(true);
                    }
                } else {

                    // venue
                    $selectedVenue.govUkSelect("validState");
                    $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $selectedVenue[0].id);
                    $errorSummary.govUkErrorSummary("hideIfEmpty")
                    validStates.push(true);
                    if (!$.requiredValidate($selectedVenue.val())) {
                        $selectedVenue.govUkSelect("invalidState", $selectedVenue.attr("val-required-message"));
                        var selectedVenueErrorHashLinks = $selectedVenue.govUkSelect("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", selectedVenueErrorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                        validStates.push(false);
                    }

                    $Radius.govUkInput("validState");
                        $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $Radius[0].id);
                        $errorSummary.govUkErrorSummary("hideIfEmpty")
                        validStates.push(true);
                }



                if (!validStates.every(isAllValid)) {
                    $("html, body").animate({
                        scrollTop: $errorSummary.offset().top
                    }, 600);
                    $errorSummary.focus();
                }
            }

            $("#National").change(function () {
                if ($("#National")[0].checked) {
                    $("#Radius").val(200);
                    $("#Radius").attr('disabled', true);
                } else {
                    $("#Radius").val('');
                    $('#Radius').prop("disabled", false);
                    $('#Radius').removeAttr("disabled");
                }
             
            });

          



            $Continue.on("click", function (event) {
                event.preventDefault();

                var rowCount = $('#ResultsTable tr').length;

                validate();
                if (validStates.every(isAllValid)) {

                    $.ajax({
                        url: '/Apprenticeships/ContinueCombined',
                        type: "GET",
                        dataType: "json",
                        data: {
                            LocationId: $selectedVenue.val(),
                            DayRelease: $("#DayRelease")[0].checked,
                            BlockRelease: $("#BlockRelease")[0].checked,
                            National: $("#National")[0].checked,
                            Radius: $Radius.val(),
                            RowCount: rowCount
                        },
                        contentType: "application/json; charset=utf-8",
                        success: function(data) {
                            window.location.href = data;
                        },
                        error: function(xhr, ajaxOptions, thrownError) {

                        }
                    });
                


                };
            });

            $AddAnother.on("click", function (event) {
                 event.preventDefault();
                 validate();
                if (validStates.every(isAllValid)) {
                    $("#ApprenticeshipDeliveryOptionsCombinedForm").submit();
                }

            });

        });
    })(jQuery);
    </script>

