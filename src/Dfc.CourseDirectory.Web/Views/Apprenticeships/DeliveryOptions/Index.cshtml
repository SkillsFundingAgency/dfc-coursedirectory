@using Dfc.CourseDirectory.Models.Enums
@using Dfc.CourseDirectory.Models.Models.Apprenticeships
@using Dfc.CourseDirectory.Web.Helpers
@using Dfc.CourseDirectory.Web.ViewComponents.Apprenticeships
@using Dfc.CourseDirectory.Web.ViewComponents.Apprenticeships.ApprenticeshipLocationList
@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@{
    ViewData["Title"] = "Select delivery options"; 
    Layout = "_Layout_Your_Courses";
}

@model Dfc.CourseDirectory.Web.ViewModels.Apprenticeships.DeliveryOptionsViewModel



    <div class="cd-dashboard govuk-body ">
        <form class="govuk-!-margin-bottom-9" id="ApprenticeshipDeliveryOptionsForm" asp-controller="Apprenticeships" asp-action="Add" method="post">

            @Html.HiddenFor(x => x.Mode)
            @if (!string.IsNullOrEmpty(@ViewBag.Message))
            {
                @await Component.InvokeAsync(nameof(Notification), new NotificationModel
                {
                    NotificationTitle = "",
                    NotificationMessage = @ViewBag.Message,
                    ClassType = "info-summary"
                })
            }

            <div id="errorsummary" class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary" style="display: none;">
                <h2 class="govuk-error-summary__title" id="error-summary-title">
                    There is an issue with this apprenticeship
                </h2>
                <div class="govuk-error-summary__body">
                    <ul class="govuk-list govuk-error-summary__list"></ul>
                </div>
            </div>

            <h1 class="govuk-heading-l">Select delivery options</h1>

            @await Component.InvokeAsync(nameof(ChooseLocation), new ChooseLocationModel()

            {
                LabelText = "Location",
                HintText = "Select a location you can travel from to deliver training",
                LocationId = Model.LocationId ?? (Guid?)null,
                DisplayLink = true,
                DeliveryLocations = Model.locations,
                Type = ApprenticeshipLocationType.ClassroomBased

            })

            <div class="govuk-form-group">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                        <h2 class="govuk-fieldset__heading">
                            How is the training delivered at this location?
                        </h2>
                    </legend>
                    <span class="govuk-hint">
                        Select all that apply.
                    </span>
                    <div class="govuk-checkboxes govuk-checkboxes--small" id="deliveryoptions" val-required-message="Select how is the training delivered at this location">
                        <div class="govuk-checkboxes__item">
                            <input class="govuk-checkboxes__input" type="checkbox" asp-for="@Model.DayRelease" />
                            <label class="govuk-label govuk-checkboxes__label" for="DayRelease">
                                @WebHelper.GetEnumDescription(ApprenticeShipDeliveryLocation.DayRelease)
                            </label>
                        </div>
                        <div class="govuk-checkboxes__item">
                            <input class="govuk-checkboxes__input" type="checkbox" asp-for="@Model.BlockRelease">
                            <label class="govuk-label govuk-checkboxes__label" for="BlockRelease">
                                @WebHelper.GetEnumDescription(ApprenticeShipDeliveryLocation.BlockRelease)
                            </label>
                        </div>
                    </div>
                </fieldset>
            </div>


            <div class="govuk-!-margin-top-9">

                <a id="continue" class="govuk-button">Continue</a>

                <button class="govuk-button govuk-button--secondary" id="next2" asp-action="Add" asp-controller="Apprenticeships">Add another</button>

            </div>


            @if (Model.locations != null && Model.locations.Any())
            {
                <div class="summary--linked-title">
                    <h2 class="govuk-heading-s">Delivery options </h2>
                </div>
            }
        </form>
            @await Component.InvokeAsync(nameof(ApprenticeshipLocationList), new ApprenticeshipLocationListModel
            {
                Locations = Model.locations,
                SummaryPage = false,
                Mode = Model.Mode
            })



    </div>





<script>
    (function ($) {
        $(function () {
            var $SaveAndContinue = $("#next1");
            var $AddAnother = $("#next2");
            var validStates = [];
            var $errorSummary = $("#errorsummary").govUkErrorSummary();
            var $selectedVenue = $("#@nameof(Model.LocationId)").govUkSelect();
            var $checkboxesdeliverymethod = $("#deliveryoptions").govUkCheckboxes();
            var $TooManyLoctions = $("#TooManyLocations");
            var $Continue = $("#continue");
            var returnToSummery = @(Model.HasOtherDeliveryOptions.ToString().ToLower());
        

        var $DayRelease = $("#@nameof(Model.DayRelease)")
    var $BlockRelease = $("#@nameof(Model.BlockRelease)")

            function isAllValid(currentValue) {
                return currentValue === true;
            }

            function validate() {

                validStates = [];
                $errorSummary.govUkErrorSummary("removeAll");
                $selectedVenue.govUkSelect("validState");
                $checkboxesdeliverymethod.govUkCheckboxes("validState");

                var rowCount = $('#ResultsTable tr').length;

                if (rowCount === 250) {
                    validStates.push(false);

                    var element = $TooManyLoctions;
                    var $anchor = document.createElement("a");
                    $anchor.href = "#TooManyLocations";
                    $anchor.innerHTML = element.text();
                    $anchor.id = "error-hash-link-" + "a" + "-" + 1;

                    $errorSummary.govUkErrorSummary("add", $anchor);
                    $errorSummary.govUkErrorSummary("show");
                    $TooManyLoctions.addClass("govuk-error-message");
                    $TooManyLoctions.closest(".govuk-form-group").addClass("govuk-form-group--error");
                    $TooManyLoctions.show();
                }
                else {
                    $TooManyLoctions.closest(".govuk-form-group").removeClass("govuk-form-group--error");
                    $TooManyLoctions.removeClass("govuk-error-message");
                    $TooManyLoctions.hide();
                }

                // venue
                $selectedVenue.govUkSelect("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $selectedVenue[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
                validStates.push(true);
                if (!$.requiredValidate($selectedVenue.val())) {
                    $selectedVenue.govUkSelect("invalidState", $selectedVenue.attr("val-required-message"));
                    var selectedVenueErrorHashLinks = $selectedVenue.govUkSelect("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", selectedVenueErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                $checkboxesdeliverymethod.govUkCheckboxes("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $checkboxesdeliverymethod[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty");
                validStates.push(true);
                if ($.requiredValidate($checkboxesdeliverymethod.find("input[type='checkbox']:checked").val())) {
                    $checkboxesdeliverymethod.govUkCheckboxes("validState");
                    validStates.push(true);
                } else {
                    $checkboxesdeliverymethod.govUkCheckboxes("invalidState", $checkboxesdeliverymethod.attr("val-required-message"));
                    var deliveryMethodErrorHashLinks = $checkboxesdeliverymethod.govUkCheckboxes("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", deliveryMethodErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }



                if (!validStates.every(isAllValid)) {
                    $("html, body").animate({
                        scrollTop: $errorSummary.offset().top
                    }, 600);
                    $errorSummary.focus();
                }
            }

            $Continue.on("click", function (event) {
                event.preventDefault();

                var rowCount = $('#ResultsTable tr').length;

                if (rowCount >= 2 || returnToSummery) {

                    if (($selectedVenue.val() === "" || $selectedVenue.val() === undefined) && ($("#BlockRelease")[0].checked === false) && ($("#DayRelease")[0].checked === false)) {
                        $("#ApprenticeshipDeliveryOptionsForm").submit();
                    } else {
                        validate();
                        if (validStates.every(isAllValid)) {

                            $.ajax({
                                url: '/Apprenticeships/Continue',
                                type: "GET",
                                dataType: "json",
                                data: { LocationId: $selectedVenue.val(), DayRelease: $("#DayRelease")[0].checked, BlockRelease: $("#BlockRelease")[0].checked, RowCount: rowCount,Mode:$("#Mode").val() },

                                contentType: "application/json; charset=utf-8",
                                success: function (data) {
                                    window.location.href = data;
                                },
                                error: function (xhr, ajaxOptions, thrownError) {

                                }
                            });
                        };
                    }

                } else {

                    validate();
                    if (validStates.every(isAllValid)) {

                        $.ajax({
                            url: '/Apprenticeships/Continue',
                            type: "GET",
                            dataType: "json",
                            data: { LocationId: $selectedVenue.val(), DayRelease: $("#DayRelease")[0].checked, BlockRelease: $("#BlockRelease")[0].checked, RowCount: rowCount,Mode:$("#Mode").val() },

                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                window.location.href = data;
                            },
                            error: function (xhr, ajaxOptions, thrownError) {

                            }
                        });
                    };
                }
            });


            $AddAnother.on("click", function (event) {
                 event.preventDefault();
                 validate();
                if (validStates.every(isAllValid)) {
                    $("#ApprenticeshipDeliveryOptionsForm").submit();
                }

            });

        });
    })(jQuery);
</script>


