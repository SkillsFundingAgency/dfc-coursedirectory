@using Dfc.CourseDirectory.Models.Enums
@using Dfc.CourseDirectory.Web.Helpers
@using Dfc.CourseDirectory.Web.ViewComponents.Courses.ChooseRegion
@using Dfc.CourseDirectory.Web.ViewComponents.Extensions
@{
    Layout = "_Layout_Your_Courses";
}

@model Dfc.CourseDirectory.Web.ViewModels.Apprenticeships.ApprenticeshipRegionsViewModel



    <form class="govuk-!-margin-bottom-9" id="ApprenticeshipRegionsForm" asp-controller="Apprenticeships" asp-action="ApprenticeShipRegions" method="post">

        <div id="errorsummary" class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary" style="display: none;">
            <h2 class="govuk-error-summary__title" id="error-summary-title">
                There is an issue with this apprenticeship
            </h2>
            <div class="govuk-error-summary__body">
                <ul class="govuk-list govuk-error-summary__list"></ul>
            </div>
        </div>

        <div class="govuk-form-group">
            <fieldset class="govuk-fieldset">
                <a asp-controller="Apprenticeships" asp-action="ApprenticeshipLocationChoiceSelection" class="govuk-back-link">Back</a><br />
                <h1 class="govuk-heading-xl">Select the regions where you provide this training</h1>

                <div id="regions-section">
                    @*<label class="govuk-label" id="govuk-label-SelectRegionCheckBoxes" for="select-region">
                        @Model.ChooseRegion.Regions.LabelText
                    </label>*@
                    <span id="select-region-hint" class="govuk-hint">
                        Select a region below to add sub regions
                    </span>
                    <div class="govuk-checkboxes" id="SelectRegionCheckBoxes" val-required-message="Select at least one region">
                        @foreach (var item in Model.ChooseRegion.Regions.RegionItems)
                        {
                        <details class="govuk-details">
                            <summary class="govuk-details__summary">
                                <span id="region" @item.Id class="govuk-details__summary-text">
                                    @item.RegionName
                                </span>
                            </summary>
                            <div class="govuk-form-group">
                                <h3><a class="govuk-link" id="SelectAll" region-id="@item.Id" href="#">Select all</a></h3>
                                <div class="flex-container govuk-grid-row region-checkboxes" id="details-content-@item.Id" aria-hidden="true">

                                    @{ var x = 0; }
                                    @foreach (var subregion in item.SubRegion)
                                    {
                                    x++;

                                    <div class="govuk-checkboxes__item">
                                        <input class="govuk-checkboxes__input" id="RegionName-@x" region-id="@item.Id" name="SelectedRegions" type="checkbox" value="@subregion.Id" @subregion.Checked.ThenNullableCheck() />
                                        <label class="govuk-label govuk-checkboxes__label" for="SelectedRegions">@subregion.SubRegionName</label>
                                    </div>

                                    }
                                </div>
                            </div>
                        </details>
                        }

                    </div>
                </div>

            </fieldset>
        </div>
        <br />

        <button type="submit" class="govuk-button" id="next">Continue</button>
    </form>
<script>
    (function ($) {
        $(function () {

             var validStates = [];
            var $continue = $("#next");
             var $errorSummary = $("#errorsummary").govUkErrorSummary();
            var $regions = $("#SelectRegionCheckBoxes").govUkCheckboxes();


            //var $nationalRadios = $("#nationalRadioButtons input[type=radio]");
            var $checked = $("#nationalRadioButtons input[type=radio]:checked").val();
            var $regionSection = $("#regions-section");
            if ($checked === "True") {
                $regionSection.hide();
            }

            //$nationalRadios.change(function () {
            //    switch (this.id) {
            //        case "National_true":
            //            {
            //                $regionSection.hide();
            //                break;
            //            }
            //        case "National_false":
            //            {
            //                $regionSection.show();
            //                break;
            //            }
            //    }
            //});
            $("a").on("click",
                function (e) {

                    var $regionId = $(this).attr('region-id');

                    if ($regionId) {
                        e.preventDefault();
                        var $selectAllText = $(this).text();
                        var $allCheckedCheckboxes = $("input[region-id='" + $regionId + "']:checkbox");
                        var allCheckedFilterCheckboxesLength = $allCheckedCheckboxes.length;

                        for (var i = 0; i < allCheckedFilterCheckboxesLength; i++) {
                            if ($selectAllText === "Select all") {
                                $($allCheckedCheckboxes[i]).prop('checked', true);

                            } else {
                                $($allCheckedCheckboxes[i]).prop('checked', false);

                            }
                        }

                        if ($selectAllText === "Select all") {
                            $(this).text("Clear all");
                        } else {
                            $(this).text("Select all");
                        }
                    }
                });


            function isAllValid(currentValue) {
                return currentValue === true;
            }


            function validate() {
                validStates = [];

                $regions.govUkCheckboxes("validState");
                $errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $regions[0].id);
                $errorSummary.govUkErrorSummary("hideIfEmpty")
               // var $nationalRadioChecked = $("#nationalRadioButtons input[type=radio]:checked").val();

               // $national.govUkCheckboxes("validState");
                //$errorSummary.govUkErrorSummary("removeErrorHashLinksFor", $national[0].id);
                //$errorSummary.govUkErrorSummary("hideIfEmpty");
                //validStates.push(true);
                //if ($nationalRadioChecked == undefined && isWorkBased) {
                //    $national.govUkCheckboxes("invalidState", $national.attr("val-required-message"));
                //    var nationalErrorHashLinks = $national.govUkCheckboxes("getErrorHashLinks");
                //    $errorSummary.govUkErrorSummary("add", nationalErrorHashLinks);
                //    $errorSummary.govUkErrorSummary("show");
                //    validStates.push(false);
                //}
                //validStates.push(true);
                if (!$.requiredValidate($regions.find("input[type='checkbox']:checked").val())) {
                    $regions.govUkCheckboxes("invalidState", $regions.attr("val-required-message"));
                    var regionsErrorHashLinks = $regions.govUkCheckboxes("getErrorHashLinks");
                    $errorSummary.govUkErrorSummary("add", regionsErrorHashLinks);
                    $errorSummary.govUkErrorSummary("show");
                    validStates.push(false);
                }

                if (!validStates.every(isAllValid)) {
                    $("html, body").animate({
                        scrollTop: $errorSummary.offset().top
                    }, 600);
                    $errorSummary.focus();
                }

                return validStates.every(isAllValid);
            }

              $continue.on("click", function (event) {
                event.preventDefault();
                validate();
                if (validStates.every(isAllValid)) {
                    $("#ApprenticeshipRegionsForm").submit();
                }
            });


        });
    })(jQuery);
</script>





