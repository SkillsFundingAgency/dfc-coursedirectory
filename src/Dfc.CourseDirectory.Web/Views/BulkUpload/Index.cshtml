@using Dfc.CourseDirectory.Models.Enums
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity
@using Dfc.CourseDirectory.Web.Areas.Identity.Data;
@using Dfc.CourseDirectory.Web.ViewComponents.Notification
@{
    Layout = "_Layout_Your_Courses";
}

@model Dfc.CourseDirectory.Web.ViewModels.BulkUpload.BulkUploadViewModel


@inject IAuthorizationService Authorization

@{
    ViewData["Title"] = "Bulk Upload";
    var authorised = await Authorization.AuthorizeAsync(User, "Admin");
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        <h1 class="govuk-heading-xl">
            Upload a file
        </h1>

        @{
            var styleAttribute = (string.IsNullOrEmpty(Model.NotificationTitle) && Model.errors == null)
                ? "style=\"display: none;\""
                : string.Empty;
        }

        <div id="errorSummary" class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary" @Html.Raw(styleAttribute)>
            <h2 class="govuk-error-summary__title" id="error-summary-title">
                @if (string.IsNullOrEmpty(Model.NotificationTitle))
                {
                    <span>There is a problem</span>
                }
                else
                {
                    @Model.NotificationTitle
                }
            </h2>
            <div class="govuk-error-summary__body">
                <ul class="govuk-list govuk-error-summary__list">
                    @if (!string.IsNullOrEmpty(Model.NotificationMessage))
                    {
                        <li>@Model.NotificationMessage</li>
                    }
                    @if (Model.errors != null && Model.errors.Any())
                    {
                        foreach (var error in Model.errors)
                        {
                            <li>
                                <span id="name-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">
                                        Error:
                                    </span>
                                    @error
                                </span>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-half">

        <form method="post" id="bulkUploadForm" enctype="multipart/form-data"
              asp-controller="BulkUpload"
              asp-action="Index">
            <p class="govuk-body govuk-!-padding-bottom-4">
                Create a file with the courses you want to publish. You can either use a blank template or download a file of the courses that are published now and amend it. When you upload it you will be able to fix any errors before publishing and replace the courses you currently have listed in the course directory.
            </p>
            <div id="groupServerSideError" class="govuk-form-group">
                <label class="govuk-label" for="bulkUploadFile">
                    Upload a file
                </label>
                <span id="serverSideError" class="govuk-error-message" style="display: none">The selected file is empty</span>
                <input class="govuk-file-upload" id="bulkUploadFile" name="bulkUploadFile" type="file"
                       val-required-message="Select a file to upload"
                       val-file-extensions="csv"
                       val-file-extensions-message="The selected file must be a csv"
                       val-file-size-max="209715200"
                       val-file-size-max-message="The selected file must be smaller than 200MB" />
            </div>
            <div class="govuk-form-group">
                <button type="submit" id="uploadButton" class="govuk-button">
                    Upload
                </button>
            </div>
        </form>
    </div>
    <div class="govuk-grid-column-one-half">
        <h3 class="govuk-heading-m">Template</h3>
        <ul class="govuk-list">
            <li>
                <a href="#" class="govuk-link">Download current courses in Excel template</a>
            </li>
            <li class="govuk-!-padding-bottom-4">
                <a href="#" class="govuk-link">Download current courses as csv template</a>
            </li>
            <li>
                <a href="#" class="govuk-link">Download blank template (Excel format)</a>
            </li>
            <li>
                @Html.ActionLink("Download blank template (csv format)", "GetBulkUploadTemplateFile", "BlobStorage")
            </li>
        </ul>
    </div>
</div>

<script>
        (function ($) {
            $(function () {
                var $errorSummary = $("#errorSummary").govUkErrorSummary();
                var $bulkUploadFile = $("#bulkUploadFile").govUkFileUpload();
                var $button = $("#uploadButton");

                var hasServerSideError = '@(Model.errors != null && Model.errors.Any() ? true : false)'
                if (hasServerSideError === 'True') {
                    $("#serverSideError").show();
                    $("#groupServerSideError").addClass("govuk-form-group--error");
                }
                else {
                    $("#serverSideError").hide();
                    $("#groupServerSideError").removeClass("govuk-form-group--error");
                }

                $bulkUploadFile.on("change", function () {
                    $bulkUploadFile.govUkFileUpload("validState");
                    $errorSummary.govUkErrorSummary("removeAll");
                    $errorSummary.govUkErrorSummary("hide");
                });

                $button.on("click", function (event) {
                    event.preventDefault();
                    if (!$.requiredValidate($bulkUploadFile.val())) {
                        $bulkUploadFile.govUkFileUpload("invalidState", $bulkUploadFile.attr("val-required-message"));
                        var errorHashLinks = $bulkUploadFile.govUkFileUpload("getErrorHashLinks");
                        $errorSummary.govUkErrorSummary("add", errorHashLinks);
                        $errorSummary.govUkErrorSummary("show");
                    } else if ($bulkUploadFile[0].files) {
                        if (!$.fileExtensionsValidate({ extensions: $bulkUploadFile.attr("val-file-extensions") }, $bulkUploadFile[0].files[0])) {
                            $bulkUploadFile.govUkFileUpload("invalidState", $bulkUploadFile.attr("val-file-extensions-message"));
                            var errorHashLinks = $bulkUploadFile.govUkFileUpload("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", errorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                        } else if (!$.fileSizeMaxValidate({ max: $bulkUploadFile.attr("val-file-size-max") }, $bulkUploadFile[0].files[0])) {
                            $bulkUploadFile.govUkFileUpload("invalidState", $bulkUploadFile.attr("val-file-size-max-message"));
                            var errorHashLinks = $bulkUploadFile.govUkFileUpload("getErrorHashLinks");
                            $errorSummary.govUkErrorSummary("add", errorHashLinks);
                            $errorSummary.govUkErrorSummary("show");
                        } else {
                            $bulkUploadFile.govUkFileUpload("validState");
                            $errorSummary.govUkErrorSummary("removeAll");
                            $errorSummary.govUkErrorSummary("hide");
                            $("#bulkUploadForm").submit();
                        }
                    } else {
                        $bulkUploadFile.govUkFileUpload("validState");
                        $errorSummary.govUkErrorSummary("removeAll");
                        $errorSummary.govUkErrorSummary("hide");
                        $("#bulkUploadForm").submit();
                    }
                });
            });
        })(jQuery);
</script>


