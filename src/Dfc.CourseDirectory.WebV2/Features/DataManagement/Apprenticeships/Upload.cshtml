@model Dfc.CourseDirectory.WebV2.Features.DataManagement.Apprenticeships.Upload.ViewModel;
@{
    ViewBag.Title = "Data Upload - Upload apprenticeship data";

    var missingStandardCodes = ViewBag.MissingStandardRows as IReadOnlyCollection<int> ?? Array.Empty<int>();
    var invalidStandardCodes = ViewBag.InvalidStandardRows as IReadOnlyCollection<(int StandardCode, int StandardVersion, int RowNumber)> ?? Array.Empty<(int StandardCode, int StandardVersion, int RowNumber)>();
}

@section BackLink {
    <govuk-back-link asp-controller="ProviderDashboard" asp-action="Index" asp-all-route-data="@ProviderContext.RouteValues">Back</govuk-back-link>
}

<govuk-error-summary>
    @* The message when headers are missing is unusual; this summary needs to list the missing headers
        whereas the inline message below does not.
        The list of missing headers is in ViewData; if they're not empty we use them to construct the message. *@
    @if (ViewBag.MissingHeaders is IReadOnlyCollection<string> missingHeaders && missingHeaders.Count != 0)
    {
        <govuk-error-summary-item>
            <a href="#@(Html.IdFor(m => m.File))">@Html.ValidationMessageFor(m => m.File)</a>
            <govuk-details class="govuk-!-margin-top-4 govuk-!-margin-bottom-0">
                <govuk-details-summary>CSV headings</govuk-details-summary>
                <govuk-details-text>
                    <ul class="govuk-list govuk-!-margin-0">
                        @foreach (var header in missingHeaders)
                        {
                            <li data-testid="MissingHeader">@header</li>
                        }
                    </ul>
                </govuk-details-text>
            </govuk-details>
        </govuk-error-summary-item>
    }
    else if (missingStandardCodes.Count != 0 || invalidStandardCodes.Count != 0)
    {
        <govuk-error-summary-item>
            <a href="#@(Html.IdFor(m => m.File))">The file contains errors</a>

            @{
                var standardCodeErrorTypes = (missingStandardCodes.Count != 0 ? 1 : 0) +
                    (invalidStandardCodes.Count != 0 ? 1 : 0);
            }

            @if (missingStandardCodes.Count != 0)
            {
                async Task RenderMissingStandardCodesError()
                {
                    <p>You must enter a Standard in the STANDARD_CODE and STANDARD_VERSION columns</p>
                    <ul class="govuk-list govuk-!-margin-0">
                        @foreach (var rowNumber in missingStandardCodes)
                        {
                            <li data-testid="MissingStandardCode">Row @rowNumber</li>
                        }
                    </ul>
                }

                @if (standardCodeErrorTypes != 1)
                {
                    <govuk-details class="govuk-!-margin-top-4 govuk-!-margin-bottom-0">
                        <govuk-details-summary>Missing apprenticeship standard code or version</govuk-details-summary>
                        <govuk-details-text>
                            @{ await RenderMissingStandardCodesError(); }
                        </govuk-details-text>
                    </govuk-details>
                }
                else
                {
                    <div class="govuk-!-margin-top-4 pttcd-!-error">
                        @{ await RenderMissingStandardCodesError(); }
                    </div>
                }
            }

            @if (invalidStandardCodes.Count != 0)
            {
                async Task RenderInvalidStandardCodesError()
                {
                    <p>You must enter a valid Standard in the STANDARD_CODE and STANDARD_VERSION columns</p>
                    <ul class="govuk-list govuk-!-margin-0">
                        @foreach (var (_, _, rowNumber) in invalidStandardCodes)
                        {
                            <li data-testid="InvalidStandardCode">Row @rowNumber</li>
                        }
                    </ul>
                }

                @if (standardCodeErrorTypes != 1)
                {
                    <govuk-details class="govuk-!-margin-top-4 govuk-!-margin-bottom-0">
                        <govuk-details-summary>Invalid apprenticeship standard code or version</govuk-details-summary>
                        <govuk-details-text>
                            @{ await RenderInvalidStandardCodesError(); }
                        </govuk-details-text>
                    </govuk-details>
                }
                else
                {
                    <div class="govuk-!-margin-top-4 pttcd-!-error">
                        @{ await RenderInvalidStandardCodesError(); }
                    </div>
                }
            }
        </govuk-error-summary-item>
    }
    else
    {
        <govuk-error-summary-item asp-for="File" />
    }
</govuk-error-summary>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        <h1 class="govuk-heading-xl">Upload your apprenticeship data</h1>
    </div>
    <div class="govuk-grid-column-two-thirds">
        <form asp-action="Upload" asp-all-route-data="@ProviderContext.RouteValues" enctype="multipart/form-data">

            <p class="govuk-body">You can upload a CSV file to update your data in Publish to the course directory.</p>
            <p class="govuk-body">To ensure an upload is successful you must:</p>
            <ul class="govuk-list govuk-list--bullet govuk-!-margin-bottom-7">
                <li>
                    add new venues <a asp-action="Index" asp-all-route-data="@ProviderContext.RouteValues" asp-controller="AddVenue" class="govuk-link">on screen</a> or by <a asp-action="Index" asp-all-route-data="@ProviderContext.RouteValues" asp-controller="VenuesDataManagement" class="govuk-link">venue upload</a> prior to an apprenticeship upload
                </li>
                <li>include existing and new apprenticeships in the data file</li>
                <li>follow the <a asp-action="Formatting" asp-all-route-data="@ProviderContext.RouteValues" class="govuk-link">file format requirements</a></li>
            </ul>
            <govuk-file-upload asp-for="File" input-accept=".csv">
                <govuk-file-upload-label>Upload a file</govuk-file-upload-label>
            </govuk-file-upload>

            <govuk-button type="submit" prevent-double-click="true">Continue</govuk-button>
        </form>

    </div>
    <div class="govuk-grid-column-one-third">
        <aside class="pttcd-provider-data-upload__download-panel" role="complementary">
            <h2 class="govuk-heading-m" id="subsection-title">
                Data file downloads
            </h2>
            <nav role="navigation" aria-labelledby="subsection-title">
                <ul class="govuk-list govuk-list--bullet govuk-!-font-size-16">
                    @if (Model.ApprenticeshipCount > 0)
                    {
                        <li>
                            <a asp-action="Download" asp-all-route-data="@ProviderContext.RouteValues" class="govuk-link" data-testid="DownloadLink">Download your published apprenticeship data (CSV)</a>
                        </li>
                    }
                    <li>
                        <a asp-action="Template" asp-all-route-data="@ProviderContext.RouteValues" class="govuk-link">Download an empty apprenticeship data template (CSV)</a>
                    </li>
                </ul>
            </nav>
        </aside>
    </div>
</div>
